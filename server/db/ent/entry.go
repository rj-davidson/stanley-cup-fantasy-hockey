// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/entry"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/league"
)

// Entry is the model entity for the Entry schema.
type Entry struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// OwnerName holds the value of the "owner_name" field.
	OwnerName string `json:"owner_name,omitempty"`
	// PointTotal holds the value of the "point_total" field.
	PointTotal int `json:"point_total,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EntryQuery when eager-loading is set.
	Edges          EntryEdges `json:"edges"`
	league_entries *int
	selectValues   sql.SelectValues
}

// EntryEdges holds the relations/edges for other nodes in the graph.
type EntryEdges struct {
	// League holds the value of the league edge.
	League *League `json:"league,omitempty"`
	// Forwards holds the value of the forwards edge.
	Forwards []*Player `json:"forwards,omitempty"`
	// Defenders holds the value of the defenders edge.
	Defenders []*Player `json:"defenders,omitempty"`
	// Goalies holds the value of the goalies edge.
	Goalies []*Player `json:"goalies,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// LeagueOrErr returns the League value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EntryEdges) LeagueOrErr() (*League, error) {
	if e.loadedTypes[0] {
		if e.League == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: league.Label}
		}
		return e.League, nil
	}
	return nil, &NotLoadedError{edge: "league"}
}

// ForwardsOrErr returns the Forwards value or an error if the edge
// was not loaded in eager-loading.
func (e EntryEdges) ForwardsOrErr() ([]*Player, error) {
	if e.loadedTypes[1] {
		return e.Forwards, nil
	}
	return nil, &NotLoadedError{edge: "forwards"}
}

// DefendersOrErr returns the Defenders value or an error if the edge
// was not loaded in eager-loading.
func (e EntryEdges) DefendersOrErr() ([]*Player, error) {
	if e.loadedTypes[2] {
		return e.Defenders, nil
	}
	return nil, &NotLoadedError{edge: "defenders"}
}

// GoaliesOrErr returns the Goalies value or an error if the edge
// was not loaded in eager-loading.
func (e EntryEdges) GoaliesOrErr() ([]*Player, error) {
	if e.loadedTypes[3] {
		return e.Goalies, nil
	}
	return nil, &NotLoadedError{edge: "goalies"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Entry) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case entry.FieldID, entry.FieldPointTotal:
			values[i] = new(sql.NullInt64)
		case entry.FieldOwnerName:
			values[i] = new(sql.NullString)
		case entry.ForeignKeys[0]: // league_entries
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Entry fields.
func (e *Entry) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case entry.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int(value.Int64)
		case entry.FieldOwnerName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field owner_name", values[i])
			} else if value.Valid {
				e.OwnerName = value.String
			}
		case entry.FieldPointTotal:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field point_total", values[i])
			} else if value.Valid {
				e.PointTotal = int(value.Int64)
			}
		case entry.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field league_entries", value)
			} else if value.Valid {
				e.league_entries = new(int)
				*e.league_entries = int(value.Int64)
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Entry.
// This includes values selected through modifiers, order, etc.
func (e *Entry) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// QueryLeague queries the "league" edge of the Entry entity.
func (e *Entry) QueryLeague() *LeagueQuery {
	return NewEntryClient(e.config).QueryLeague(e)
}

// QueryForwards queries the "forwards" edge of the Entry entity.
func (e *Entry) QueryForwards() *PlayerQuery {
	return NewEntryClient(e.config).QueryForwards(e)
}

// QueryDefenders queries the "defenders" edge of the Entry entity.
func (e *Entry) QueryDefenders() *PlayerQuery {
	return NewEntryClient(e.config).QueryDefenders(e)
}

// QueryGoalies queries the "goalies" edge of the Entry entity.
func (e *Entry) QueryGoalies() *PlayerQuery {
	return NewEntryClient(e.config).QueryGoalies(e)
}

// Update returns a builder for updating this Entry.
// Note that you need to call Entry.Unwrap() before calling this method if this Entry
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Entry) Update() *EntryUpdateOne {
	return NewEntryClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Entry entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Entry) Unwrap() *Entry {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Entry is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Entry) String() string {
	var builder strings.Builder
	builder.WriteString("Entry(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("owner_name=")
	builder.WriteString(e.OwnerName)
	builder.WriteString(", ")
	builder.WriteString("point_total=")
	builder.WriteString(fmt.Sprintf("%v", e.PointTotal))
	builder.WriteByte(')')
	return builder.String()
}

// Entries is a parsable slice of Entry.
type Entries []*Entry
