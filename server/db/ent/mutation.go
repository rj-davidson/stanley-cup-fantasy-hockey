// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/entry"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/game"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/goaliestats"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/league"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/player"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/predicate"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/skaterstats"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/team"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeEntry       = "Entry"
	TypeGame        = "Game"
	TypeGoalieStats = "GoalieStats"
	TypeLeague      = "League"
	TypePlayer      = "Player"
	TypeSkaterStats = "SkaterStats"
	TypeTeam        = "Team"
)

// EntryMutation represents an operation that mutates the Entry nodes in the graph.
type EntryMutation struct {
	config
	op             Op
	typ            string
	id             *int
	owner_name     *string
	clearedFields  map[string]struct{}
	league         *int
	clearedleague  bool
	players        map[int]struct{}
	removedplayers map[int]struct{}
	clearedplayers bool
	done           bool
	oldValue       func(context.Context) (*Entry, error)
	predicates     []predicate.Entry
}

var _ ent.Mutation = (*EntryMutation)(nil)

// entryOption allows management of the mutation configuration using functional options.
type entryOption func(*EntryMutation)

// newEntryMutation creates new mutation for the Entry entity.
func newEntryMutation(c config, op Op, opts ...entryOption) *EntryMutation {
	m := &EntryMutation{
		config:        c,
		op:            op,
		typ:           TypeEntry,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEntryID sets the ID field of the mutation.
func withEntryID(id int) entryOption {
	return func(m *EntryMutation) {
		var (
			err   error
			once  sync.Once
			value *Entry
		)
		m.oldValue = func(ctx context.Context) (*Entry, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Entry.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEntry sets the old Entry of the mutation.
func withEntry(node *Entry) entryOption {
	return func(m *EntryMutation) {
		m.oldValue = func(context.Context) (*Entry, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EntryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EntryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EntryMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EntryMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Entry.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetOwnerName sets the "owner_name" field.
func (m *EntryMutation) SetOwnerName(s string) {
	m.owner_name = &s
}

// OwnerName returns the value of the "owner_name" field in the mutation.
func (m *EntryMutation) OwnerName() (r string, exists bool) {
	v := m.owner_name
	if v == nil {
		return
	}
	return *v, true
}

// OldOwnerName returns the old "owner_name" field's value of the Entry entity.
// If the Entry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntryMutation) OldOwnerName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwnerName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwnerName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwnerName: %w", err)
	}
	return oldValue.OwnerName, nil
}

// ResetOwnerName resets all changes to the "owner_name" field.
func (m *EntryMutation) ResetOwnerName() {
	m.owner_name = nil
}

// SetLeagueID sets the "league" edge to the League entity by id.
func (m *EntryMutation) SetLeagueID(id int) {
	m.league = &id
}

// ClearLeague clears the "league" edge to the League entity.
func (m *EntryMutation) ClearLeague() {
	m.clearedleague = true
}

// LeagueCleared reports if the "league" edge to the League entity was cleared.
func (m *EntryMutation) LeagueCleared() bool {
	return m.clearedleague
}

// LeagueID returns the "league" edge ID in the mutation.
func (m *EntryMutation) LeagueID() (id int, exists bool) {
	if m.league != nil {
		return *m.league, true
	}
	return
}

// LeagueIDs returns the "league" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// LeagueID instead. It exists only for internal usage by the builders.
func (m *EntryMutation) LeagueIDs() (ids []int) {
	if id := m.league; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetLeague resets all changes to the "league" edge.
func (m *EntryMutation) ResetLeague() {
	m.league = nil
	m.clearedleague = false
}

// AddPlayerIDs adds the "players" edge to the Player entity by ids.
func (m *EntryMutation) AddPlayerIDs(ids ...int) {
	if m.players == nil {
		m.players = make(map[int]struct{})
	}
	for i := range ids {
		m.players[ids[i]] = struct{}{}
	}
}

// ClearPlayers clears the "players" edge to the Player entity.
func (m *EntryMutation) ClearPlayers() {
	m.clearedplayers = true
}

// PlayersCleared reports if the "players" edge to the Player entity was cleared.
func (m *EntryMutation) PlayersCleared() bool {
	return m.clearedplayers
}

// RemovePlayerIDs removes the "players" edge to the Player entity by IDs.
func (m *EntryMutation) RemovePlayerIDs(ids ...int) {
	if m.removedplayers == nil {
		m.removedplayers = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.players, ids[i])
		m.removedplayers[ids[i]] = struct{}{}
	}
}

// RemovedPlayers returns the removed IDs of the "players" edge to the Player entity.
func (m *EntryMutation) RemovedPlayersIDs() (ids []int) {
	for id := range m.removedplayers {
		ids = append(ids, id)
	}
	return
}

// PlayersIDs returns the "players" edge IDs in the mutation.
func (m *EntryMutation) PlayersIDs() (ids []int) {
	for id := range m.players {
		ids = append(ids, id)
	}
	return
}

// ResetPlayers resets all changes to the "players" edge.
func (m *EntryMutation) ResetPlayers() {
	m.players = nil
	m.clearedplayers = false
	m.removedplayers = nil
}

// Where appends a list predicates to the EntryMutation builder.
func (m *EntryMutation) Where(ps ...predicate.Entry) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EntryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EntryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Entry, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EntryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EntryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Entry).
func (m *EntryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EntryMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.owner_name != nil {
		fields = append(fields, entry.FieldOwnerName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EntryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case entry.FieldOwnerName:
		return m.OwnerName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EntryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case entry.FieldOwnerName:
		return m.OldOwnerName(ctx)
	}
	return nil, fmt.Errorf("unknown Entry field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EntryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case entry.FieldOwnerName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwnerName(v)
		return nil
	}
	return fmt.Errorf("unknown Entry field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EntryMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EntryMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EntryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Entry numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EntryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EntryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EntryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Entry nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EntryMutation) ResetField(name string) error {
	switch name {
	case entry.FieldOwnerName:
		m.ResetOwnerName()
		return nil
	}
	return fmt.Errorf("unknown Entry field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EntryMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.league != nil {
		edges = append(edges, entry.EdgeLeague)
	}
	if m.players != nil {
		edges = append(edges, entry.EdgePlayers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EntryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case entry.EdgeLeague:
		if id := m.league; id != nil {
			return []ent.Value{*id}
		}
	case entry.EdgePlayers:
		ids := make([]ent.Value, 0, len(m.players))
		for id := range m.players {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EntryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedplayers != nil {
		edges = append(edges, entry.EdgePlayers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EntryMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case entry.EdgePlayers:
		ids := make([]ent.Value, 0, len(m.removedplayers))
		for id := range m.removedplayers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EntryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedleague {
		edges = append(edges, entry.EdgeLeague)
	}
	if m.clearedplayers {
		edges = append(edges, entry.EdgePlayers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EntryMutation) EdgeCleared(name string) bool {
	switch name {
	case entry.EdgeLeague:
		return m.clearedleague
	case entry.EdgePlayers:
		return m.clearedplayers
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EntryMutation) ClearEdge(name string) error {
	switch name {
	case entry.EdgeLeague:
		m.ClearLeague()
		return nil
	}
	return fmt.Errorf("unknown Entry unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EntryMutation) ResetEdge(name string) error {
	switch name {
	case entry.EdgeLeague:
		m.ResetLeague()
		return nil
	case entry.EdgePlayers:
		m.ResetPlayers()
		return nil
	}
	return fmt.Errorf("unknown Entry edge %s", name)
}

// GameMutation represents an operation that mutates the Game nodes in the graph.
type GameMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	homeScore          *int
	addhomeScore       *int
	awayScore          *int
	addawayScore       *int
	clearedFields      map[string]struct{}
	awayTeam           *int
	clearedawayTeam    bool
	homeTeam           *int
	clearedhomeTeam    bool
	skaterStats        map[int]struct{}
	removedskaterStats map[int]struct{}
	clearedskaterStats bool
	goalieStats        map[int]struct{}
	removedgoalieStats map[int]struct{}
	clearedgoalieStats bool
	done               bool
	oldValue           func(context.Context) (*Game, error)
	predicates         []predicate.Game
}

var _ ent.Mutation = (*GameMutation)(nil)

// gameOption allows management of the mutation configuration using functional options.
type gameOption func(*GameMutation)

// newGameMutation creates new mutation for the Game entity.
func newGameMutation(c config, op Op, opts ...gameOption) *GameMutation {
	m := &GameMutation{
		config:        c,
		op:            op,
		typ:           TypeGame,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGameID sets the ID field of the mutation.
func withGameID(id int) gameOption {
	return func(m *GameMutation) {
		var (
			err   error
			once  sync.Once
			value *Game
		)
		m.oldValue = func(ctx context.Context) (*Game, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Game.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGame sets the old Game of the mutation.
func withGame(node *Game) gameOption {
	return func(m *GameMutation) {
		m.oldValue = func(context.Context) (*Game, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GameMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GameMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Game entities.
func (m *GameMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GameMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GameMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Game.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetHomeScore sets the "homeScore" field.
func (m *GameMutation) SetHomeScore(i int) {
	m.homeScore = &i
	m.addhomeScore = nil
}

// HomeScore returns the value of the "homeScore" field in the mutation.
func (m *GameMutation) HomeScore() (r int, exists bool) {
	v := m.homeScore
	if v == nil {
		return
	}
	return *v, true
}

// OldHomeScore returns the old "homeScore" field's value of the Game entity.
// If the Game object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GameMutation) OldHomeScore(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHomeScore is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHomeScore requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHomeScore: %w", err)
	}
	return oldValue.HomeScore, nil
}

// AddHomeScore adds i to the "homeScore" field.
func (m *GameMutation) AddHomeScore(i int) {
	if m.addhomeScore != nil {
		*m.addhomeScore += i
	} else {
		m.addhomeScore = &i
	}
}

// AddedHomeScore returns the value that was added to the "homeScore" field in this mutation.
func (m *GameMutation) AddedHomeScore() (r int, exists bool) {
	v := m.addhomeScore
	if v == nil {
		return
	}
	return *v, true
}

// ResetHomeScore resets all changes to the "homeScore" field.
func (m *GameMutation) ResetHomeScore() {
	m.homeScore = nil
	m.addhomeScore = nil
}

// SetAwayScore sets the "awayScore" field.
func (m *GameMutation) SetAwayScore(i int) {
	m.awayScore = &i
	m.addawayScore = nil
}

// AwayScore returns the value of the "awayScore" field in the mutation.
func (m *GameMutation) AwayScore() (r int, exists bool) {
	v := m.awayScore
	if v == nil {
		return
	}
	return *v, true
}

// OldAwayScore returns the old "awayScore" field's value of the Game entity.
// If the Game object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GameMutation) OldAwayScore(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAwayScore is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAwayScore requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAwayScore: %w", err)
	}
	return oldValue.AwayScore, nil
}

// AddAwayScore adds i to the "awayScore" field.
func (m *GameMutation) AddAwayScore(i int) {
	if m.addawayScore != nil {
		*m.addawayScore += i
	} else {
		m.addawayScore = &i
	}
}

// AddedAwayScore returns the value that was added to the "awayScore" field in this mutation.
func (m *GameMutation) AddedAwayScore() (r int, exists bool) {
	v := m.addawayScore
	if v == nil {
		return
	}
	return *v, true
}

// ResetAwayScore resets all changes to the "awayScore" field.
func (m *GameMutation) ResetAwayScore() {
	m.awayScore = nil
	m.addawayScore = nil
}

// SetAwayTeamID sets the "awayTeam" edge to the Team entity by id.
func (m *GameMutation) SetAwayTeamID(id int) {
	m.awayTeam = &id
}

// ClearAwayTeam clears the "awayTeam" edge to the Team entity.
func (m *GameMutation) ClearAwayTeam() {
	m.clearedawayTeam = true
}

// AwayTeamCleared reports if the "awayTeam" edge to the Team entity was cleared.
func (m *GameMutation) AwayTeamCleared() bool {
	return m.clearedawayTeam
}

// AwayTeamID returns the "awayTeam" edge ID in the mutation.
func (m *GameMutation) AwayTeamID() (id int, exists bool) {
	if m.awayTeam != nil {
		return *m.awayTeam, true
	}
	return
}

// AwayTeamIDs returns the "awayTeam" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AwayTeamID instead. It exists only for internal usage by the builders.
func (m *GameMutation) AwayTeamIDs() (ids []int) {
	if id := m.awayTeam; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAwayTeam resets all changes to the "awayTeam" edge.
func (m *GameMutation) ResetAwayTeam() {
	m.awayTeam = nil
	m.clearedawayTeam = false
}

// SetHomeTeamID sets the "homeTeam" edge to the Team entity by id.
func (m *GameMutation) SetHomeTeamID(id int) {
	m.homeTeam = &id
}

// ClearHomeTeam clears the "homeTeam" edge to the Team entity.
func (m *GameMutation) ClearHomeTeam() {
	m.clearedhomeTeam = true
}

// HomeTeamCleared reports if the "homeTeam" edge to the Team entity was cleared.
func (m *GameMutation) HomeTeamCleared() bool {
	return m.clearedhomeTeam
}

// HomeTeamID returns the "homeTeam" edge ID in the mutation.
func (m *GameMutation) HomeTeamID() (id int, exists bool) {
	if m.homeTeam != nil {
		return *m.homeTeam, true
	}
	return
}

// HomeTeamIDs returns the "homeTeam" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// HomeTeamID instead. It exists only for internal usage by the builders.
func (m *GameMutation) HomeTeamIDs() (ids []int) {
	if id := m.homeTeam; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetHomeTeam resets all changes to the "homeTeam" edge.
func (m *GameMutation) ResetHomeTeam() {
	m.homeTeam = nil
	m.clearedhomeTeam = false
}

// AddSkaterStatIDs adds the "skaterStats" edge to the SkaterStats entity by ids.
func (m *GameMutation) AddSkaterStatIDs(ids ...int) {
	if m.skaterStats == nil {
		m.skaterStats = make(map[int]struct{})
	}
	for i := range ids {
		m.skaterStats[ids[i]] = struct{}{}
	}
}

// ClearSkaterStats clears the "skaterStats" edge to the SkaterStats entity.
func (m *GameMutation) ClearSkaterStats() {
	m.clearedskaterStats = true
}

// SkaterStatsCleared reports if the "skaterStats" edge to the SkaterStats entity was cleared.
func (m *GameMutation) SkaterStatsCleared() bool {
	return m.clearedskaterStats
}

// RemoveSkaterStatIDs removes the "skaterStats" edge to the SkaterStats entity by IDs.
func (m *GameMutation) RemoveSkaterStatIDs(ids ...int) {
	if m.removedskaterStats == nil {
		m.removedskaterStats = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.skaterStats, ids[i])
		m.removedskaterStats[ids[i]] = struct{}{}
	}
}

// RemovedSkaterStats returns the removed IDs of the "skaterStats" edge to the SkaterStats entity.
func (m *GameMutation) RemovedSkaterStatsIDs() (ids []int) {
	for id := range m.removedskaterStats {
		ids = append(ids, id)
	}
	return
}

// SkaterStatsIDs returns the "skaterStats" edge IDs in the mutation.
func (m *GameMutation) SkaterStatsIDs() (ids []int) {
	for id := range m.skaterStats {
		ids = append(ids, id)
	}
	return
}

// ResetSkaterStats resets all changes to the "skaterStats" edge.
func (m *GameMutation) ResetSkaterStats() {
	m.skaterStats = nil
	m.clearedskaterStats = false
	m.removedskaterStats = nil
}

// AddGoalieStatIDs adds the "goalieStats" edge to the GoalieStats entity by ids.
func (m *GameMutation) AddGoalieStatIDs(ids ...int) {
	if m.goalieStats == nil {
		m.goalieStats = make(map[int]struct{})
	}
	for i := range ids {
		m.goalieStats[ids[i]] = struct{}{}
	}
}

// ClearGoalieStats clears the "goalieStats" edge to the GoalieStats entity.
func (m *GameMutation) ClearGoalieStats() {
	m.clearedgoalieStats = true
}

// GoalieStatsCleared reports if the "goalieStats" edge to the GoalieStats entity was cleared.
func (m *GameMutation) GoalieStatsCleared() bool {
	return m.clearedgoalieStats
}

// RemoveGoalieStatIDs removes the "goalieStats" edge to the GoalieStats entity by IDs.
func (m *GameMutation) RemoveGoalieStatIDs(ids ...int) {
	if m.removedgoalieStats == nil {
		m.removedgoalieStats = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.goalieStats, ids[i])
		m.removedgoalieStats[ids[i]] = struct{}{}
	}
}

// RemovedGoalieStats returns the removed IDs of the "goalieStats" edge to the GoalieStats entity.
func (m *GameMutation) RemovedGoalieStatsIDs() (ids []int) {
	for id := range m.removedgoalieStats {
		ids = append(ids, id)
	}
	return
}

// GoalieStatsIDs returns the "goalieStats" edge IDs in the mutation.
func (m *GameMutation) GoalieStatsIDs() (ids []int) {
	for id := range m.goalieStats {
		ids = append(ids, id)
	}
	return
}

// ResetGoalieStats resets all changes to the "goalieStats" edge.
func (m *GameMutation) ResetGoalieStats() {
	m.goalieStats = nil
	m.clearedgoalieStats = false
	m.removedgoalieStats = nil
}

// Where appends a list predicates to the GameMutation builder.
func (m *GameMutation) Where(ps ...predicate.Game) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GameMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GameMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Game, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GameMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GameMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Game).
func (m *GameMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GameMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.homeScore != nil {
		fields = append(fields, game.FieldHomeScore)
	}
	if m.awayScore != nil {
		fields = append(fields, game.FieldAwayScore)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GameMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case game.FieldHomeScore:
		return m.HomeScore()
	case game.FieldAwayScore:
		return m.AwayScore()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GameMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case game.FieldHomeScore:
		return m.OldHomeScore(ctx)
	case game.FieldAwayScore:
		return m.OldAwayScore(ctx)
	}
	return nil, fmt.Errorf("unknown Game field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GameMutation) SetField(name string, value ent.Value) error {
	switch name {
	case game.FieldHomeScore:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHomeScore(v)
		return nil
	case game.FieldAwayScore:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAwayScore(v)
		return nil
	}
	return fmt.Errorf("unknown Game field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GameMutation) AddedFields() []string {
	var fields []string
	if m.addhomeScore != nil {
		fields = append(fields, game.FieldHomeScore)
	}
	if m.addawayScore != nil {
		fields = append(fields, game.FieldAwayScore)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GameMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case game.FieldHomeScore:
		return m.AddedHomeScore()
	case game.FieldAwayScore:
		return m.AddedAwayScore()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GameMutation) AddField(name string, value ent.Value) error {
	switch name {
	case game.FieldHomeScore:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHomeScore(v)
		return nil
	case game.FieldAwayScore:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAwayScore(v)
		return nil
	}
	return fmt.Errorf("unknown Game numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GameMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GameMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GameMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Game nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GameMutation) ResetField(name string) error {
	switch name {
	case game.FieldHomeScore:
		m.ResetHomeScore()
		return nil
	case game.FieldAwayScore:
		m.ResetAwayScore()
		return nil
	}
	return fmt.Errorf("unknown Game field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GameMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.awayTeam != nil {
		edges = append(edges, game.EdgeAwayTeam)
	}
	if m.homeTeam != nil {
		edges = append(edges, game.EdgeHomeTeam)
	}
	if m.skaterStats != nil {
		edges = append(edges, game.EdgeSkaterStats)
	}
	if m.goalieStats != nil {
		edges = append(edges, game.EdgeGoalieStats)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GameMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case game.EdgeAwayTeam:
		if id := m.awayTeam; id != nil {
			return []ent.Value{*id}
		}
	case game.EdgeHomeTeam:
		if id := m.homeTeam; id != nil {
			return []ent.Value{*id}
		}
	case game.EdgeSkaterStats:
		ids := make([]ent.Value, 0, len(m.skaterStats))
		for id := range m.skaterStats {
			ids = append(ids, id)
		}
		return ids
	case game.EdgeGoalieStats:
		ids := make([]ent.Value, 0, len(m.goalieStats))
		for id := range m.goalieStats {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GameMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedskaterStats != nil {
		edges = append(edges, game.EdgeSkaterStats)
	}
	if m.removedgoalieStats != nil {
		edges = append(edges, game.EdgeGoalieStats)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GameMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case game.EdgeSkaterStats:
		ids := make([]ent.Value, 0, len(m.removedskaterStats))
		for id := range m.removedskaterStats {
			ids = append(ids, id)
		}
		return ids
	case game.EdgeGoalieStats:
		ids := make([]ent.Value, 0, len(m.removedgoalieStats))
		for id := range m.removedgoalieStats {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GameMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedawayTeam {
		edges = append(edges, game.EdgeAwayTeam)
	}
	if m.clearedhomeTeam {
		edges = append(edges, game.EdgeHomeTeam)
	}
	if m.clearedskaterStats {
		edges = append(edges, game.EdgeSkaterStats)
	}
	if m.clearedgoalieStats {
		edges = append(edges, game.EdgeGoalieStats)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GameMutation) EdgeCleared(name string) bool {
	switch name {
	case game.EdgeAwayTeam:
		return m.clearedawayTeam
	case game.EdgeHomeTeam:
		return m.clearedhomeTeam
	case game.EdgeSkaterStats:
		return m.clearedskaterStats
	case game.EdgeGoalieStats:
		return m.clearedgoalieStats
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GameMutation) ClearEdge(name string) error {
	switch name {
	case game.EdgeAwayTeam:
		m.ClearAwayTeam()
		return nil
	case game.EdgeHomeTeam:
		m.ClearHomeTeam()
		return nil
	}
	return fmt.Errorf("unknown Game unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GameMutation) ResetEdge(name string) error {
	switch name {
	case game.EdgeAwayTeam:
		m.ResetAwayTeam()
		return nil
	case game.EdgeHomeTeam:
		m.ResetHomeTeam()
		return nil
	case game.EdgeSkaterStats:
		m.ResetSkaterStats()
		return nil
	case game.EdgeGoalieStats:
		m.ResetGoalieStats()
		return nil
	}
	return fmt.Errorf("unknown Game edge %s", name)
}

// GoalieStatsMutation represents an operation that mutates the GoalieStats nodes in the graph.
type GoalieStatsMutation struct {
	config
	op            Op
	typ           string
	id            *int
	goals         *int
	addgoals      *int
	assists       *int
	addassists    *int
	win           *bool
	loss          *bool
	home          *bool
	clearedFields map[string]struct{}
	game          map[int]struct{}
	removedgame   map[int]struct{}
	clearedgame   bool
	player        map[int]struct{}
	removedplayer map[int]struct{}
	clearedplayer bool
	done          bool
	oldValue      func(context.Context) (*GoalieStats, error)
	predicates    []predicate.GoalieStats
}

var _ ent.Mutation = (*GoalieStatsMutation)(nil)

// goaliestatsOption allows management of the mutation configuration using functional options.
type goaliestatsOption func(*GoalieStatsMutation)

// newGoalieStatsMutation creates new mutation for the GoalieStats entity.
func newGoalieStatsMutation(c config, op Op, opts ...goaliestatsOption) *GoalieStatsMutation {
	m := &GoalieStatsMutation{
		config:        c,
		op:            op,
		typ:           TypeGoalieStats,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGoalieStatsID sets the ID field of the mutation.
func withGoalieStatsID(id int) goaliestatsOption {
	return func(m *GoalieStatsMutation) {
		var (
			err   error
			once  sync.Once
			value *GoalieStats
		)
		m.oldValue = func(ctx context.Context) (*GoalieStats, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GoalieStats.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGoalieStats sets the old GoalieStats of the mutation.
func withGoalieStats(node *GoalieStats) goaliestatsOption {
	return func(m *GoalieStatsMutation) {
		m.oldValue = func(context.Context) (*GoalieStats, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GoalieStatsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GoalieStatsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GoalieStatsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GoalieStatsMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().GoalieStats.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetGoals sets the "goals" field.
func (m *GoalieStatsMutation) SetGoals(i int) {
	m.goals = &i
	m.addgoals = nil
}

// Goals returns the value of the "goals" field in the mutation.
func (m *GoalieStatsMutation) Goals() (r int, exists bool) {
	v := m.goals
	if v == nil {
		return
	}
	return *v, true
}

// OldGoals returns the old "goals" field's value of the GoalieStats entity.
// If the GoalieStats object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoalieStatsMutation) OldGoals(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGoals is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGoals requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoals: %w", err)
	}
	return oldValue.Goals, nil
}

// AddGoals adds i to the "goals" field.
func (m *GoalieStatsMutation) AddGoals(i int) {
	if m.addgoals != nil {
		*m.addgoals += i
	} else {
		m.addgoals = &i
	}
}

// AddedGoals returns the value that was added to the "goals" field in this mutation.
func (m *GoalieStatsMutation) AddedGoals() (r int, exists bool) {
	v := m.addgoals
	if v == nil {
		return
	}
	return *v, true
}

// ResetGoals resets all changes to the "goals" field.
func (m *GoalieStatsMutation) ResetGoals() {
	m.goals = nil
	m.addgoals = nil
}

// SetAssists sets the "assists" field.
func (m *GoalieStatsMutation) SetAssists(i int) {
	m.assists = &i
	m.addassists = nil
}

// Assists returns the value of the "assists" field in the mutation.
func (m *GoalieStatsMutation) Assists() (r int, exists bool) {
	v := m.assists
	if v == nil {
		return
	}
	return *v, true
}

// OldAssists returns the old "assists" field's value of the GoalieStats entity.
// If the GoalieStats object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoalieStatsMutation) OldAssists(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAssists is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAssists requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAssists: %w", err)
	}
	return oldValue.Assists, nil
}

// AddAssists adds i to the "assists" field.
func (m *GoalieStatsMutation) AddAssists(i int) {
	if m.addassists != nil {
		*m.addassists += i
	} else {
		m.addassists = &i
	}
}

// AddedAssists returns the value that was added to the "assists" field in this mutation.
func (m *GoalieStatsMutation) AddedAssists() (r int, exists bool) {
	v := m.addassists
	if v == nil {
		return
	}
	return *v, true
}

// ResetAssists resets all changes to the "assists" field.
func (m *GoalieStatsMutation) ResetAssists() {
	m.assists = nil
	m.addassists = nil
}

// SetWin sets the "win" field.
func (m *GoalieStatsMutation) SetWin(b bool) {
	m.win = &b
}

// Win returns the value of the "win" field in the mutation.
func (m *GoalieStatsMutation) Win() (r bool, exists bool) {
	v := m.win
	if v == nil {
		return
	}
	return *v, true
}

// OldWin returns the old "win" field's value of the GoalieStats entity.
// If the GoalieStats object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoalieStatsMutation) OldWin(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWin: %w", err)
	}
	return oldValue.Win, nil
}

// ResetWin resets all changes to the "win" field.
func (m *GoalieStatsMutation) ResetWin() {
	m.win = nil
}

// SetLoss sets the "loss" field.
func (m *GoalieStatsMutation) SetLoss(b bool) {
	m.loss = &b
}

// Loss returns the value of the "loss" field in the mutation.
func (m *GoalieStatsMutation) Loss() (r bool, exists bool) {
	v := m.loss
	if v == nil {
		return
	}
	return *v, true
}

// OldLoss returns the old "loss" field's value of the GoalieStats entity.
// If the GoalieStats object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoalieStatsMutation) OldLoss(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLoss is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLoss requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLoss: %w", err)
	}
	return oldValue.Loss, nil
}

// ResetLoss resets all changes to the "loss" field.
func (m *GoalieStatsMutation) ResetLoss() {
	m.loss = nil
}

// SetHome sets the "home" field.
func (m *GoalieStatsMutation) SetHome(b bool) {
	m.home = &b
}

// Home returns the value of the "home" field in the mutation.
func (m *GoalieStatsMutation) Home() (r bool, exists bool) {
	v := m.home
	if v == nil {
		return
	}
	return *v, true
}

// OldHome returns the old "home" field's value of the GoalieStats entity.
// If the GoalieStats object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GoalieStatsMutation) OldHome(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHome is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHome requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHome: %w", err)
	}
	return oldValue.Home, nil
}

// ResetHome resets all changes to the "home" field.
func (m *GoalieStatsMutation) ResetHome() {
	m.home = nil
}

// AddGameIDs adds the "game" edge to the Game entity by ids.
func (m *GoalieStatsMutation) AddGameIDs(ids ...int) {
	if m.game == nil {
		m.game = make(map[int]struct{})
	}
	for i := range ids {
		m.game[ids[i]] = struct{}{}
	}
}

// ClearGame clears the "game" edge to the Game entity.
func (m *GoalieStatsMutation) ClearGame() {
	m.clearedgame = true
}

// GameCleared reports if the "game" edge to the Game entity was cleared.
func (m *GoalieStatsMutation) GameCleared() bool {
	return m.clearedgame
}

// RemoveGameIDs removes the "game" edge to the Game entity by IDs.
func (m *GoalieStatsMutation) RemoveGameIDs(ids ...int) {
	if m.removedgame == nil {
		m.removedgame = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.game, ids[i])
		m.removedgame[ids[i]] = struct{}{}
	}
}

// RemovedGame returns the removed IDs of the "game" edge to the Game entity.
func (m *GoalieStatsMutation) RemovedGameIDs() (ids []int) {
	for id := range m.removedgame {
		ids = append(ids, id)
	}
	return
}

// GameIDs returns the "game" edge IDs in the mutation.
func (m *GoalieStatsMutation) GameIDs() (ids []int) {
	for id := range m.game {
		ids = append(ids, id)
	}
	return
}

// ResetGame resets all changes to the "game" edge.
func (m *GoalieStatsMutation) ResetGame() {
	m.game = nil
	m.clearedgame = false
	m.removedgame = nil
}

// AddPlayerIDs adds the "player" edge to the Player entity by ids.
func (m *GoalieStatsMutation) AddPlayerIDs(ids ...int) {
	if m.player == nil {
		m.player = make(map[int]struct{})
	}
	for i := range ids {
		m.player[ids[i]] = struct{}{}
	}
}

// ClearPlayer clears the "player" edge to the Player entity.
func (m *GoalieStatsMutation) ClearPlayer() {
	m.clearedplayer = true
}

// PlayerCleared reports if the "player" edge to the Player entity was cleared.
func (m *GoalieStatsMutation) PlayerCleared() bool {
	return m.clearedplayer
}

// RemovePlayerIDs removes the "player" edge to the Player entity by IDs.
func (m *GoalieStatsMutation) RemovePlayerIDs(ids ...int) {
	if m.removedplayer == nil {
		m.removedplayer = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.player, ids[i])
		m.removedplayer[ids[i]] = struct{}{}
	}
}

// RemovedPlayer returns the removed IDs of the "player" edge to the Player entity.
func (m *GoalieStatsMutation) RemovedPlayerIDs() (ids []int) {
	for id := range m.removedplayer {
		ids = append(ids, id)
	}
	return
}

// PlayerIDs returns the "player" edge IDs in the mutation.
func (m *GoalieStatsMutation) PlayerIDs() (ids []int) {
	for id := range m.player {
		ids = append(ids, id)
	}
	return
}

// ResetPlayer resets all changes to the "player" edge.
func (m *GoalieStatsMutation) ResetPlayer() {
	m.player = nil
	m.clearedplayer = false
	m.removedplayer = nil
}

// Where appends a list predicates to the GoalieStatsMutation builder.
func (m *GoalieStatsMutation) Where(ps ...predicate.GoalieStats) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GoalieStatsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GoalieStatsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.GoalieStats, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GoalieStatsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GoalieStatsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (GoalieStats).
func (m *GoalieStatsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GoalieStatsMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.goals != nil {
		fields = append(fields, goaliestats.FieldGoals)
	}
	if m.assists != nil {
		fields = append(fields, goaliestats.FieldAssists)
	}
	if m.win != nil {
		fields = append(fields, goaliestats.FieldWin)
	}
	if m.loss != nil {
		fields = append(fields, goaliestats.FieldLoss)
	}
	if m.home != nil {
		fields = append(fields, goaliestats.FieldHome)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GoalieStatsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case goaliestats.FieldGoals:
		return m.Goals()
	case goaliestats.FieldAssists:
		return m.Assists()
	case goaliestats.FieldWin:
		return m.Win()
	case goaliestats.FieldLoss:
		return m.Loss()
	case goaliestats.FieldHome:
		return m.Home()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GoalieStatsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case goaliestats.FieldGoals:
		return m.OldGoals(ctx)
	case goaliestats.FieldAssists:
		return m.OldAssists(ctx)
	case goaliestats.FieldWin:
		return m.OldWin(ctx)
	case goaliestats.FieldLoss:
		return m.OldLoss(ctx)
	case goaliestats.FieldHome:
		return m.OldHome(ctx)
	}
	return nil, fmt.Errorf("unknown GoalieStats field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GoalieStatsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case goaliestats.FieldGoals:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoals(v)
		return nil
	case goaliestats.FieldAssists:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAssists(v)
		return nil
	case goaliestats.FieldWin:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWin(v)
		return nil
	case goaliestats.FieldLoss:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLoss(v)
		return nil
	case goaliestats.FieldHome:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHome(v)
		return nil
	}
	return fmt.Errorf("unknown GoalieStats field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GoalieStatsMutation) AddedFields() []string {
	var fields []string
	if m.addgoals != nil {
		fields = append(fields, goaliestats.FieldGoals)
	}
	if m.addassists != nil {
		fields = append(fields, goaliestats.FieldAssists)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GoalieStatsMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case goaliestats.FieldGoals:
		return m.AddedGoals()
	case goaliestats.FieldAssists:
		return m.AddedAssists()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GoalieStatsMutation) AddField(name string, value ent.Value) error {
	switch name {
	case goaliestats.FieldGoals:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGoals(v)
		return nil
	case goaliestats.FieldAssists:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAssists(v)
		return nil
	}
	return fmt.Errorf("unknown GoalieStats numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GoalieStatsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GoalieStatsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GoalieStatsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown GoalieStats nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GoalieStatsMutation) ResetField(name string) error {
	switch name {
	case goaliestats.FieldGoals:
		m.ResetGoals()
		return nil
	case goaliestats.FieldAssists:
		m.ResetAssists()
		return nil
	case goaliestats.FieldWin:
		m.ResetWin()
		return nil
	case goaliestats.FieldLoss:
		m.ResetLoss()
		return nil
	case goaliestats.FieldHome:
		m.ResetHome()
		return nil
	}
	return fmt.Errorf("unknown GoalieStats field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GoalieStatsMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.game != nil {
		edges = append(edges, goaliestats.EdgeGame)
	}
	if m.player != nil {
		edges = append(edges, goaliestats.EdgePlayer)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GoalieStatsMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case goaliestats.EdgeGame:
		ids := make([]ent.Value, 0, len(m.game))
		for id := range m.game {
			ids = append(ids, id)
		}
		return ids
	case goaliestats.EdgePlayer:
		ids := make([]ent.Value, 0, len(m.player))
		for id := range m.player {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GoalieStatsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedgame != nil {
		edges = append(edges, goaliestats.EdgeGame)
	}
	if m.removedplayer != nil {
		edges = append(edges, goaliestats.EdgePlayer)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GoalieStatsMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case goaliestats.EdgeGame:
		ids := make([]ent.Value, 0, len(m.removedgame))
		for id := range m.removedgame {
			ids = append(ids, id)
		}
		return ids
	case goaliestats.EdgePlayer:
		ids := make([]ent.Value, 0, len(m.removedplayer))
		for id := range m.removedplayer {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GoalieStatsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedgame {
		edges = append(edges, goaliestats.EdgeGame)
	}
	if m.clearedplayer {
		edges = append(edges, goaliestats.EdgePlayer)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GoalieStatsMutation) EdgeCleared(name string) bool {
	switch name {
	case goaliestats.EdgeGame:
		return m.clearedgame
	case goaliestats.EdgePlayer:
		return m.clearedplayer
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GoalieStatsMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown GoalieStats unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GoalieStatsMutation) ResetEdge(name string) error {
	switch name {
	case goaliestats.EdgeGame:
		m.ResetGame()
		return nil
	case goaliestats.EdgePlayer:
		m.ResetPlayer()
		return nil
	}
	return fmt.Errorf("unknown GoalieStats edge %s", name)
}

// LeagueMutation represents an operation that mutates the League nodes in the graph.
type LeagueMutation struct {
	config
	op               Op
	typ              string
	id               *int
	name             *string
	season           *int
	addseason        *int
	public           *bool
	num_forwards     *int
	addnum_forwards  *int
	num_defenders    *int
	addnum_defenders *int
	num_goalies      *int
	addnum_goalies   *int
	clearedFields    map[string]struct{}
	entries          map[int]struct{}
	removedentries   map[int]struct{}
	clearedentries   bool
	done             bool
	oldValue         func(context.Context) (*League, error)
	predicates       []predicate.League
}

var _ ent.Mutation = (*LeagueMutation)(nil)

// leagueOption allows management of the mutation configuration using functional options.
type leagueOption func(*LeagueMutation)

// newLeagueMutation creates new mutation for the League entity.
func newLeagueMutation(c config, op Op, opts ...leagueOption) *LeagueMutation {
	m := &LeagueMutation{
		config:        c,
		op:            op,
		typ:           TypeLeague,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLeagueID sets the ID field of the mutation.
func withLeagueID(id int) leagueOption {
	return func(m *LeagueMutation) {
		var (
			err   error
			once  sync.Once
			value *League
		)
		m.oldValue = func(ctx context.Context) (*League, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().League.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLeague sets the old League of the mutation.
func withLeague(node *League) leagueOption {
	return func(m *LeagueMutation) {
		m.oldValue = func(context.Context) (*League, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LeagueMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LeagueMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LeagueMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LeagueMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().League.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *LeagueMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *LeagueMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the League entity.
// If the League object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LeagueMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *LeagueMutation) ResetName() {
	m.name = nil
}

// SetSeason sets the "season" field.
func (m *LeagueMutation) SetSeason(i int) {
	m.season = &i
	m.addseason = nil
}

// Season returns the value of the "season" field in the mutation.
func (m *LeagueMutation) Season() (r int, exists bool) {
	v := m.season
	if v == nil {
		return
	}
	return *v, true
}

// OldSeason returns the old "season" field's value of the League entity.
// If the League object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LeagueMutation) OldSeason(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSeason is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSeason requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSeason: %w", err)
	}
	return oldValue.Season, nil
}

// AddSeason adds i to the "season" field.
func (m *LeagueMutation) AddSeason(i int) {
	if m.addseason != nil {
		*m.addseason += i
	} else {
		m.addseason = &i
	}
}

// AddedSeason returns the value that was added to the "season" field in this mutation.
func (m *LeagueMutation) AddedSeason() (r int, exists bool) {
	v := m.addseason
	if v == nil {
		return
	}
	return *v, true
}

// ResetSeason resets all changes to the "season" field.
func (m *LeagueMutation) ResetSeason() {
	m.season = nil
	m.addseason = nil
}

// SetPublic sets the "public" field.
func (m *LeagueMutation) SetPublic(b bool) {
	m.public = &b
}

// Public returns the value of the "public" field in the mutation.
func (m *LeagueMutation) Public() (r bool, exists bool) {
	v := m.public
	if v == nil {
		return
	}
	return *v, true
}

// OldPublic returns the old "public" field's value of the League entity.
// If the League object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LeagueMutation) OldPublic(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublic is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublic requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublic: %w", err)
	}
	return oldValue.Public, nil
}

// ResetPublic resets all changes to the "public" field.
func (m *LeagueMutation) ResetPublic() {
	m.public = nil
}

// SetNumForwards sets the "num_forwards" field.
func (m *LeagueMutation) SetNumForwards(i int) {
	m.num_forwards = &i
	m.addnum_forwards = nil
}

// NumForwards returns the value of the "num_forwards" field in the mutation.
func (m *LeagueMutation) NumForwards() (r int, exists bool) {
	v := m.num_forwards
	if v == nil {
		return
	}
	return *v, true
}

// OldNumForwards returns the old "num_forwards" field's value of the League entity.
// If the League object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LeagueMutation) OldNumForwards(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNumForwards is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNumForwards requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumForwards: %w", err)
	}
	return oldValue.NumForwards, nil
}

// AddNumForwards adds i to the "num_forwards" field.
func (m *LeagueMutation) AddNumForwards(i int) {
	if m.addnum_forwards != nil {
		*m.addnum_forwards += i
	} else {
		m.addnum_forwards = &i
	}
}

// AddedNumForwards returns the value that was added to the "num_forwards" field in this mutation.
func (m *LeagueMutation) AddedNumForwards() (r int, exists bool) {
	v := m.addnum_forwards
	if v == nil {
		return
	}
	return *v, true
}

// ResetNumForwards resets all changes to the "num_forwards" field.
func (m *LeagueMutation) ResetNumForwards() {
	m.num_forwards = nil
	m.addnum_forwards = nil
}

// SetNumDefenders sets the "num_defenders" field.
func (m *LeagueMutation) SetNumDefenders(i int) {
	m.num_defenders = &i
	m.addnum_defenders = nil
}

// NumDefenders returns the value of the "num_defenders" field in the mutation.
func (m *LeagueMutation) NumDefenders() (r int, exists bool) {
	v := m.num_defenders
	if v == nil {
		return
	}
	return *v, true
}

// OldNumDefenders returns the old "num_defenders" field's value of the League entity.
// If the League object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LeagueMutation) OldNumDefenders(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNumDefenders is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNumDefenders requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumDefenders: %w", err)
	}
	return oldValue.NumDefenders, nil
}

// AddNumDefenders adds i to the "num_defenders" field.
func (m *LeagueMutation) AddNumDefenders(i int) {
	if m.addnum_defenders != nil {
		*m.addnum_defenders += i
	} else {
		m.addnum_defenders = &i
	}
}

// AddedNumDefenders returns the value that was added to the "num_defenders" field in this mutation.
func (m *LeagueMutation) AddedNumDefenders() (r int, exists bool) {
	v := m.addnum_defenders
	if v == nil {
		return
	}
	return *v, true
}

// ResetNumDefenders resets all changes to the "num_defenders" field.
func (m *LeagueMutation) ResetNumDefenders() {
	m.num_defenders = nil
	m.addnum_defenders = nil
}

// SetNumGoalies sets the "num_goalies" field.
func (m *LeagueMutation) SetNumGoalies(i int) {
	m.num_goalies = &i
	m.addnum_goalies = nil
}

// NumGoalies returns the value of the "num_goalies" field in the mutation.
func (m *LeagueMutation) NumGoalies() (r int, exists bool) {
	v := m.num_goalies
	if v == nil {
		return
	}
	return *v, true
}

// OldNumGoalies returns the old "num_goalies" field's value of the League entity.
// If the League object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LeagueMutation) OldNumGoalies(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNumGoalies is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNumGoalies requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumGoalies: %w", err)
	}
	return oldValue.NumGoalies, nil
}

// AddNumGoalies adds i to the "num_goalies" field.
func (m *LeagueMutation) AddNumGoalies(i int) {
	if m.addnum_goalies != nil {
		*m.addnum_goalies += i
	} else {
		m.addnum_goalies = &i
	}
}

// AddedNumGoalies returns the value that was added to the "num_goalies" field in this mutation.
func (m *LeagueMutation) AddedNumGoalies() (r int, exists bool) {
	v := m.addnum_goalies
	if v == nil {
		return
	}
	return *v, true
}

// ResetNumGoalies resets all changes to the "num_goalies" field.
func (m *LeagueMutation) ResetNumGoalies() {
	m.num_goalies = nil
	m.addnum_goalies = nil
}

// AddEntryIDs adds the "entries" edge to the Entry entity by ids.
func (m *LeagueMutation) AddEntryIDs(ids ...int) {
	if m.entries == nil {
		m.entries = make(map[int]struct{})
	}
	for i := range ids {
		m.entries[ids[i]] = struct{}{}
	}
}

// ClearEntries clears the "entries" edge to the Entry entity.
func (m *LeagueMutation) ClearEntries() {
	m.clearedentries = true
}

// EntriesCleared reports if the "entries" edge to the Entry entity was cleared.
func (m *LeagueMutation) EntriesCleared() bool {
	return m.clearedentries
}

// RemoveEntryIDs removes the "entries" edge to the Entry entity by IDs.
func (m *LeagueMutation) RemoveEntryIDs(ids ...int) {
	if m.removedentries == nil {
		m.removedentries = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.entries, ids[i])
		m.removedentries[ids[i]] = struct{}{}
	}
}

// RemovedEntries returns the removed IDs of the "entries" edge to the Entry entity.
func (m *LeagueMutation) RemovedEntriesIDs() (ids []int) {
	for id := range m.removedentries {
		ids = append(ids, id)
	}
	return
}

// EntriesIDs returns the "entries" edge IDs in the mutation.
func (m *LeagueMutation) EntriesIDs() (ids []int) {
	for id := range m.entries {
		ids = append(ids, id)
	}
	return
}

// ResetEntries resets all changes to the "entries" edge.
func (m *LeagueMutation) ResetEntries() {
	m.entries = nil
	m.clearedentries = false
	m.removedentries = nil
}

// Where appends a list predicates to the LeagueMutation builder.
func (m *LeagueMutation) Where(ps ...predicate.League) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the LeagueMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *LeagueMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.League, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *LeagueMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *LeagueMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (League).
func (m *LeagueMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LeagueMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.name != nil {
		fields = append(fields, league.FieldName)
	}
	if m.season != nil {
		fields = append(fields, league.FieldSeason)
	}
	if m.public != nil {
		fields = append(fields, league.FieldPublic)
	}
	if m.num_forwards != nil {
		fields = append(fields, league.FieldNumForwards)
	}
	if m.num_defenders != nil {
		fields = append(fields, league.FieldNumDefenders)
	}
	if m.num_goalies != nil {
		fields = append(fields, league.FieldNumGoalies)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LeagueMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case league.FieldName:
		return m.Name()
	case league.FieldSeason:
		return m.Season()
	case league.FieldPublic:
		return m.Public()
	case league.FieldNumForwards:
		return m.NumForwards()
	case league.FieldNumDefenders:
		return m.NumDefenders()
	case league.FieldNumGoalies:
		return m.NumGoalies()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LeagueMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case league.FieldName:
		return m.OldName(ctx)
	case league.FieldSeason:
		return m.OldSeason(ctx)
	case league.FieldPublic:
		return m.OldPublic(ctx)
	case league.FieldNumForwards:
		return m.OldNumForwards(ctx)
	case league.FieldNumDefenders:
		return m.OldNumDefenders(ctx)
	case league.FieldNumGoalies:
		return m.OldNumGoalies(ctx)
	}
	return nil, fmt.Errorf("unknown League field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LeagueMutation) SetField(name string, value ent.Value) error {
	switch name {
	case league.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case league.FieldSeason:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSeason(v)
		return nil
	case league.FieldPublic:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublic(v)
		return nil
	case league.FieldNumForwards:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumForwards(v)
		return nil
	case league.FieldNumDefenders:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumDefenders(v)
		return nil
	case league.FieldNumGoalies:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumGoalies(v)
		return nil
	}
	return fmt.Errorf("unknown League field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LeagueMutation) AddedFields() []string {
	var fields []string
	if m.addseason != nil {
		fields = append(fields, league.FieldSeason)
	}
	if m.addnum_forwards != nil {
		fields = append(fields, league.FieldNumForwards)
	}
	if m.addnum_defenders != nil {
		fields = append(fields, league.FieldNumDefenders)
	}
	if m.addnum_goalies != nil {
		fields = append(fields, league.FieldNumGoalies)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LeagueMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case league.FieldSeason:
		return m.AddedSeason()
	case league.FieldNumForwards:
		return m.AddedNumForwards()
	case league.FieldNumDefenders:
		return m.AddedNumDefenders()
	case league.FieldNumGoalies:
		return m.AddedNumGoalies()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LeagueMutation) AddField(name string, value ent.Value) error {
	switch name {
	case league.FieldSeason:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSeason(v)
		return nil
	case league.FieldNumForwards:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNumForwards(v)
		return nil
	case league.FieldNumDefenders:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNumDefenders(v)
		return nil
	case league.FieldNumGoalies:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNumGoalies(v)
		return nil
	}
	return fmt.Errorf("unknown League numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LeagueMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LeagueMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LeagueMutation) ClearField(name string) error {
	return fmt.Errorf("unknown League nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LeagueMutation) ResetField(name string) error {
	switch name {
	case league.FieldName:
		m.ResetName()
		return nil
	case league.FieldSeason:
		m.ResetSeason()
		return nil
	case league.FieldPublic:
		m.ResetPublic()
		return nil
	case league.FieldNumForwards:
		m.ResetNumForwards()
		return nil
	case league.FieldNumDefenders:
		m.ResetNumDefenders()
		return nil
	case league.FieldNumGoalies:
		m.ResetNumGoalies()
		return nil
	}
	return fmt.Errorf("unknown League field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LeagueMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.entries != nil {
		edges = append(edges, league.EdgeEntries)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LeagueMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case league.EdgeEntries:
		ids := make([]ent.Value, 0, len(m.entries))
		for id := range m.entries {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LeagueMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedentries != nil {
		edges = append(edges, league.EdgeEntries)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LeagueMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case league.EdgeEntries:
		ids := make([]ent.Value, 0, len(m.removedentries))
		for id := range m.removedentries {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LeagueMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedentries {
		edges = append(edges, league.EdgeEntries)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LeagueMutation) EdgeCleared(name string) bool {
	switch name {
	case league.EdgeEntries:
		return m.clearedentries
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LeagueMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown League unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LeagueMutation) ResetEdge(name string) error {
	switch name {
	case league.EdgeEntries:
		m.ResetEntries()
		return nil
	}
	return fmt.Errorf("unknown League edge %s", name)
}

// PlayerMutation represents an operation that mutates the Player nodes in the graph.
type PlayerMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	name               *string
	position           *player.Position
	clearedFields      map[string]struct{}
	team               *int
	clearedteam        bool
	entries            map[int]struct{}
	removedentries     map[int]struct{}
	clearedentries     bool
	skaterStats        map[int]struct{}
	removedskaterStats map[int]struct{}
	clearedskaterStats bool
	goalieStats        map[int]struct{}
	removedgoalieStats map[int]struct{}
	clearedgoalieStats bool
	done               bool
	oldValue           func(context.Context) (*Player, error)
	predicates         []predicate.Player
}

var _ ent.Mutation = (*PlayerMutation)(nil)

// playerOption allows management of the mutation configuration using functional options.
type playerOption func(*PlayerMutation)

// newPlayerMutation creates new mutation for the Player entity.
func newPlayerMutation(c config, op Op, opts ...playerOption) *PlayerMutation {
	m := &PlayerMutation{
		config:        c,
		op:            op,
		typ:           TypePlayer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPlayerID sets the ID field of the mutation.
func withPlayerID(id int) playerOption {
	return func(m *PlayerMutation) {
		var (
			err   error
			once  sync.Once
			value *Player
		)
		m.oldValue = func(ctx context.Context) (*Player, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Player.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPlayer sets the old Player of the mutation.
func withPlayer(node *Player) playerOption {
	return func(m *PlayerMutation) {
		m.oldValue = func(context.Context) (*Player, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PlayerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PlayerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Player entities.
func (m *PlayerMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PlayerMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PlayerMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Player.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *PlayerMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PlayerMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Player entity.
// If the Player object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlayerMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PlayerMutation) ResetName() {
	m.name = nil
}

// SetPosition sets the "position" field.
func (m *PlayerMutation) SetPosition(pl player.Position) {
	m.position = &pl
}

// Position returns the value of the "position" field in the mutation.
func (m *PlayerMutation) Position() (r player.Position, exists bool) {
	v := m.position
	if v == nil {
		return
	}
	return *v, true
}

// OldPosition returns the old "position" field's value of the Player entity.
// If the Player object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlayerMutation) OldPosition(ctx context.Context) (v player.Position, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPosition is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPosition requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPosition: %w", err)
	}
	return oldValue.Position, nil
}

// ResetPosition resets all changes to the "position" field.
func (m *PlayerMutation) ResetPosition() {
	m.position = nil
}

// SetTeamID sets the "team" edge to the Team entity by id.
func (m *PlayerMutation) SetTeamID(id int) {
	m.team = &id
}

// ClearTeam clears the "team" edge to the Team entity.
func (m *PlayerMutation) ClearTeam() {
	m.clearedteam = true
}

// TeamCleared reports if the "team" edge to the Team entity was cleared.
func (m *PlayerMutation) TeamCleared() bool {
	return m.clearedteam
}

// TeamID returns the "team" edge ID in the mutation.
func (m *PlayerMutation) TeamID() (id int, exists bool) {
	if m.team != nil {
		return *m.team, true
	}
	return
}

// TeamIDs returns the "team" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TeamID instead. It exists only for internal usage by the builders.
func (m *PlayerMutation) TeamIDs() (ids []int) {
	if id := m.team; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTeam resets all changes to the "team" edge.
func (m *PlayerMutation) ResetTeam() {
	m.team = nil
	m.clearedteam = false
}

// AddEntryIDs adds the "entries" edge to the Entry entity by ids.
func (m *PlayerMutation) AddEntryIDs(ids ...int) {
	if m.entries == nil {
		m.entries = make(map[int]struct{})
	}
	for i := range ids {
		m.entries[ids[i]] = struct{}{}
	}
}

// ClearEntries clears the "entries" edge to the Entry entity.
func (m *PlayerMutation) ClearEntries() {
	m.clearedentries = true
}

// EntriesCleared reports if the "entries" edge to the Entry entity was cleared.
func (m *PlayerMutation) EntriesCleared() bool {
	return m.clearedentries
}

// RemoveEntryIDs removes the "entries" edge to the Entry entity by IDs.
func (m *PlayerMutation) RemoveEntryIDs(ids ...int) {
	if m.removedentries == nil {
		m.removedentries = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.entries, ids[i])
		m.removedentries[ids[i]] = struct{}{}
	}
}

// RemovedEntries returns the removed IDs of the "entries" edge to the Entry entity.
func (m *PlayerMutation) RemovedEntriesIDs() (ids []int) {
	for id := range m.removedentries {
		ids = append(ids, id)
	}
	return
}

// EntriesIDs returns the "entries" edge IDs in the mutation.
func (m *PlayerMutation) EntriesIDs() (ids []int) {
	for id := range m.entries {
		ids = append(ids, id)
	}
	return
}

// ResetEntries resets all changes to the "entries" edge.
func (m *PlayerMutation) ResetEntries() {
	m.entries = nil
	m.clearedentries = false
	m.removedentries = nil
}

// AddSkaterStatIDs adds the "skaterStats" edge to the SkaterStats entity by ids.
func (m *PlayerMutation) AddSkaterStatIDs(ids ...int) {
	if m.skaterStats == nil {
		m.skaterStats = make(map[int]struct{})
	}
	for i := range ids {
		m.skaterStats[ids[i]] = struct{}{}
	}
}

// ClearSkaterStats clears the "skaterStats" edge to the SkaterStats entity.
func (m *PlayerMutation) ClearSkaterStats() {
	m.clearedskaterStats = true
}

// SkaterStatsCleared reports if the "skaterStats" edge to the SkaterStats entity was cleared.
func (m *PlayerMutation) SkaterStatsCleared() bool {
	return m.clearedskaterStats
}

// RemoveSkaterStatIDs removes the "skaterStats" edge to the SkaterStats entity by IDs.
func (m *PlayerMutation) RemoveSkaterStatIDs(ids ...int) {
	if m.removedskaterStats == nil {
		m.removedskaterStats = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.skaterStats, ids[i])
		m.removedskaterStats[ids[i]] = struct{}{}
	}
}

// RemovedSkaterStats returns the removed IDs of the "skaterStats" edge to the SkaterStats entity.
func (m *PlayerMutation) RemovedSkaterStatsIDs() (ids []int) {
	for id := range m.removedskaterStats {
		ids = append(ids, id)
	}
	return
}

// SkaterStatsIDs returns the "skaterStats" edge IDs in the mutation.
func (m *PlayerMutation) SkaterStatsIDs() (ids []int) {
	for id := range m.skaterStats {
		ids = append(ids, id)
	}
	return
}

// ResetSkaterStats resets all changes to the "skaterStats" edge.
func (m *PlayerMutation) ResetSkaterStats() {
	m.skaterStats = nil
	m.clearedskaterStats = false
	m.removedskaterStats = nil
}

// AddGoalieStatIDs adds the "goalieStats" edge to the GoalieStats entity by ids.
func (m *PlayerMutation) AddGoalieStatIDs(ids ...int) {
	if m.goalieStats == nil {
		m.goalieStats = make(map[int]struct{})
	}
	for i := range ids {
		m.goalieStats[ids[i]] = struct{}{}
	}
}

// ClearGoalieStats clears the "goalieStats" edge to the GoalieStats entity.
func (m *PlayerMutation) ClearGoalieStats() {
	m.clearedgoalieStats = true
}

// GoalieStatsCleared reports if the "goalieStats" edge to the GoalieStats entity was cleared.
func (m *PlayerMutation) GoalieStatsCleared() bool {
	return m.clearedgoalieStats
}

// RemoveGoalieStatIDs removes the "goalieStats" edge to the GoalieStats entity by IDs.
func (m *PlayerMutation) RemoveGoalieStatIDs(ids ...int) {
	if m.removedgoalieStats == nil {
		m.removedgoalieStats = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.goalieStats, ids[i])
		m.removedgoalieStats[ids[i]] = struct{}{}
	}
}

// RemovedGoalieStats returns the removed IDs of the "goalieStats" edge to the GoalieStats entity.
func (m *PlayerMutation) RemovedGoalieStatsIDs() (ids []int) {
	for id := range m.removedgoalieStats {
		ids = append(ids, id)
	}
	return
}

// GoalieStatsIDs returns the "goalieStats" edge IDs in the mutation.
func (m *PlayerMutation) GoalieStatsIDs() (ids []int) {
	for id := range m.goalieStats {
		ids = append(ids, id)
	}
	return
}

// ResetGoalieStats resets all changes to the "goalieStats" edge.
func (m *PlayerMutation) ResetGoalieStats() {
	m.goalieStats = nil
	m.clearedgoalieStats = false
	m.removedgoalieStats = nil
}

// Where appends a list predicates to the PlayerMutation builder.
func (m *PlayerMutation) Where(ps ...predicate.Player) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PlayerMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PlayerMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Player, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PlayerMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PlayerMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Player).
func (m *PlayerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PlayerMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, player.FieldName)
	}
	if m.position != nil {
		fields = append(fields, player.FieldPosition)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PlayerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case player.FieldName:
		return m.Name()
	case player.FieldPosition:
		return m.Position()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PlayerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case player.FieldName:
		return m.OldName(ctx)
	case player.FieldPosition:
		return m.OldPosition(ctx)
	}
	return nil, fmt.Errorf("unknown Player field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlayerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case player.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case player.FieldPosition:
		v, ok := value.(player.Position)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPosition(v)
		return nil
	}
	return fmt.Errorf("unknown Player field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PlayerMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PlayerMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlayerMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Player numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PlayerMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PlayerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PlayerMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Player nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PlayerMutation) ResetField(name string) error {
	switch name {
	case player.FieldName:
		m.ResetName()
		return nil
	case player.FieldPosition:
		m.ResetPosition()
		return nil
	}
	return fmt.Errorf("unknown Player field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PlayerMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.team != nil {
		edges = append(edges, player.EdgeTeam)
	}
	if m.entries != nil {
		edges = append(edges, player.EdgeEntries)
	}
	if m.skaterStats != nil {
		edges = append(edges, player.EdgeSkaterStats)
	}
	if m.goalieStats != nil {
		edges = append(edges, player.EdgeGoalieStats)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PlayerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case player.EdgeTeam:
		if id := m.team; id != nil {
			return []ent.Value{*id}
		}
	case player.EdgeEntries:
		ids := make([]ent.Value, 0, len(m.entries))
		for id := range m.entries {
			ids = append(ids, id)
		}
		return ids
	case player.EdgeSkaterStats:
		ids := make([]ent.Value, 0, len(m.skaterStats))
		for id := range m.skaterStats {
			ids = append(ids, id)
		}
		return ids
	case player.EdgeGoalieStats:
		ids := make([]ent.Value, 0, len(m.goalieStats))
		for id := range m.goalieStats {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PlayerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedentries != nil {
		edges = append(edges, player.EdgeEntries)
	}
	if m.removedskaterStats != nil {
		edges = append(edges, player.EdgeSkaterStats)
	}
	if m.removedgoalieStats != nil {
		edges = append(edges, player.EdgeGoalieStats)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PlayerMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case player.EdgeEntries:
		ids := make([]ent.Value, 0, len(m.removedentries))
		for id := range m.removedentries {
			ids = append(ids, id)
		}
		return ids
	case player.EdgeSkaterStats:
		ids := make([]ent.Value, 0, len(m.removedskaterStats))
		for id := range m.removedskaterStats {
			ids = append(ids, id)
		}
		return ids
	case player.EdgeGoalieStats:
		ids := make([]ent.Value, 0, len(m.removedgoalieStats))
		for id := range m.removedgoalieStats {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PlayerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedteam {
		edges = append(edges, player.EdgeTeam)
	}
	if m.clearedentries {
		edges = append(edges, player.EdgeEntries)
	}
	if m.clearedskaterStats {
		edges = append(edges, player.EdgeSkaterStats)
	}
	if m.clearedgoalieStats {
		edges = append(edges, player.EdgeGoalieStats)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PlayerMutation) EdgeCleared(name string) bool {
	switch name {
	case player.EdgeTeam:
		return m.clearedteam
	case player.EdgeEntries:
		return m.clearedentries
	case player.EdgeSkaterStats:
		return m.clearedskaterStats
	case player.EdgeGoalieStats:
		return m.clearedgoalieStats
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PlayerMutation) ClearEdge(name string) error {
	switch name {
	case player.EdgeTeam:
		m.ClearTeam()
		return nil
	}
	return fmt.Errorf("unknown Player unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PlayerMutation) ResetEdge(name string) error {
	switch name {
	case player.EdgeTeam:
		m.ResetTeam()
		return nil
	case player.EdgeEntries:
		m.ResetEntries()
		return nil
	case player.EdgeSkaterStats:
		m.ResetSkaterStats()
		return nil
	case player.EdgeGoalieStats:
		m.ResetGoalieStats()
		return nil
	}
	return fmt.Errorf("unknown Player edge %s", name)
}

// SkaterStatsMutation represents an operation that mutates the SkaterStats nodes in the graph.
type SkaterStatsMutation struct {
	config
	op            Op
	typ           string
	id            *int
	goals         *int
	addgoals      *int
	assists       *int
	addassists    *int
	home          *bool
	clearedFields map[string]struct{}
	game          *int
	clearedgame   bool
	player        *int
	clearedplayer bool
	done          bool
	oldValue      func(context.Context) (*SkaterStats, error)
	predicates    []predicate.SkaterStats
}

var _ ent.Mutation = (*SkaterStatsMutation)(nil)

// skaterstatsOption allows management of the mutation configuration using functional options.
type skaterstatsOption func(*SkaterStatsMutation)

// newSkaterStatsMutation creates new mutation for the SkaterStats entity.
func newSkaterStatsMutation(c config, op Op, opts ...skaterstatsOption) *SkaterStatsMutation {
	m := &SkaterStatsMutation{
		config:        c,
		op:            op,
		typ:           TypeSkaterStats,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSkaterStatsID sets the ID field of the mutation.
func withSkaterStatsID(id int) skaterstatsOption {
	return func(m *SkaterStatsMutation) {
		var (
			err   error
			once  sync.Once
			value *SkaterStats
		)
		m.oldValue = func(ctx context.Context) (*SkaterStats, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SkaterStats.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSkaterStats sets the old SkaterStats of the mutation.
func withSkaterStats(node *SkaterStats) skaterstatsOption {
	return func(m *SkaterStatsMutation) {
		m.oldValue = func(context.Context) (*SkaterStats, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SkaterStatsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SkaterStatsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SkaterStatsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SkaterStatsMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SkaterStats.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetGoals sets the "goals" field.
func (m *SkaterStatsMutation) SetGoals(i int) {
	m.goals = &i
	m.addgoals = nil
}

// Goals returns the value of the "goals" field in the mutation.
func (m *SkaterStatsMutation) Goals() (r int, exists bool) {
	v := m.goals
	if v == nil {
		return
	}
	return *v, true
}

// OldGoals returns the old "goals" field's value of the SkaterStats entity.
// If the SkaterStats object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SkaterStatsMutation) OldGoals(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGoals is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGoals requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoals: %w", err)
	}
	return oldValue.Goals, nil
}

// AddGoals adds i to the "goals" field.
func (m *SkaterStatsMutation) AddGoals(i int) {
	if m.addgoals != nil {
		*m.addgoals += i
	} else {
		m.addgoals = &i
	}
}

// AddedGoals returns the value that was added to the "goals" field in this mutation.
func (m *SkaterStatsMutation) AddedGoals() (r int, exists bool) {
	v := m.addgoals
	if v == nil {
		return
	}
	return *v, true
}

// ResetGoals resets all changes to the "goals" field.
func (m *SkaterStatsMutation) ResetGoals() {
	m.goals = nil
	m.addgoals = nil
}

// SetAssists sets the "assists" field.
func (m *SkaterStatsMutation) SetAssists(i int) {
	m.assists = &i
	m.addassists = nil
}

// Assists returns the value of the "assists" field in the mutation.
func (m *SkaterStatsMutation) Assists() (r int, exists bool) {
	v := m.assists
	if v == nil {
		return
	}
	return *v, true
}

// OldAssists returns the old "assists" field's value of the SkaterStats entity.
// If the SkaterStats object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SkaterStatsMutation) OldAssists(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAssists is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAssists requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAssists: %w", err)
	}
	return oldValue.Assists, nil
}

// AddAssists adds i to the "assists" field.
func (m *SkaterStatsMutation) AddAssists(i int) {
	if m.addassists != nil {
		*m.addassists += i
	} else {
		m.addassists = &i
	}
}

// AddedAssists returns the value that was added to the "assists" field in this mutation.
func (m *SkaterStatsMutation) AddedAssists() (r int, exists bool) {
	v := m.addassists
	if v == nil {
		return
	}
	return *v, true
}

// ResetAssists resets all changes to the "assists" field.
func (m *SkaterStatsMutation) ResetAssists() {
	m.assists = nil
	m.addassists = nil
}

// SetHome sets the "home" field.
func (m *SkaterStatsMutation) SetHome(b bool) {
	m.home = &b
}

// Home returns the value of the "home" field in the mutation.
func (m *SkaterStatsMutation) Home() (r bool, exists bool) {
	v := m.home
	if v == nil {
		return
	}
	return *v, true
}

// OldHome returns the old "home" field's value of the SkaterStats entity.
// If the SkaterStats object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SkaterStatsMutation) OldHome(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHome is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHome requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHome: %w", err)
	}
	return oldValue.Home, nil
}

// ResetHome resets all changes to the "home" field.
func (m *SkaterStatsMutation) ResetHome() {
	m.home = nil
}

// SetGameID sets the "game" edge to the Game entity by id.
func (m *SkaterStatsMutation) SetGameID(id int) {
	m.game = &id
}

// ClearGame clears the "game" edge to the Game entity.
func (m *SkaterStatsMutation) ClearGame() {
	m.clearedgame = true
}

// GameCleared reports if the "game" edge to the Game entity was cleared.
func (m *SkaterStatsMutation) GameCleared() bool {
	return m.clearedgame
}

// GameID returns the "game" edge ID in the mutation.
func (m *SkaterStatsMutation) GameID() (id int, exists bool) {
	if m.game != nil {
		return *m.game, true
	}
	return
}

// GameIDs returns the "game" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GameID instead. It exists only for internal usage by the builders.
func (m *SkaterStatsMutation) GameIDs() (ids []int) {
	if id := m.game; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGame resets all changes to the "game" edge.
func (m *SkaterStatsMutation) ResetGame() {
	m.game = nil
	m.clearedgame = false
}

// SetPlayerID sets the "player" edge to the Player entity by id.
func (m *SkaterStatsMutation) SetPlayerID(id int) {
	m.player = &id
}

// ClearPlayer clears the "player" edge to the Player entity.
func (m *SkaterStatsMutation) ClearPlayer() {
	m.clearedplayer = true
}

// PlayerCleared reports if the "player" edge to the Player entity was cleared.
func (m *SkaterStatsMutation) PlayerCleared() bool {
	return m.clearedplayer
}

// PlayerID returns the "player" edge ID in the mutation.
func (m *SkaterStatsMutation) PlayerID() (id int, exists bool) {
	if m.player != nil {
		return *m.player, true
	}
	return
}

// PlayerIDs returns the "player" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// PlayerID instead. It exists only for internal usage by the builders.
func (m *SkaterStatsMutation) PlayerIDs() (ids []int) {
	if id := m.player; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetPlayer resets all changes to the "player" edge.
func (m *SkaterStatsMutation) ResetPlayer() {
	m.player = nil
	m.clearedplayer = false
}

// Where appends a list predicates to the SkaterStatsMutation builder.
func (m *SkaterStatsMutation) Where(ps ...predicate.SkaterStats) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SkaterStatsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SkaterStatsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SkaterStats, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SkaterStatsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SkaterStatsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SkaterStats).
func (m *SkaterStatsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SkaterStatsMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.goals != nil {
		fields = append(fields, skaterstats.FieldGoals)
	}
	if m.assists != nil {
		fields = append(fields, skaterstats.FieldAssists)
	}
	if m.home != nil {
		fields = append(fields, skaterstats.FieldHome)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SkaterStatsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case skaterstats.FieldGoals:
		return m.Goals()
	case skaterstats.FieldAssists:
		return m.Assists()
	case skaterstats.FieldHome:
		return m.Home()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SkaterStatsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case skaterstats.FieldGoals:
		return m.OldGoals(ctx)
	case skaterstats.FieldAssists:
		return m.OldAssists(ctx)
	case skaterstats.FieldHome:
		return m.OldHome(ctx)
	}
	return nil, fmt.Errorf("unknown SkaterStats field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SkaterStatsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case skaterstats.FieldGoals:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoals(v)
		return nil
	case skaterstats.FieldAssists:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAssists(v)
		return nil
	case skaterstats.FieldHome:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHome(v)
		return nil
	}
	return fmt.Errorf("unknown SkaterStats field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SkaterStatsMutation) AddedFields() []string {
	var fields []string
	if m.addgoals != nil {
		fields = append(fields, skaterstats.FieldGoals)
	}
	if m.addassists != nil {
		fields = append(fields, skaterstats.FieldAssists)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SkaterStatsMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case skaterstats.FieldGoals:
		return m.AddedGoals()
	case skaterstats.FieldAssists:
		return m.AddedAssists()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SkaterStatsMutation) AddField(name string, value ent.Value) error {
	switch name {
	case skaterstats.FieldGoals:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGoals(v)
		return nil
	case skaterstats.FieldAssists:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAssists(v)
		return nil
	}
	return fmt.Errorf("unknown SkaterStats numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SkaterStatsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SkaterStatsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SkaterStatsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown SkaterStats nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SkaterStatsMutation) ResetField(name string) error {
	switch name {
	case skaterstats.FieldGoals:
		m.ResetGoals()
		return nil
	case skaterstats.FieldAssists:
		m.ResetAssists()
		return nil
	case skaterstats.FieldHome:
		m.ResetHome()
		return nil
	}
	return fmt.Errorf("unknown SkaterStats field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SkaterStatsMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.game != nil {
		edges = append(edges, skaterstats.EdgeGame)
	}
	if m.player != nil {
		edges = append(edges, skaterstats.EdgePlayer)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SkaterStatsMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case skaterstats.EdgeGame:
		if id := m.game; id != nil {
			return []ent.Value{*id}
		}
	case skaterstats.EdgePlayer:
		if id := m.player; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SkaterStatsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SkaterStatsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SkaterStatsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedgame {
		edges = append(edges, skaterstats.EdgeGame)
	}
	if m.clearedplayer {
		edges = append(edges, skaterstats.EdgePlayer)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SkaterStatsMutation) EdgeCleared(name string) bool {
	switch name {
	case skaterstats.EdgeGame:
		return m.clearedgame
	case skaterstats.EdgePlayer:
		return m.clearedplayer
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SkaterStatsMutation) ClearEdge(name string) error {
	switch name {
	case skaterstats.EdgeGame:
		m.ClearGame()
		return nil
	case skaterstats.EdgePlayer:
		m.ClearPlayer()
		return nil
	}
	return fmt.Errorf("unknown SkaterStats unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SkaterStatsMutation) ResetEdge(name string) error {
	switch name {
	case skaterstats.EdgeGame:
		m.ResetGame()
		return nil
	case skaterstats.EdgePlayer:
		m.ResetPlayer()
		return nil
	}
	return fmt.Errorf("unknown SkaterStats edge %s", name)
}

// TeamMutation represents an operation that mutates the Team nodes in the graph.
type TeamMutation struct {
	config
	op               Op
	typ              string
	id               *int
	name             *string
	logo_filepath    *string
	eliminated       *bool
	clearedFields    map[string]struct{}
	players          map[int]struct{}
	removedplayers   map[int]struct{}
	clearedplayers   bool
	homeGames        map[int]struct{}
	removedhomeGames map[int]struct{}
	clearedhomeGames bool
	awayGames        map[int]struct{}
	removedawayGames map[int]struct{}
	clearedawayGames bool
	done             bool
	oldValue         func(context.Context) (*Team, error)
	predicates       []predicate.Team
}

var _ ent.Mutation = (*TeamMutation)(nil)

// teamOption allows management of the mutation configuration using functional options.
type teamOption func(*TeamMutation)

// newTeamMutation creates new mutation for the Team entity.
func newTeamMutation(c config, op Op, opts ...teamOption) *TeamMutation {
	m := &TeamMutation{
		config:        c,
		op:            op,
		typ:           TypeTeam,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTeamID sets the ID field of the mutation.
func withTeamID(id int) teamOption {
	return func(m *TeamMutation) {
		var (
			err   error
			once  sync.Once
			value *Team
		)
		m.oldValue = func(ctx context.Context) (*Team, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Team.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTeam sets the old Team of the mutation.
func withTeam(node *Team) teamOption {
	return func(m *TeamMutation) {
		m.oldValue = func(context.Context) (*Team, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TeamMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TeamMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Team entities.
func (m *TeamMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TeamMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TeamMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Team.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *TeamMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TeamMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Team entity.
// If the Team object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeamMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TeamMutation) ResetName() {
	m.name = nil
}

// SetLogoFilepath sets the "logo_filepath" field.
func (m *TeamMutation) SetLogoFilepath(s string) {
	m.logo_filepath = &s
}

// LogoFilepath returns the value of the "logo_filepath" field in the mutation.
func (m *TeamMutation) LogoFilepath() (r string, exists bool) {
	v := m.logo_filepath
	if v == nil {
		return
	}
	return *v, true
}

// OldLogoFilepath returns the old "logo_filepath" field's value of the Team entity.
// If the Team object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeamMutation) OldLogoFilepath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLogoFilepath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLogoFilepath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLogoFilepath: %w", err)
	}
	return oldValue.LogoFilepath, nil
}

// ResetLogoFilepath resets all changes to the "logo_filepath" field.
func (m *TeamMutation) ResetLogoFilepath() {
	m.logo_filepath = nil
}

// SetEliminated sets the "eliminated" field.
func (m *TeamMutation) SetEliminated(b bool) {
	m.eliminated = &b
}

// Eliminated returns the value of the "eliminated" field in the mutation.
func (m *TeamMutation) Eliminated() (r bool, exists bool) {
	v := m.eliminated
	if v == nil {
		return
	}
	return *v, true
}

// OldEliminated returns the old "eliminated" field's value of the Team entity.
// If the Team object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeamMutation) OldEliminated(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEliminated is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEliminated requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEliminated: %w", err)
	}
	return oldValue.Eliminated, nil
}

// ResetEliminated resets all changes to the "eliminated" field.
func (m *TeamMutation) ResetEliminated() {
	m.eliminated = nil
}

// AddPlayerIDs adds the "players" edge to the Player entity by ids.
func (m *TeamMutation) AddPlayerIDs(ids ...int) {
	if m.players == nil {
		m.players = make(map[int]struct{})
	}
	for i := range ids {
		m.players[ids[i]] = struct{}{}
	}
}

// ClearPlayers clears the "players" edge to the Player entity.
func (m *TeamMutation) ClearPlayers() {
	m.clearedplayers = true
}

// PlayersCleared reports if the "players" edge to the Player entity was cleared.
func (m *TeamMutation) PlayersCleared() bool {
	return m.clearedplayers
}

// RemovePlayerIDs removes the "players" edge to the Player entity by IDs.
func (m *TeamMutation) RemovePlayerIDs(ids ...int) {
	if m.removedplayers == nil {
		m.removedplayers = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.players, ids[i])
		m.removedplayers[ids[i]] = struct{}{}
	}
}

// RemovedPlayers returns the removed IDs of the "players" edge to the Player entity.
func (m *TeamMutation) RemovedPlayersIDs() (ids []int) {
	for id := range m.removedplayers {
		ids = append(ids, id)
	}
	return
}

// PlayersIDs returns the "players" edge IDs in the mutation.
func (m *TeamMutation) PlayersIDs() (ids []int) {
	for id := range m.players {
		ids = append(ids, id)
	}
	return
}

// ResetPlayers resets all changes to the "players" edge.
func (m *TeamMutation) ResetPlayers() {
	m.players = nil
	m.clearedplayers = false
	m.removedplayers = nil
}

// AddHomeGameIDs adds the "homeGames" edge to the Game entity by ids.
func (m *TeamMutation) AddHomeGameIDs(ids ...int) {
	if m.homeGames == nil {
		m.homeGames = make(map[int]struct{})
	}
	for i := range ids {
		m.homeGames[ids[i]] = struct{}{}
	}
}

// ClearHomeGames clears the "homeGames" edge to the Game entity.
func (m *TeamMutation) ClearHomeGames() {
	m.clearedhomeGames = true
}

// HomeGamesCleared reports if the "homeGames" edge to the Game entity was cleared.
func (m *TeamMutation) HomeGamesCleared() bool {
	return m.clearedhomeGames
}

// RemoveHomeGameIDs removes the "homeGames" edge to the Game entity by IDs.
func (m *TeamMutation) RemoveHomeGameIDs(ids ...int) {
	if m.removedhomeGames == nil {
		m.removedhomeGames = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.homeGames, ids[i])
		m.removedhomeGames[ids[i]] = struct{}{}
	}
}

// RemovedHomeGames returns the removed IDs of the "homeGames" edge to the Game entity.
func (m *TeamMutation) RemovedHomeGamesIDs() (ids []int) {
	for id := range m.removedhomeGames {
		ids = append(ids, id)
	}
	return
}

// HomeGamesIDs returns the "homeGames" edge IDs in the mutation.
func (m *TeamMutation) HomeGamesIDs() (ids []int) {
	for id := range m.homeGames {
		ids = append(ids, id)
	}
	return
}

// ResetHomeGames resets all changes to the "homeGames" edge.
func (m *TeamMutation) ResetHomeGames() {
	m.homeGames = nil
	m.clearedhomeGames = false
	m.removedhomeGames = nil
}

// AddAwayGameIDs adds the "awayGames" edge to the Game entity by ids.
func (m *TeamMutation) AddAwayGameIDs(ids ...int) {
	if m.awayGames == nil {
		m.awayGames = make(map[int]struct{})
	}
	for i := range ids {
		m.awayGames[ids[i]] = struct{}{}
	}
}

// ClearAwayGames clears the "awayGames" edge to the Game entity.
func (m *TeamMutation) ClearAwayGames() {
	m.clearedawayGames = true
}

// AwayGamesCleared reports if the "awayGames" edge to the Game entity was cleared.
func (m *TeamMutation) AwayGamesCleared() bool {
	return m.clearedawayGames
}

// RemoveAwayGameIDs removes the "awayGames" edge to the Game entity by IDs.
func (m *TeamMutation) RemoveAwayGameIDs(ids ...int) {
	if m.removedawayGames == nil {
		m.removedawayGames = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.awayGames, ids[i])
		m.removedawayGames[ids[i]] = struct{}{}
	}
}

// RemovedAwayGames returns the removed IDs of the "awayGames" edge to the Game entity.
func (m *TeamMutation) RemovedAwayGamesIDs() (ids []int) {
	for id := range m.removedawayGames {
		ids = append(ids, id)
	}
	return
}

// AwayGamesIDs returns the "awayGames" edge IDs in the mutation.
func (m *TeamMutation) AwayGamesIDs() (ids []int) {
	for id := range m.awayGames {
		ids = append(ids, id)
	}
	return
}

// ResetAwayGames resets all changes to the "awayGames" edge.
func (m *TeamMutation) ResetAwayGames() {
	m.awayGames = nil
	m.clearedawayGames = false
	m.removedawayGames = nil
}

// Where appends a list predicates to the TeamMutation builder.
func (m *TeamMutation) Where(ps ...predicate.Team) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TeamMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TeamMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Team, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TeamMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TeamMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Team).
func (m *TeamMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TeamMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, team.FieldName)
	}
	if m.logo_filepath != nil {
		fields = append(fields, team.FieldLogoFilepath)
	}
	if m.eliminated != nil {
		fields = append(fields, team.FieldEliminated)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TeamMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case team.FieldName:
		return m.Name()
	case team.FieldLogoFilepath:
		return m.LogoFilepath()
	case team.FieldEliminated:
		return m.Eliminated()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TeamMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case team.FieldName:
		return m.OldName(ctx)
	case team.FieldLogoFilepath:
		return m.OldLogoFilepath(ctx)
	case team.FieldEliminated:
		return m.OldEliminated(ctx)
	}
	return nil, fmt.Errorf("unknown Team field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TeamMutation) SetField(name string, value ent.Value) error {
	switch name {
	case team.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case team.FieldLogoFilepath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLogoFilepath(v)
		return nil
	case team.FieldEliminated:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEliminated(v)
		return nil
	}
	return fmt.Errorf("unknown Team field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TeamMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TeamMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TeamMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Team numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TeamMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TeamMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TeamMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Team nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TeamMutation) ResetField(name string) error {
	switch name {
	case team.FieldName:
		m.ResetName()
		return nil
	case team.FieldLogoFilepath:
		m.ResetLogoFilepath()
		return nil
	case team.FieldEliminated:
		m.ResetEliminated()
		return nil
	}
	return fmt.Errorf("unknown Team field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TeamMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.players != nil {
		edges = append(edges, team.EdgePlayers)
	}
	if m.homeGames != nil {
		edges = append(edges, team.EdgeHomeGames)
	}
	if m.awayGames != nil {
		edges = append(edges, team.EdgeAwayGames)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TeamMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case team.EdgePlayers:
		ids := make([]ent.Value, 0, len(m.players))
		for id := range m.players {
			ids = append(ids, id)
		}
		return ids
	case team.EdgeHomeGames:
		ids := make([]ent.Value, 0, len(m.homeGames))
		for id := range m.homeGames {
			ids = append(ids, id)
		}
		return ids
	case team.EdgeAwayGames:
		ids := make([]ent.Value, 0, len(m.awayGames))
		for id := range m.awayGames {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TeamMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedplayers != nil {
		edges = append(edges, team.EdgePlayers)
	}
	if m.removedhomeGames != nil {
		edges = append(edges, team.EdgeHomeGames)
	}
	if m.removedawayGames != nil {
		edges = append(edges, team.EdgeAwayGames)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TeamMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case team.EdgePlayers:
		ids := make([]ent.Value, 0, len(m.removedplayers))
		for id := range m.removedplayers {
			ids = append(ids, id)
		}
		return ids
	case team.EdgeHomeGames:
		ids := make([]ent.Value, 0, len(m.removedhomeGames))
		for id := range m.removedhomeGames {
			ids = append(ids, id)
		}
		return ids
	case team.EdgeAwayGames:
		ids := make([]ent.Value, 0, len(m.removedawayGames))
		for id := range m.removedawayGames {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TeamMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedplayers {
		edges = append(edges, team.EdgePlayers)
	}
	if m.clearedhomeGames {
		edges = append(edges, team.EdgeHomeGames)
	}
	if m.clearedawayGames {
		edges = append(edges, team.EdgeAwayGames)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TeamMutation) EdgeCleared(name string) bool {
	switch name {
	case team.EdgePlayers:
		return m.clearedplayers
	case team.EdgeHomeGames:
		return m.clearedhomeGames
	case team.EdgeAwayGames:
		return m.clearedawayGames
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TeamMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Team unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TeamMutation) ResetEdge(name string) error {
	switch name {
	case team.EdgePlayers:
		m.ResetPlayers()
		return nil
	case team.EdgeHomeGames:
		m.ResetHomeGames()
		return nil
	case team.EdgeAwayGames:
		m.ResetAwayGames()
		return nil
	}
	return fmt.Errorf("unknown Team edge %s", name)
}
