// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/entry"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/league"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/player"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/predicate"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/team"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeEntry  = "Entry"
	TypeLeague = "League"
	TypePlayer = "Player"
	TypeTeam   = "Team"
)

// EntryMutation represents an operation that mutates the Entry nodes in the graph.
type EntryMutation struct {
	config
	op               Op
	typ              string
	id               *int
	owner_name       *string
	point_total      *int
	addpoint_total   *int
	clearedFields    map[string]struct{}
	league           *int
	clearedleague    bool
	forwards         map[int]struct{}
	removedforwards  map[int]struct{}
	clearedforwards  bool
	defenders        map[int]struct{}
	removeddefenders map[int]struct{}
	cleareddefenders bool
	goalies          map[int]struct{}
	removedgoalies   map[int]struct{}
	clearedgoalies   bool
	done             bool
	oldValue         func(context.Context) (*Entry, error)
	predicates       []predicate.Entry
}

var _ ent.Mutation = (*EntryMutation)(nil)

// entryOption allows management of the mutation configuration using functional options.
type entryOption func(*EntryMutation)

// newEntryMutation creates new mutation for the Entry entity.
func newEntryMutation(c config, op Op, opts ...entryOption) *EntryMutation {
	m := &EntryMutation{
		config:        c,
		op:            op,
		typ:           TypeEntry,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEntryID sets the ID field of the mutation.
func withEntryID(id int) entryOption {
	return func(m *EntryMutation) {
		var (
			err   error
			once  sync.Once
			value *Entry
		)
		m.oldValue = func(ctx context.Context) (*Entry, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Entry.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEntry sets the old Entry of the mutation.
func withEntry(node *Entry) entryOption {
	return func(m *EntryMutation) {
		m.oldValue = func(context.Context) (*Entry, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EntryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EntryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EntryMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EntryMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Entry.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetOwnerName sets the "owner_name" field.
func (m *EntryMutation) SetOwnerName(s string) {
	m.owner_name = &s
}

// OwnerName returns the value of the "owner_name" field in the mutation.
func (m *EntryMutation) OwnerName() (r string, exists bool) {
	v := m.owner_name
	if v == nil {
		return
	}
	return *v, true
}

// OldOwnerName returns the old "owner_name" field's value of the Entry entity.
// If the Entry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntryMutation) OldOwnerName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwnerName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwnerName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwnerName: %w", err)
	}
	return oldValue.OwnerName, nil
}

// ResetOwnerName resets all changes to the "owner_name" field.
func (m *EntryMutation) ResetOwnerName() {
	m.owner_name = nil
}

// SetPointTotal sets the "point_total" field.
func (m *EntryMutation) SetPointTotal(i int) {
	m.point_total = &i
	m.addpoint_total = nil
}

// PointTotal returns the value of the "point_total" field in the mutation.
func (m *EntryMutation) PointTotal() (r int, exists bool) {
	v := m.point_total
	if v == nil {
		return
	}
	return *v, true
}

// OldPointTotal returns the old "point_total" field's value of the Entry entity.
// If the Entry object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntryMutation) OldPointTotal(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPointTotal is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPointTotal requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPointTotal: %w", err)
	}
	return oldValue.PointTotal, nil
}

// AddPointTotal adds i to the "point_total" field.
func (m *EntryMutation) AddPointTotal(i int) {
	if m.addpoint_total != nil {
		*m.addpoint_total += i
	} else {
		m.addpoint_total = &i
	}
}

// AddedPointTotal returns the value that was added to the "point_total" field in this mutation.
func (m *EntryMutation) AddedPointTotal() (r int, exists bool) {
	v := m.addpoint_total
	if v == nil {
		return
	}
	return *v, true
}

// ResetPointTotal resets all changes to the "point_total" field.
func (m *EntryMutation) ResetPointTotal() {
	m.point_total = nil
	m.addpoint_total = nil
}

// SetLeagueID sets the "league" edge to the League entity by id.
func (m *EntryMutation) SetLeagueID(id int) {
	m.league = &id
}

// ClearLeague clears the "league" edge to the League entity.
func (m *EntryMutation) ClearLeague() {
	m.clearedleague = true
}

// LeagueCleared reports if the "league" edge to the League entity was cleared.
func (m *EntryMutation) LeagueCleared() bool {
	return m.clearedleague
}

// LeagueID returns the "league" edge ID in the mutation.
func (m *EntryMutation) LeagueID() (id int, exists bool) {
	if m.league != nil {
		return *m.league, true
	}
	return
}

// LeagueIDs returns the "league" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// LeagueID instead. It exists only for internal usage by the builders.
func (m *EntryMutation) LeagueIDs() (ids []int) {
	if id := m.league; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetLeague resets all changes to the "league" edge.
func (m *EntryMutation) ResetLeague() {
	m.league = nil
	m.clearedleague = false
}

// AddForwardIDs adds the "forwards" edge to the Player entity by ids.
func (m *EntryMutation) AddForwardIDs(ids ...int) {
	if m.forwards == nil {
		m.forwards = make(map[int]struct{})
	}
	for i := range ids {
		m.forwards[ids[i]] = struct{}{}
	}
}

// ClearForwards clears the "forwards" edge to the Player entity.
func (m *EntryMutation) ClearForwards() {
	m.clearedforwards = true
}

// ForwardsCleared reports if the "forwards" edge to the Player entity was cleared.
func (m *EntryMutation) ForwardsCleared() bool {
	return m.clearedforwards
}

// RemoveForwardIDs removes the "forwards" edge to the Player entity by IDs.
func (m *EntryMutation) RemoveForwardIDs(ids ...int) {
	if m.removedforwards == nil {
		m.removedforwards = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.forwards, ids[i])
		m.removedforwards[ids[i]] = struct{}{}
	}
}

// RemovedForwards returns the removed IDs of the "forwards" edge to the Player entity.
func (m *EntryMutation) RemovedForwardsIDs() (ids []int) {
	for id := range m.removedforwards {
		ids = append(ids, id)
	}
	return
}

// ForwardsIDs returns the "forwards" edge IDs in the mutation.
func (m *EntryMutation) ForwardsIDs() (ids []int) {
	for id := range m.forwards {
		ids = append(ids, id)
	}
	return
}

// ResetForwards resets all changes to the "forwards" edge.
func (m *EntryMutation) ResetForwards() {
	m.forwards = nil
	m.clearedforwards = false
	m.removedforwards = nil
}

// AddDefenderIDs adds the "defenders" edge to the Player entity by ids.
func (m *EntryMutation) AddDefenderIDs(ids ...int) {
	if m.defenders == nil {
		m.defenders = make(map[int]struct{})
	}
	for i := range ids {
		m.defenders[ids[i]] = struct{}{}
	}
}

// ClearDefenders clears the "defenders" edge to the Player entity.
func (m *EntryMutation) ClearDefenders() {
	m.cleareddefenders = true
}

// DefendersCleared reports if the "defenders" edge to the Player entity was cleared.
func (m *EntryMutation) DefendersCleared() bool {
	return m.cleareddefenders
}

// RemoveDefenderIDs removes the "defenders" edge to the Player entity by IDs.
func (m *EntryMutation) RemoveDefenderIDs(ids ...int) {
	if m.removeddefenders == nil {
		m.removeddefenders = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.defenders, ids[i])
		m.removeddefenders[ids[i]] = struct{}{}
	}
}

// RemovedDefenders returns the removed IDs of the "defenders" edge to the Player entity.
func (m *EntryMutation) RemovedDefendersIDs() (ids []int) {
	for id := range m.removeddefenders {
		ids = append(ids, id)
	}
	return
}

// DefendersIDs returns the "defenders" edge IDs in the mutation.
func (m *EntryMutation) DefendersIDs() (ids []int) {
	for id := range m.defenders {
		ids = append(ids, id)
	}
	return
}

// ResetDefenders resets all changes to the "defenders" edge.
func (m *EntryMutation) ResetDefenders() {
	m.defenders = nil
	m.cleareddefenders = false
	m.removeddefenders = nil
}

// AddGoalyIDs adds the "goalies" edge to the Player entity by ids.
func (m *EntryMutation) AddGoalyIDs(ids ...int) {
	if m.goalies == nil {
		m.goalies = make(map[int]struct{})
	}
	for i := range ids {
		m.goalies[ids[i]] = struct{}{}
	}
}

// ClearGoalies clears the "goalies" edge to the Player entity.
func (m *EntryMutation) ClearGoalies() {
	m.clearedgoalies = true
}

// GoaliesCleared reports if the "goalies" edge to the Player entity was cleared.
func (m *EntryMutation) GoaliesCleared() bool {
	return m.clearedgoalies
}

// RemoveGoalyIDs removes the "goalies" edge to the Player entity by IDs.
func (m *EntryMutation) RemoveGoalyIDs(ids ...int) {
	if m.removedgoalies == nil {
		m.removedgoalies = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.goalies, ids[i])
		m.removedgoalies[ids[i]] = struct{}{}
	}
}

// RemovedGoalies returns the removed IDs of the "goalies" edge to the Player entity.
func (m *EntryMutation) RemovedGoaliesIDs() (ids []int) {
	for id := range m.removedgoalies {
		ids = append(ids, id)
	}
	return
}

// GoaliesIDs returns the "goalies" edge IDs in the mutation.
func (m *EntryMutation) GoaliesIDs() (ids []int) {
	for id := range m.goalies {
		ids = append(ids, id)
	}
	return
}

// ResetGoalies resets all changes to the "goalies" edge.
func (m *EntryMutation) ResetGoalies() {
	m.goalies = nil
	m.clearedgoalies = false
	m.removedgoalies = nil
}

// Where appends a list predicates to the EntryMutation builder.
func (m *EntryMutation) Where(ps ...predicate.Entry) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EntryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EntryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Entry, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EntryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EntryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Entry).
func (m *EntryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EntryMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.owner_name != nil {
		fields = append(fields, entry.FieldOwnerName)
	}
	if m.point_total != nil {
		fields = append(fields, entry.FieldPointTotal)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EntryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case entry.FieldOwnerName:
		return m.OwnerName()
	case entry.FieldPointTotal:
		return m.PointTotal()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EntryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case entry.FieldOwnerName:
		return m.OldOwnerName(ctx)
	case entry.FieldPointTotal:
		return m.OldPointTotal(ctx)
	}
	return nil, fmt.Errorf("unknown Entry field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EntryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case entry.FieldOwnerName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwnerName(v)
		return nil
	case entry.FieldPointTotal:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPointTotal(v)
		return nil
	}
	return fmt.Errorf("unknown Entry field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EntryMutation) AddedFields() []string {
	var fields []string
	if m.addpoint_total != nil {
		fields = append(fields, entry.FieldPointTotal)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EntryMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case entry.FieldPointTotal:
		return m.AddedPointTotal()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EntryMutation) AddField(name string, value ent.Value) error {
	switch name {
	case entry.FieldPointTotal:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPointTotal(v)
		return nil
	}
	return fmt.Errorf("unknown Entry numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EntryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EntryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EntryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Entry nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EntryMutation) ResetField(name string) error {
	switch name {
	case entry.FieldOwnerName:
		m.ResetOwnerName()
		return nil
	case entry.FieldPointTotal:
		m.ResetPointTotal()
		return nil
	}
	return fmt.Errorf("unknown Entry field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EntryMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.league != nil {
		edges = append(edges, entry.EdgeLeague)
	}
	if m.forwards != nil {
		edges = append(edges, entry.EdgeForwards)
	}
	if m.defenders != nil {
		edges = append(edges, entry.EdgeDefenders)
	}
	if m.goalies != nil {
		edges = append(edges, entry.EdgeGoalies)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EntryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case entry.EdgeLeague:
		if id := m.league; id != nil {
			return []ent.Value{*id}
		}
	case entry.EdgeForwards:
		ids := make([]ent.Value, 0, len(m.forwards))
		for id := range m.forwards {
			ids = append(ids, id)
		}
		return ids
	case entry.EdgeDefenders:
		ids := make([]ent.Value, 0, len(m.defenders))
		for id := range m.defenders {
			ids = append(ids, id)
		}
		return ids
	case entry.EdgeGoalies:
		ids := make([]ent.Value, 0, len(m.goalies))
		for id := range m.goalies {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EntryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedforwards != nil {
		edges = append(edges, entry.EdgeForwards)
	}
	if m.removeddefenders != nil {
		edges = append(edges, entry.EdgeDefenders)
	}
	if m.removedgoalies != nil {
		edges = append(edges, entry.EdgeGoalies)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EntryMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case entry.EdgeForwards:
		ids := make([]ent.Value, 0, len(m.removedforwards))
		for id := range m.removedforwards {
			ids = append(ids, id)
		}
		return ids
	case entry.EdgeDefenders:
		ids := make([]ent.Value, 0, len(m.removeddefenders))
		for id := range m.removeddefenders {
			ids = append(ids, id)
		}
		return ids
	case entry.EdgeGoalies:
		ids := make([]ent.Value, 0, len(m.removedgoalies))
		for id := range m.removedgoalies {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EntryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedleague {
		edges = append(edges, entry.EdgeLeague)
	}
	if m.clearedforwards {
		edges = append(edges, entry.EdgeForwards)
	}
	if m.cleareddefenders {
		edges = append(edges, entry.EdgeDefenders)
	}
	if m.clearedgoalies {
		edges = append(edges, entry.EdgeGoalies)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EntryMutation) EdgeCleared(name string) bool {
	switch name {
	case entry.EdgeLeague:
		return m.clearedleague
	case entry.EdgeForwards:
		return m.clearedforwards
	case entry.EdgeDefenders:
		return m.cleareddefenders
	case entry.EdgeGoalies:
		return m.clearedgoalies
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EntryMutation) ClearEdge(name string) error {
	switch name {
	case entry.EdgeLeague:
		m.ClearLeague()
		return nil
	}
	return fmt.Errorf("unknown Entry unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EntryMutation) ResetEdge(name string) error {
	switch name {
	case entry.EdgeLeague:
		m.ResetLeague()
		return nil
	case entry.EdgeForwards:
		m.ResetForwards()
		return nil
	case entry.EdgeDefenders:
		m.ResetDefenders()
		return nil
	case entry.EdgeGoalies:
		m.ResetGoalies()
		return nil
	}
	return fmt.Errorf("unknown Entry edge %s", name)
}

// LeagueMutation represents an operation that mutates the League nodes in the graph.
type LeagueMutation struct {
	config
	op                           Op
	typ                          string
	id                           *int
	season                       *int
	addseason                    *int
	public                       *bool
	num_forwards                 *int
	addnum_forwards              *int
	num_defenders                *int
	addnum_defenders             *int
	num_goalies                  *int
	addnum_goalies               *int
	points_for_goal              *int
	addpoints_for_goal           *int
	points_for_assist            *int
	addpoints_for_assist         *int
	goalie_points_for_shutout    *int
	addgoalie_points_for_shutout *int
	goalie_points_for_win        *int
	addgoalie_points_for_win     *int
	edit_key                     *string
	code                         *string
	clearedFields                map[string]struct{}
	entries                      map[int]struct{}
	removedentries               map[int]struct{}
	clearedentries               bool
	done                         bool
	oldValue                     func(context.Context) (*League, error)
	predicates                   []predicate.League
}

var _ ent.Mutation = (*LeagueMutation)(nil)

// leagueOption allows management of the mutation configuration using functional options.
type leagueOption func(*LeagueMutation)

// newLeagueMutation creates new mutation for the League entity.
func newLeagueMutation(c config, op Op, opts ...leagueOption) *LeagueMutation {
	m := &LeagueMutation{
		config:        c,
		op:            op,
		typ:           TypeLeague,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withLeagueID sets the ID field of the mutation.
func withLeagueID(id int) leagueOption {
	return func(m *LeagueMutation) {
		var (
			err   error
			once  sync.Once
			value *League
		)
		m.oldValue = func(ctx context.Context) (*League, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().League.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withLeague sets the old League of the mutation.
func withLeague(node *League) leagueOption {
	return func(m *LeagueMutation) {
		m.oldValue = func(context.Context) (*League, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m LeagueMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m LeagueMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *LeagueMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *LeagueMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().League.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSeason sets the "season" field.
func (m *LeagueMutation) SetSeason(i int) {
	m.season = &i
	m.addseason = nil
}

// Season returns the value of the "season" field in the mutation.
func (m *LeagueMutation) Season() (r int, exists bool) {
	v := m.season
	if v == nil {
		return
	}
	return *v, true
}

// OldSeason returns the old "season" field's value of the League entity.
// If the League object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LeagueMutation) OldSeason(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSeason is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSeason requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSeason: %w", err)
	}
	return oldValue.Season, nil
}

// AddSeason adds i to the "season" field.
func (m *LeagueMutation) AddSeason(i int) {
	if m.addseason != nil {
		*m.addseason += i
	} else {
		m.addseason = &i
	}
}

// AddedSeason returns the value that was added to the "season" field in this mutation.
func (m *LeagueMutation) AddedSeason() (r int, exists bool) {
	v := m.addseason
	if v == nil {
		return
	}
	return *v, true
}

// ResetSeason resets all changes to the "season" field.
func (m *LeagueMutation) ResetSeason() {
	m.season = nil
	m.addseason = nil
}

// SetPublic sets the "public" field.
func (m *LeagueMutation) SetPublic(b bool) {
	m.public = &b
}

// Public returns the value of the "public" field in the mutation.
func (m *LeagueMutation) Public() (r bool, exists bool) {
	v := m.public
	if v == nil {
		return
	}
	return *v, true
}

// OldPublic returns the old "public" field's value of the League entity.
// If the League object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LeagueMutation) OldPublic(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublic is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublic requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublic: %w", err)
	}
	return oldValue.Public, nil
}

// ResetPublic resets all changes to the "public" field.
func (m *LeagueMutation) ResetPublic() {
	m.public = nil
}

// SetNumForwards sets the "num_forwards" field.
func (m *LeagueMutation) SetNumForwards(i int) {
	m.num_forwards = &i
	m.addnum_forwards = nil
}

// NumForwards returns the value of the "num_forwards" field in the mutation.
func (m *LeagueMutation) NumForwards() (r int, exists bool) {
	v := m.num_forwards
	if v == nil {
		return
	}
	return *v, true
}

// OldNumForwards returns the old "num_forwards" field's value of the League entity.
// If the League object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LeagueMutation) OldNumForwards(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNumForwards is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNumForwards requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumForwards: %w", err)
	}
	return oldValue.NumForwards, nil
}

// AddNumForwards adds i to the "num_forwards" field.
func (m *LeagueMutation) AddNumForwards(i int) {
	if m.addnum_forwards != nil {
		*m.addnum_forwards += i
	} else {
		m.addnum_forwards = &i
	}
}

// AddedNumForwards returns the value that was added to the "num_forwards" field in this mutation.
func (m *LeagueMutation) AddedNumForwards() (r int, exists bool) {
	v := m.addnum_forwards
	if v == nil {
		return
	}
	return *v, true
}

// ResetNumForwards resets all changes to the "num_forwards" field.
func (m *LeagueMutation) ResetNumForwards() {
	m.num_forwards = nil
	m.addnum_forwards = nil
}

// SetNumDefenders sets the "num_defenders" field.
func (m *LeagueMutation) SetNumDefenders(i int) {
	m.num_defenders = &i
	m.addnum_defenders = nil
}

// NumDefenders returns the value of the "num_defenders" field in the mutation.
func (m *LeagueMutation) NumDefenders() (r int, exists bool) {
	v := m.num_defenders
	if v == nil {
		return
	}
	return *v, true
}

// OldNumDefenders returns the old "num_defenders" field's value of the League entity.
// If the League object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LeagueMutation) OldNumDefenders(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNumDefenders is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNumDefenders requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumDefenders: %w", err)
	}
	return oldValue.NumDefenders, nil
}

// AddNumDefenders adds i to the "num_defenders" field.
func (m *LeagueMutation) AddNumDefenders(i int) {
	if m.addnum_defenders != nil {
		*m.addnum_defenders += i
	} else {
		m.addnum_defenders = &i
	}
}

// AddedNumDefenders returns the value that was added to the "num_defenders" field in this mutation.
func (m *LeagueMutation) AddedNumDefenders() (r int, exists bool) {
	v := m.addnum_defenders
	if v == nil {
		return
	}
	return *v, true
}

// ResetNumDefenders resets all changes to the "num_defenders" field.
func (m *LeagueMutation) ResetNumDefenders() {
	m.num_defenders = nil
	m.addnum_defenders = nil
}

// SetNumGoalies sets the "num_goalies" field.
func (m *LeagueMutation) SetNumGoalies(i int) {
	m.num_goalies = &i
	m.addnum_goalies = nil
}

// NumGoalies returns the value of the "num_goalies" field in the mutation.
func (m *LeagueMutation) NumGoalies() (r int, exists bool) {
	v := m.num_goalies
	if v == nil {
		return
	}
	return *v, true
}

// OldNumGoalies returns the old "num_goalies" field's value of the League entity.
// If the League object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LeagueMutation) OldNumGoalies(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNumGoalies is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNumGoalies requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNumGoalies: %w", err)
	}
	return oldValue.NumGoalies, nil
}

// AddNumGoalies adds i to the "num_goalies" field.
func (m *LeagueMutation) AddNumGoalies(i int) {
	if m.addnum_goalies != nil {
		*m.addnum_goalies += i
	} else {
		m.addnum_goalies = &i
	}
}

// AddedNumGoalies returns the value that was added to the "num_goalies" field in this mutation.
func (m *LeagueMutation) AddedNumGoalies() (r int, exists bool) {
	v := m.addnum_goalies
	if v == nil {
		return
	}
	return *v, true
}

// ResetNumGoalies resets all changes to the "num_goalies" field.
func (m *LeagueMutation) ResetNumGoalies() {
	m.num_goalies = nil
	m.addnum_goalies = nil
}

// SetPointsForGoal sets the "points_for_goal" field.
func (m *LeagueMutation) SetPointsForGoal(i int) {
	m.points_for_goal = &i
	m.addpoints_for_goal = nil
}

// PointsForGoal returns the value of the "points_for_goal" field in the mutation.
func (m *LeagueMutation) PointsForGoal() (r int, exists bool) {
	v := m.points_for_goal
	if v == nil {
		return
	}
	return *v, true
}

// OldPointsForGoal returns the old "points_for_goal" field's value of the League entity.
// If the League object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LeagueMutation) OldPointsForGoal(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPointsForGoal is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPointsForGoal requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPointsForGoal: %w", err)
	}
	return oldValue.PointsForGoal, nil
}

// AddPointsForGoal adds i to the "points_for_goal" field.
func (m *LeagueMutation) AddPointsForGoal(i int) {
	if m.addpoints_for_goal != nil {
		*m.addpoints_for_goal += i
	} else {
		m.addpoints_for_goal = &i
	}
}

// AddedPointsForGoal returns the value that was added to the "points_for_goal" field in this mutation.
func (m *LeagueMutation) AddedPointsForGoal() (r int, exists bool) {
	v := m.addpoints_for_goal
	if v == nil {
		return
	}
	return *v, true
}

// ResetPointsForGoal resets all changes to the "points_for_goal" field.
func (m *LeagueMutation) ResetPointsForGoal() {
	m.points_for_goal = nil
	m.addpoints_for_goal = nil
}

// SetPointsForAssist sets the "points_for_assist" field.
func (m *LeagueMutation) SetPointsForAssist(i int) {
	m.points_for_assist = &i
	m.addpoints_for_assist = nil
}

// PointsForAssist returns the value of the "points_for_assist" field in the mutation.
func (m *LeagueMutation) PointsForAssist() (r int, exists bool) {
	v := m.points_for_assist
	if v == nil {
		return
	}
	return *v, true
}

// OldPointsForAssist returns the old "points_for_assist" field's value of the League entity.
// If the League object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LeagueMutation) OldPointsForAssist(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPointsForAssist is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPointsForAssist requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPointsForAssist: %w", err)
	}
	return oldValue.PointsForAssist, nil
}

// AddPointsForAssist adds i to the "points_for_assist" field.
func (m *LeagueMutation) AddPointsForAssist(i int) {
	if m.addpoints_for_assist != nil {
		*m.addpoints_for_assist += i
	} else {
		m.addpoints_for_assist = &i
	}
}

// AddedPointsForAssist returns the value that was added to the "points_for_assist" field in this mutation.
func (m *LeagueMutation) AddedPointsForAssist() (r int, exists bool) {
	v := m.addpoints_for_assist
	if v == nil {
		return
	}
	return *v, true
}

// ResetPointsForAssist resets all changes to the "points_for_assist" field.
func (m *LeagueMutation) ResetPointsForAssist() {
	m.points_for_assist = nil
	m.addpoints_for_assist = nil
}

// SetGoaliePointsForShutout sets the "goalie_points_for_shutout" field.
func (m *LeagueMutation) SetGoaliePointsForShutout(i int) {
	m.goalie_points_for_shutout = &i
	m.addgoalie_points_for_shutout = nil
}

// GoaliePointsForShutout returns the value of the "goalie_points_for_shutout" field in the mutation.
func (m *LeagueMutation) GoaliePointsForShutout() (r int, exists bool) {
	v := m.goalie_points_for_shutout
	if v == nil {
		return
	}
	return *v, true
}

// OldGoaliePointsForShutout returns the old "goalie_points_for_shutout" field's value of the League entity.
// If the League object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LeagueMutation) OldGoaliePointsForShutout(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGoaliePointsForShutout is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGoaliePointsForShutout requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoaliePointsForShutout: %w", err)
	}
	return oldValue.GoaliePointsForShutout, nil
}

// AddGoaliePointsForShutout adds i to the "goalie_points_for_shutout" field.
func (m *LeagueMutation) AddGoaliePointsForShutout(i int) {
	if m.addgoalie_points_for_shutout != nil {
		*m.addgoalie_points_for_shutout += i
	} else {
		m.addgoalie_points_for_shutout = &i
	}
}

// AddedGoaliePointsForShutout returns the value that was added to the "goalie_points_for_shutout" field in this mutation.
func (m *LeagueMutation) AddedGoaliePointsForShutout() (r int, exists bool) {
	v := m.addgoalie_points_for_shutout
	if v == nil {
		return
	}
	return *v, true
}

// ResetGoaliePointsForShutout resets all changes to the "goalie_points_for_shutout" field.
func (m *LeagueMutation) ResetGoaliePointsForShutout() {
	m.goalie_points_for_shutout = nil
	m.addgoalie_points_for_shutout = nil
}

// SetGoaliePointsForWin sets the "goalie_points_for_win" field.
func (m *LeagueMutation) SetGoaliePointsForWin(i int) {
	m.goalie_points_for_win = &i
	m.addgoalie_points_for_win = nil
}

// GoaliePointsForWin returns the value of the "goalie_points_for_win" field in the mutation.
func (m *LeagueMutation) GoaliePointsForWin() (r int, exists bool) {
	v := m.goalie_points_for_win
	if v == nil {
		return
	}
	return *v, true
}

// OldGoaliePointsForWin returns the old "goalie_points_for_win" field's value of the League entity.
// If the League object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LeagueMutation) OldGoaliePointsForWin(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGoaliePointsForWin is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGoaliePointsForWin requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoaliePointsForWin: %w", err)
	}
	return oldValue.GoaliePointsForWin, nil
}

// AddGoaliePointsForWin adds i to the "goalie_points_for_win" field.
func (m *LeagueMutation) AddGoaliePointsForWin(i int) {
	if m.addgoalie_points_for_win != nil {
		*m.addgoalie_points_for_win += i
	} else {
		m.addgoalie_points_for_win = &i
	}
}

// AddedGoaliePointsForWin returns the value that was added to the "goalie_points_for_win" field in this mutation.
func (m *LeagueMutation) AddedGoaliePointsForWin() (r int, exists bool) {
	v := m.addgoalie_points_for_win
	if v == nil {
		return
	}
	return *v, true
}

// ResetGoaliePointsForWin resets all changes to the "goalie_points_for_win" field.
func (m *LeagueMutation) ResetGoaliePointsForWin() {
	m.goalie_points_for_win = nil
	m.addgoalie_points_for_win = nil
}

// SetEditKey sets the "edit_key" field.
func (m *LeagueMutation) SetEditKey(s string) {
	m.edit_key = &s
}

// EditKey returns the value of the "edit_key" field in the mutation.
func (m *LeagueMutation) EditKey() (r string, exists bool) {
	v := m.edit_key
	if v == nil {
		return
	}
	return *v, true
}

// OldEditKey returns the old "edit_key" field's value of the League entity.
// If the League object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LeagueMutation) OldEditKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEditKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEditKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEditKey: %w", err)
	}
	return oldValue.EditKey, nil
}

// ResetEditKey resets all changes to the "edit_key" field.
func (m *LeagueMutation) ResetEditKey() {
	m.edit_key = nil
}

// SetCode sets the "code" field.
func (m *LeagueMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *LeagueMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the League entity.
// If the League object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *LeagueMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *LeagueMutation) ResetCode() {
	m.code = nil
}

// AddEntryIDs adds the "entries" edge to the Entry entity by ids.
func (m *LeagueMutation) AddEntryIDs(ids ...int) {
	if m.entries == nil {
		m.entries = make(map[int]struct{})
	}
	for i := range ids {
		m.entries[ids[i]] = struct{}{}
	}
}

// ClearEntries clears the "entries" edge to the Entry entity.
func (m *LeagueMutation) ClearEntries() {
	m.clearedentries = true
}

// EntriesCleared reports if the "entries" edge to the Entry entity was cleared.
func (m *LeagueMutation) EntriesCleared() bool {
	return m.clearedentries
}

// RemoveEntryIDs removes the "entries" edge to the Entry entity by IDs.
func (m *LeagueMutation) RemoveEntryIDs(ids ...int) {
	if m.removedentries == nil {
		m.removedentries = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.entries, ids[i])
		m.removedentries[ids[i]] = struct{}{}
	}
}

// RemovedEntries returns the removed IDs of the "entries" edge to the Entry entity.
func (m *LeagueMutation) RemovedEntriesIDs() (ids []int) {
	for id := range m.removedentries {
		ids = append(ids, id)
	}
	return
}

// EntriesIDs returns the "entries" edge IDs in the mutation.
func (m *LeagueMutation) EntriesIDs() (ids []int) {
	for id := range m.entries {
		ids = append(ids, id)
	}
	return
}

// ResetEntries resets all changes to the "entries" edge.
func (m *LeagueMutation) ResetEntries() {
	m.entries = nil
	m.clearedentries = false
	m.removedentries = nil
}

// Where appends a list predicates to the LeagueMutation builder.
func (m *LeagueMutation) Where(ps ...predicate.League) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the LeagueMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *LeagueMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.League, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *LeagueMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *LeagueMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (League).
func (m *LeagueMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *LeagueMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.season != nil {
		fields = append(fields, league.FieldSeason)
	}
	if m.public != nil {
		fields = append(fields, league.FieldPublic)
	}
	if m.num_forwards != nil {
		fields = append(fields, league.FieldNumForwards)
	}
	if m.num_defenders != nil {
		fields = append(fields, league.FieldNumDefenders)
	}
	if m.num_goalies != nil {
		fields = append(fields, league.FieldNumGoalies)
	}
	if m.points_for_goal != nil {
		fields = append(fields, league.FieldPointsForGoal)
	}
	if m.points_for_assist != nil {
		fields = append(fields, league.FieldPointsForAssist)
	}
	if m.goalie_points_for_shutout != nil {
		fields = append(fields, league.FieldGoaliePointsForShutout)
	}
	if m.goalie_points_for_win != nil {
		fields = append(fields, league.FieldGoaliePointsForWin)
	}
	if m.edit_key != nil {
		fields = append(fields, league.FieldEditKey)
	}
	if m.code != nil {
		fields = append(fields, league.FieldCode)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *LeagueMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case league.FieldSeason:
		return m.Season()
	case league.FieldPublic:
		return m.Public()
	case league.FieldNumForwards:
		return m.NumForwards()
	case league.FieldNumDefenders:
		return m.NumDefenders()
	case league.FieldNumGoalies:
		return m.NumGoalies()
	case league.FieldPointsForGoal:
		return m.PointsForGoal()
	case league.FieldPointsForAssist:
		return m.PointsForAssist()
	case league.FieldGoaliePointsForShutout:
		return m.GoaliePointsForShutout()
	case league.FieldGoaliePointsForWin:
		return m.GoaliePointsForWin()
	case league.FieldEditKey:
		return m.EditKey()
	case league.FieldCode:
		return m.Code()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *LeagueMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case league.FieldSeason:
		return m.OldSeason(ctx)
	case league.FieldPublic:
		return m.OldPublic(ctx)
	case league.FieldNumForwards:
		return m.OldNumForwards(ctx)
	case league.FieldNumDefenders:
		return m.OldNumDefenders(ctx)
	case league.FieldNumGoalies:
		return m.OldNumGoalies(ctx)
	case league.FieldPointsForGoal:
		return m.OldPointsForGoal(ctx)
	case league.FieldPointsForAssist:
		return m.OldPointsForAssist(ctx)
	case league.FieldGoaliePointsForShutout:
		return m.OldGoaliePointsForShutout(ctx)
	case league.FieldGoaliePointsForWin:
		return m.OldGoaliePointsForWin(ctx)
	case league.FieldEditKey:
		return m.OldEditKey(ctx)
	case league.FieldCode:
		return m.OldCode(ctx)
	}
	return nil, fmt.Errorf("unknown League field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LeagueMutation) SetField(name string, value ent.Value) error {
	switch name {
	case league.FieldSeason:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSeason(v)
		return nil
	case league.FieldPublic:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublic(v)
		return nil
	case league.FieldNumForwards:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumForwards(v)
		return nil
	case league.FieldNumDefenders:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumDefenders(v)
		return nil
	case league.FieldNumGoalies:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNumGoalies(v)
		return nil
	case league.FieldPointsForGoal:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPointsForGoal(v)
		return nil
	case league.FieldPointsForAssist:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPointsForAssist(v)
		return nil
	case league.FieldGoaliePointsForShutout:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoaliePointsForShutout(v)
		return nil
	case league.FieldGoaliePointsForWin:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoaliePointsForWin(v)
		return nil
	case league.FieldEditKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEditKey(v)
		return nil
	case league.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	}
	return fmt.Errorf("unknown League field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *LeagueMutation) AddedFields() []string {
	var fields []string
	if m.addseason != nil {
		fields = append(fields, league.FieldSeason)
	}
	if m.addnum_forwards != nil {
		fields = append(fields, league.FieldNumForwards)
	}
	if m.addnum_defenders != nil {
		fields = append(fields, league.FieldNumDefenders)
	}
	if m.addnum_goalies != nil {
		fields = append(fields, league.FieldNumGoalies)
	}
	if m.addpoints_for_goal != nil {
		fields = append(fields, league.FieldPointsForGoal)
	}
	if m.addpoints_for_assist != nil {
		fields = append(fields, league.FieldPointsForAssist)
	}
	if m.addgoalie_points_for_shutout != nil {
		fields = append(fields, league.FieldGoaliePointsForShutout)
	}
	if m.addgoalie_points_for_win != nil {
		fields = append(fields, league.FieldGoaliePointsForWin)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *LeagueMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case league.FieldSeason:
		return m.AddedSeason()
	case league.FieldNumForwards:
		return m.AddedNumForwards()
	case league.FieldNumDefenders:
		return m.AddedNumDefenders()
	case league.FieldNumGoalies:
		return m.AddedNumGoalies()
	case league.FieldPointsForGoal:
		return m.AddedPointsForGoal()
	case league.FieldPointsForAssist:
		return m.AddedPointsForAssist()
	case league.FieldGoaliePointsForShutout:
		return m.AddedGoaliePointsForShutout()
	case league.FieldGoaliePointsForWin:
		return m.AddedGoaliePointsForWin()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *LeagueMutation) AddField(name string, value ent.Value) error {
	switch name {
	case league.FieldSeason:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSeason(v)
		return nil
	case league.FieldNumForwards:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNumForwards(v)
		return nil
	case league.FieldNumDefenders:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNumDefenders(v)
		return nil
	case league.FieldNumGoalies:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddNumGoalies(v)
		return nil
	case league.FieldPointsForGoal:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPointsForGoal(v)
		return nil
	case league.FieldPointsForAssist:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPointsForAssist(v)
		return nil
	case league.FieldGoaliePointsForShutout:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGoaliePointsForShutout(v)
		return nil
	case league.FieldGoaliePointsForWin:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGoaliePointsForWin(v)
		return nil
	}
	return fmt.Errorf("unknown League numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *LeagueMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *LeagueMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *LeagueMutation) ClearField(name string) error {
	return fmt.Errorf("unknown League nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *LeagueMutation) ResetField(name string) error {
	switch name {
	case league.FieldSeason:
		m.ResetSeason()
		return nil
	case league.FieldPublic:
		m.ResetPublic()
		return nil
	case league.FieldNumForwards:
		m.ResetNumForwards()
		return nil
	case league.FieldNumDefenders:
		m.ResetNumDefenders()
		return nil
	case league.FieldNumGoalies:
		m.ResetNumGoalies()
		return nil
	case league.FieldPointsForGoal:
		m.ResetPointsForGoal()
		return nil
	case league.FieldPointsForAssist:
		m.ResetPointsForAssist()
		return nil
	case league.FieldGoaliePointsForShutout:
		m.ResetGoaliePointsForShutout()
		return nil
	case league.FieldGoaliePointsForWin:
		m.ResetGoaliePointsForWin()
		return nil
	case league.FieldEditKey:
		m.ResetEditKey()
		return nil
	case league.FieldCode:
		m.ResetCode()
		return nil
	}
	return fmt.Errorf("unknown League field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *LeagueMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.entries != nil {
		edges = append(edges, league.EdgeEntries)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *LeagueMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case league.EdgeEntries:
		ids := make([]ent.Value, 0, len(m.entries))
		for id := range m.entries {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *LeagueMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedentries != nil {
		edges = append(edges, league.EdgeEntries)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *LeagueMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case league.EdgeEntries:
		ids := make([]ent.Value, 0, len(m.removedentries))
		for id := range m.removedentries {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *LeagueMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedentries {
		edges = append(edges, league.EdgeEntries)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *LeagueMutation) EdgeCleared(name string) bool {
	switch name {
	case league.EdgeEntries:
		return m.clearedentries
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *LeagueMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown League unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *LeagueMutation) ResetEdge(name string) error {
	switch name {
	case league.EdgeEntries:
		m.ResetEntries()
		return nil
	}
	return fmt.Errorf("unknown League edge %s", name)
}

// PlayerMutation represents an operation that mutates the Player nodes in the graph.
type PlayerMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	position      *player.Position
	goals         *int
	addgoals      *int
	assists       *int
	addassists    *int
	shutouts      *int
	addshutouts   *int
	wins          *int
	addwins       *int
	clearedFields map[string]struct{}
	team          *int
	clearedteam   bool
	done          bool
	oldValue      func(context.Context) (*Player, error)
	predicates    []predicate.Player
}

var _ ent.Mutation = (*PlayerMutation)(nil)

// playerOption allows management of the mutation configuration using functional options.
type playerOption func(*PlayerMutation)

// newPlayerMutation creates new mutation for the Player entity.
func newPlayerMutation(c config, op Op, opts ...playerOption) *PlayerMutation {
	m := &PlayerMutation{
		config:        c,
		op:            op,
		typ:           TypePlayer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPlayerID sets the ID field of the mutation.
func withPlayerID(id int) playerOption {
	return func(m *PlayerMutation) {
		var (
			err   error
			once  sync.Once
			value *Player
		)
		m.oldValue = func(ctx context.Context) (*Player, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Player.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPlayer sets the old Player of the mutation.
func withPlayer(node *Player) playerOption {
	return func(m *PlayerMutation) {
		m.oldValue = func(context.Context) (*Player, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PlayerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PlayerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PlayerMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PlayerMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Player.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *PlayerMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PlayerMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Player entity.
// If the Player object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlayerMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PlayerMutation) ResetName() {
	m.name = nil
}

// SetPosition sets the "position" field.
func (m *PlayerMutation) SetPosition(pl player.Position) {
	m.position = &pl
}

// Position returns the value of the "position" field in the mutation.
func (m *PlayerMutation) Position() (r player.Position, exists bool) {
	v := m.position
	if v == nil {
		return
	}
	return *v, true
}

// OldPosition returns the old "position" field's value of the Player entity.
// If the Player object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlayerMutation) OldPosition(ctx context.Context) (v player.Position, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPosition is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPosition requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPosition: %w", err)
	}
	return oldValue.Position, nil
}

// ResetPosition resets all changes to the "position" field.
func (m *PlayerMutation) ResetPosition() {
	m.position = nil
}

// SetGoals sets the "goals" field.
func (m *PlayerMutation) SetGoals(i int) {
	m.goals = &i
	m.addgoals = nil
}

// Goals returns the value of the "goals" field in the mutation.
func (m *PlayerMutation) Goals() (r int, exists bool) {
	v := m.goals
	if v == nil {
		return
	}
	return *v, true
}

// OldGoals returns the old "goals" field's value of the Player entity.
// If the Player object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlayerMutation) OldGoals(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGoals is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGoals requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGoals: %w", err)
	}
	return oldValue.Goals, nil
}

// AddGoals adds i to the "goals" field.
func (m *PlayerMutation) AddGoals(i int) {
	if m.addgoals != nil {
		*m.addgoals += i
	} else {
		m.addgoals = &i
	}
}

// AddedGoals returns the value that was added to the "goals" field in this mutation.
func (m *PlayerMutation) AddedGoals() (r int, exists bool) {
	v := m.addgoals
	if v == nil {
		return
	}
	return *v, true
}

// ResetGoals resets all changes to the "goals" field.
func (m *PlayerMutation) ResetGoals() {
	m.goals = nil
	m.addgoals = nil
}

// SetAssists sets the "assists" field.
func (m *PlayerMutation) SetAssists(i int) {
	m.assists = &i
	m.addassists = nil
}

// Assists returns the value of the "assists" field in the mutation.
func (m *PlayerMutation) Assists() (r int, exists bool) {
	v := m.assists
	if v == nil {
		return
	}
	return *v, true
}

// OldAssists returns the old "assists" field's value of the Player entity.
// If the Player object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlayerMutation) OldAssists(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAssists is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAssists requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAssists: %w", err)
	}
	return oldValue.Assists, nil
}

// AddAssists adds i to the "assists" field.
func (m *PlayerMutation) AddAssists(i int) {
	if m.addassists != nil {
		*m.addassists += i
	} else {
		m.addassists = &i
	}
}

// AddedAssists returns the value that was added to the "assists" field in this mutation.
func (m *PlayerMutation) AddedAssists() (r int, exists bool) {
	v := m.addassists
	if v == nil {
		return
	}
	return *v, true
}

// ResetAssists resets all changes to the "assists" field.
func (m *PlayerMutation) ResetAssists() {
	m.assists = nil
	m.addassists = nil
}

// SetShutouts sets the "shutouts" field.
func (m *PlayerMutation) SetShutouts(i int) {
	m.shutouts = &i
	m.addshutouts = nil
}

// Shutouts returns the value of the "shutouts" field in the mutation.
func (m *PlayerMutation) Shutouts() (r int, exists bool) {
	v := m.shutouts
	if v == nil {
		return
	}
	return *v, true
}

// OldShutouts returns the old "shutouts" field's value of the Player entity.
// If the Player object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlayerMutation) OldShutouts(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldShutouts is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldShutouts requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldShutouts: %w", err)
	}
	return oldValue.Shutouts, nil
}

// AddShutouts adds i to the "shutouts" field.
func (m *PlayerMutation) AddShutouts(i int) {
	if m.addshutouts != nil {
		*m.addshutouts += i
	} else {
		m.addshutouts = &i
	}
}

// AddedShutouts returns the value that was added to the "shutouts" field in this mutation.
func (m *PlayerMutation) AddedShutouts() (r int, exists bool) {
	v := m.addshutouts
	if v == nil {
		return
	}
	return *v, true
}

// ResetShutouts resets all changes to the "shutouts" field.
func (m *PlayerMutation) ResetShutouts() {
	m.shutouts = nil
	m.addshutouts = nil
}

// SetWins sets the "wins" field.
func (m *PlayerMutation) SetWins(i int) {
	m.wins = &i
	m.addwins = nil
}

// Wins returns the value of the "wins" field in the mutation.
func (m *PlayerMutation) Wins() (r int, exists bool) {
	v := m.wins
	if v == nil {
		return
	}
	return *v, true
}

// OldWins returns the old "wins" field's value of the Player entity.
// If the Player object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PlayerMutation) OldWins(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWins is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWins requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWins: %w", err)
	}
	return oldValue.Wins, nil
}

// AddWins adds i to the "wins" field.
func (m *PlayerMutation) AddWins(i int) {
	if m.addwins != nil {
		*m.addwins += i
	} else {
		m.addwins = &i
	}
}

// AddedWins returns the value that was added to the "wins" field in this mutation.
func (m *PlayerMutation) AddedWins() (r int, exists bool) {
	v := m.addwins
	if v == nil {
		return
	}
	return *v, true
}

// ResetWins resets all changes to the "wins" field.
func (m *PlayerMutation) ResetWins() {
	m.wins = nil
	m.addwins = nil
}

// SetTeamID sets the "team" edge to the Team entity by id.
func (m *PlayerMutation) SetTeamID(id int) {
	m.team = &id
}

// ClearTeam clears the "team" edge to the Team entity.
func (m *PlayerMutation) ClearTeam() {
	m.clearedteam = true
}

// TeamCleared reports if the "team" edge to the Team entity was cleared.
func (m *PlayerMutation) TeamCleared() bool {
	return m.clearedteam
}

// TeamID returns the "team" edge ID in the mutation.
func (m *PlayerMutation) TeamID() (id int, exists bool) {
	if m.team != nil {
		return *m.team, true
	}
	return
}

// TeamIDs returns the "team" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TeamID instead. It exists only for internal usage by the builders.
func (m *PlayerMutation) TeamIDs() (ids []int) {
	if id := m.team; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTeam resets all changes to the "team" edge.
func (m *PlayerMutation) ResetTeam() {
	m.team = nil
	m.clearedteam = false
}

// Where appends a list predicates to the PlayerMutation builder.
func (m *PlayerMutation) Where(ps ...predicate.Player) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PlayerMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PlayerMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Player, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PlayerMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PlayerMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Player).
func (m *PlayerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PlayerMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.name != nil {
		fields = append(fields, player.FieldName)
	}
	if m.position != nil {
		fields = append(fields, player.FieldPosition)
	}
	if m.goals != nil {
		fields = append(fields, player.FieldGoals)
	}
	if m.assists != nil {
		fields = append(fields, player.FieldAssists)
	}
	if m.shutouts != nil {
		fields = append(fields, player.FieldShutouts)
	}
	if m.wins != nil {
		fields = append(fields, player.FieldWins)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PlayerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case player.FieldName:
		return m.Name()
	case player.FieldPosition:
		return m.Position()
	case player.FieldGoals:
		return m.Goals()
	case player.FieldAssists:
		return m.Assists()
	case player.FieldShutouts:
		return m.Shutouts()
	case player.FieldWins:
		return m.Wins()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PlayerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case player.FieldName:
		return m.OldName(ctx)
	case player.FieldPosition:
		return m.OldPosition(ctx)
	case player.FieldGoals:
		return m.OldGoals(ctx)
	case player.FieldAssists:
		return m.OldAssists(ctx)
	case player.FieldShutouts:
		return m.OldShutouts(ctx)
	case player.FieldWins:
		return m.OldWins(ctx)
	}
	return nil, fmt.Errorf("unknown Player field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlayerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case player.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case player.FieldPosition:
		v, ok := value.(player.Position)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPosition(v)
		return nil
	case player.FieldGoals:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGoals(v)
		return nil
	case player.FieldAssists:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAssists(v)
		return nil
	case player.FieldShutouts:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetShutouts(v)
		return nil
	case player.FieldWins:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWins(v)
		return nil
	}
	return fmt.Errorf("unknown Player field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PlayerMutation) AddedFields() []string {
	var fields []string
	if m.addgoals != nil {
		fields = append(fields, player.FieldGoals)
	}
	if m.addassists != nil {
		fields = append(fields, player.FieldAssists)
	}
	if m.addshutouts != nil {
		fields = append(fields, player.FieldShutouts)
	}
	if m.addwins != nil {
		fields = append(fields, player.FieldWins)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PlayerMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case player.FieldGoals:
		return m.AddedGoals()
	case player.FieldAssists:
		return m.AddedAssists()
	case player.FieldShutouts:
		return m.AddedShutouts()
	case player.FieldWins:
		return m.AddedWins()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PlayerMutation) AddField(name string, value ent.Value) error {
	switch name {
	case player.FieldGoals:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddGoals(v)
		return nil
	case player.FieldAssists:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAssists(v)
		return nil
	case player.FieldShutouts:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddShutouts(v)
		return nil
	case player.FieldWins:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWins(v)
		return nil
	}
	return fmt.Errorf("unknown Player numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PlayerMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PlayerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PlayerMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Player nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PlayerMutation) ResetField(name string) error {
	switch name {
	case player.FieldName:
		m.ResetName()
		return nil
	case player.FieldPosition:
		m.ResetPosition()
		return nil
	case player.FieldGoals:
		m.ResetGoals()
		return nil
	case player.FieldAssists:
		m.ResetAssists()
		return nil
	case player.FieldShutouts:
		m.ResetShutouts()
		return nil
	case player.FieldWins:
		m.ResetWins()
		return nil
	}
	return fmt.Errorf("unknown Player field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PlayerMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.team != nil {
		edges = append(edges, player.EdgeTeam)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PlayerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case player.EdgeTeam:
		if id := m.team; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PlayerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PlayerMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PlayerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedteam {
		edges = append(edges, player.EdgeTeam)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PlayerMutation) EdgeCleared(name string) bool {
	switch name {
	case player.EdgeTeam:
		return m.clearedteam
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PlayerMutation) ClearEdge(name string) error {
	switch name {
	case player.EdgeTeam:
		m.ClearTeam()
		return nil
	}
	return fmt.Errorf("unknown Player unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PlayerMutation) ResetEdge(name string) error {
	switch name {
	case player.EdgeTeam:
		m.ResetTeam()
		return nil
	}
	return fmt.Errorf("unknown Player edge %s", name)
}

// TeamMutation represents an operation that mutates the Team nodes in the graph.
type TeamMutation struct {
	config
	op             Op
	typ            string
	id             *int
	name           *string
	logo_filepath  *string
	eliminated     *bool
	clearedFields  map[string]struct{}
	players        map[int]struct{}
	removedplayers map[int]struct{}
	clearedplayers bool
	done           bool
	oldValue       func(context.Context) (*Team, error)
	predicates     []predicate.Team
}

var _ ent.Mutation = (*TeamMutation)(nil)

// teamOption allows management of the mutation configuration using functional options.
type teamOption func(*TeamMutation)

// newTeamMutation creates new mutation for the Team entity.
func newTeamMutation(c config, op Op, opts ...teamOption) *TeamMutation {
	m := &TeamMutation{
		config:        c,
		op:            op,
		typ:           TypeTeam,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTeamID sets the ID field of the mutation.
func withTeamID(id int) teamOption {
	return func(m *TeamMutation) {
		var (
			err   error
			once  sync.Once
			value *Team
		)
		m.oldValue = func(ctx context.Context) (*Team, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Team.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTeam sets the old Team of the mutation.
func withTeam(node *Team) teamOption {
	return func(m *TeamMutation) {
		m.oldValue = func(context.Context) (*Team, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TeamMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TeamMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TeamMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TeamMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Team.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *TeamMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TeamMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Team entity.
// If the Team object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeamMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TeamMutation) ResetName() {
	m.name = nil
}

// SetLogoFilepath sets the "logo_filepath" field.
func (m *TeamMutation) SetLogoFilepath(s string) {
	m.logo_filepath = &s
}

// LogoFilepath returns the value of the "logo_filepath" field in the mutation.
func (m *TeamMutation) LogoFilepath() (r string, exists bool) {
	v := m.logo_filepath
	if v == nil {
		return
	}
	return *v, true
}

// OldLogoFilepath returns the old "logo_filepath" field's value of the Team entity.
// If the Team object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeamMutation) OldLogoFilepath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLogoFilepath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLogoFilepath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLogoFilepath: %w", err)
	}
	return oldValue.LogoFilepath, nil
}

// ResetLogoFilepath resets all changes to the "logo_filepath" field.
func (m *TeamMutation) ResetLogoFilepath() {
	m.logo_filepath = nil
}

// SetEliminated sets the "eliminated" field.
func (m *TeamMutation) SetEliminated(b bool) {
	m.eliminated = &b
}

// Eliminated returns the value of the "eliminated" field in the mutation.
func (m *TeamMutation) Eliminated() (r bool, exists bool) {
	v := m.eliminated
	if v == nil {
		return
	}
	return *v, true
}

// OldEliminated returns the old "eliminated" field's value of the Team entity.
// If the Team object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TeamMutation) OldEliminated(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEliminated is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEliminated requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEliminated: %w", err)
	}
	return oldValue.Eliminated, nil
}

// ResetEliminated resets all changes to the "eliminated" field.
func (m *TeamMutation) ResetEliminated() {
	m.eliminated = nil
}

// AddPlayerIDs adds the "players" edge to the Player entity by ids.
func (m *TeamMutation) AddPlayerIDs(ids ...int) {
	if m.players == nil {
		m.players = make(map[int]struct{})
	}
	for i := range ids {
		m.players[ids[i]] = struct{}{}
	}
}

// ClearPlayers clears the "players" edge to the Player entity.
func (m *TeamMutation) ClearPlayers() {
	m.clearedplayers = true
}

// PlayersCleared reports if the "players" edge to the Player entity was cleared.
func (m *TeamMutation) PlayersCleared() bool {
	return m.clearedplayers
}

// RemovePlayerIDs removes the "players" edge to the Player entity by IDs.
func (m *TeamMutation) RemovePlayerIDs(ids ...int) {
	if m.removedplayers == nil {
		m.removedplayers = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.players, ids[i])
		m.removedplayers[ids[i]] = struct{}{}
	}
}

// RemovedPlayers returns the removed IDs of the "players" edge to the Player entity.
func (m *TeamMutation) RemovedPlayersIDs() (ids []int) {
	for id := range m.removedplayers {
		ids = append(ids, id)
	}
	return
}

// PlayersIDs returns the "players" edge IDs in the mutation.
func (m *TeamMutation) PlayersIDs() (ids []int) {
	for id := range m.players {
		ids = append(ids, id)
	}
	return
}

// ResetPlayers resets all changes to the "players" edge.
func (m *TeamMutation) ResetPlayers() {
	m.players = nil
	m.clearedplayers = false
	m.removedplayers = nil
}

// Where appends a list predicates to the TeamMutation builder.
func (m *TeamMutation) Where(ps ...predicate.Team) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TeamMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TeamMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Team, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TeamMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TeamMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Team).
func (m *TeamMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TeamMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, team.FieldName)
	}
	if m.logo_filepath != nil {
		fields = append(fields, team.FieldLogoFilepath)
	}
	if m.eliminated != nil {
		fields = append(fields, team.FieldEliminated)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TeamMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case team.FieldName:
		return m.Name()
	case team.FieldLogoFilepath:
		return m.LogoFilepath()
	case team.FieldEliminated:
		return m.Eliminated()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TeamMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case team.FieldName:
		return m.OldName(ctx)
	case team.FieldLogoFilepath:
		return m.OldLogoFilepath(ctx)
	case team.FieldEliminated:
		return m.OldEliminated(ctx)
	}
	return nil, fmt.Errorf("unknown Team field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TeamMutation) SetField(name string, value ent.Value) error {
	switch name {
	case team.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case team.FieldLogoFilepath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLogoFilepath(v)
		return nil
	case team.FieldEliminated:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEliminated(v)
		return nil
	}
	return fmt.Errorf("unknown Team field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TeamMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TeamMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TeamMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Team numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TeamMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TeamMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TeamMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Team nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TeamMutation) ResetField(name string) error {
	switch name {
	case team.FieldName:
		m.ResetName()
		return nil
	case team.FieldLogoFilepath:
		m.ResetLogoFilepath()
		return nil
	case team.FieldEliminated:
		m.ResetEliminated()
		return nil
	}
	return fmt.Errorf("unknown Team field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TeamMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.players != nil {
		edges = append(edges, team.EdgePlayers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TeamMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case team.EdgePlayers:
		ids := make([]ent.Value, 0, len(m.players))
		for id := range m.players {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TeamMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedplayers != nil {
		edges = append(edges, team.EdgePlayers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TeamMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case team.EdgePlayers:
		ids := make([]ent.Value, 0, len(m.removedplayers))
		for id := range m.removedplayers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TeamMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedplayers {
		edges = append(edges, team.EdgePlayers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TeamMutation) EdgeCleared(name string) bool {
	switch name {
	case team.EdgePlayers:
		return m.clearedplayers
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TeamMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Team unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TeamMutation) ResetEdge(name string) error {
	switch name {
	case team.EdgePlayers:
		m.ResetPlayers()
		return nil
	}
	return fmt.Errorf("unknown Team edge %s", name)
}
