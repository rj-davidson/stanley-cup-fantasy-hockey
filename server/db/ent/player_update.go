// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/player"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/predicate"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/team"
)

// PlayerUpdate is the builder for updating Player entities.
type PlayerUpdate struct {
	config
	hooks    []Hook
	mutation *PlayerMutation
}

// Where appends a list predicates to the PlayerUpdate builder.
func (pu *PlayerUpdate) Where(ps ...predicate.Player) *PlayerUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *PlayerUpdate) SetName(s string) *PlayerUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetPosition sets the "position" field.
func (pu *PlayerUpdate) SetPosition(pl player.Position) *PlayerUpdate {
	pu.mutation.SetPosition(pl)
	return pu
}

// SetGoals sets the "goals" field.
func (pu *PlayerUpdate) SetGoals(i int) *PlayerUpdate {
	pu.mutation.ResetGoals()
	pu.mutation.SetGoals(i)
	return pu
}

// AddGoals adds i to the "goals" field.
func (pu *PlayerUpdate) AddGoals(i int) *PlayerUpdate {
	pu.mutation.AddGoals(i)
	return pu
}

// SetAssists sets the "assists" field.
func (pu *PlayerUpdate) SetAssists(i int) *PlayerUpdate {
	pu.mutation.ResetAssists()
	pu.mutation.SetAssists(i)
	return pu
}

// AddAssists adds i to the "assists" field.
func (pu *PlayerUpdate) AddAssists(i int) *PlayerUpdate {
	pu.mutation.AddAssists(i)
	return pu
}

// SetShutouts sets the "shutouts" field.
func (pu *PlayerUpdate) SetShutouts(i int) *PlayerUpdate {
	pu.mutation.ResetShutouts()
	pu.mutation.SetShutouts(i)
	return pu
}

// AddShutouts adds i to the "shutouts" field.
func (pu *PlayerUpdate) AddShutouts(i int) *PlayerUpdate {
	pu.mutation.AddShutouts(i)
	return pu
}

// SetWins sets the "wins" field.
func (pu *PlayerUpdate) SetWins(i int) *PlayerUpdate {
	pu.mutation.ResetWins()
	pu.mutation.SetWins(i)
	return pu
}

// AddWins adds i to the "wins" field.
func (pu *PlayerUpdate) AddWins(i int) *PlayerUpdate {
	pu.mutation.AddWins(i)
	return pu
}

// SetTeamID sets the "team" edge to the Team entity by ID.
func (pu *PlayerUpdate) SetTeamID(id int) *PlayerUpdate {
	pu.mutation.SetTeamID(id)
	return pu
}

// SetNillableTeamID sets the "team" edge to the Team entity by ID if the given value is not nil.
func (pu *PlayerUpdate) SetNillableTeamID(id *int) *PlayerUpdate {
	if id != nil {
		pu = pu.SetTeamID(*id)
	}
	return pu
}

// SetTeam sets the "team" edge to the Team entity.
func (pu *PlayerUpdate) SetTeam(t *Team) *PlayerUpdate {
	return pu.SetTeamID(t.ID)
}

// Mutation returns the PlayerMutation object of the builder.
func (pu *PlayerUpdate) Mutation() *PlayerMutation {
	return pu.mutation
}

// ClearTeam clears the "team" edge to the Team entity.
func (pu *PlayerUpdate) ClearTeam() *PlayerUpdate {
	pu.mutation.ClearTeam()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PlayerUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PlayerUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PlayerUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PlayerUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PlayerUpdate) check() error {
	if v, ok := pu.mutation.Position(); ok {
		if err := player.PositionValidator(v); err != nil {
			return &ValidationError{Name: "position", err: fmt.Errorf(`ent: validator failed for field "Player.position": %w`, err)}
		}
	}
	return nil
}

func (pu *PlayerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(player.Table, player.Columns, sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(player.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Position(); ok {
		_spec.SetField(player.FieldPosition, field.TypeEnum, value)
	}
	if value, ok := pu.mutation.Goals(); ok {
		_spec.SetField(player.FieldGoals, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedGoals(); ok {
		_spec.AddField(player.FieldGoals, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Assists(); ok {
		_spec.SetField(player.FieldAssists, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedAssists(); ok {
		_spec.AddField(player.FieldAssists, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Shutouts(); ok {
		_spec.SetField(player.FieldShutouts, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedShutouts(); ok {
		_spec.AddField(player.FieldShutouts, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Wins(); ok {
		_spec.SetField(player.FieldWins, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedWins(); ok {
		_spec.AddField(player.FieldWins, field.TypeInt, value)
	}
	if pu.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   player.TeamTable,
			Columns: []string{player.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   player.TeamTable,
			Columns: []string{player.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{player.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PlayerUpdateOne is the builder for updating a single Player entity.
type PlayerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PlayerMutation
}

// SetName sets the "name" field.
func (puo *PlayerUpdateOne) SetName(s string) *PlayerUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetPosition sets the "position" field.
func (puo *PlayerUpdateOne) SetPosition(pl player.Position) *PlayerUpdateOne {
	puo.mutation.SetPosition(pl)
	return puo
}

// SetGoals sets the "goals" field.
func (puo *PlayerUpdateOne) SetGoals(i int) *PlayerUpdateOne {
	puo.mutation.ResetGoals()
	puo.mutation.SetGoals(i)
	return puo
}

// AddGoals adds i to the "goals" field.
func (puo *PlayerUpdateOne) AddGoals(i int) *PlayerUpdateOne {
	puo.mutation.AddGoals(i)
	return puo
}

// SetAssists sets the "assists" field.
func (puo *PlayerUpdateOne) SetAssists(i int) *PlayerUpdateOne {
	puo.mutation.ResetAssists()
	puo.mutation.SetAssists(i)
	return puo
}

// AddAssists adds i to the "assists" field.
func (puo *PlayerUpdateOne) AddAssists(i int) *PlayerUpdateOne {
	puo.mutation.AddAssists(i)
	return puo
}

// SetShutouts sets the "shutouts" field.
func (puo *PlayerUpdateOne) SetShutouts(i int) *PlayerUpdateOne {
	puo.mutation.ResetShutouts()
	puo.mutation.SetShutouts(i)
	return puo
}

// AddShutouts adds i to the "shutouts" field.
func (puo *PlayerUpdateOne) AddShutouts(i int) *PlayerUpdateOne {
	puo.mutation.AddShutouts(i)
	return puo
}

// SetWins sets the "wins" field.
func (puo *PlayerUpdateOne) SetWins(i int) *PlayerUpdateOne {
	puo.mutation.ResetWins()
	puo.mutation.SetWins(i)
	return puo
}

// AddWins adds i to the "wins" field.
func (puo *PlayerUpdateOne) AddWins(i int) *PlayerUpdateOne {
	puo.mutation.AddWins(i)
	return puo
}

// SetTeamID sets the "team" edge to the Team entity by ID.
func (puo *PlayerUpdateOne) SetTeamID(id int) *PlayerUpdateOne {
	puo.mutation.SetTeamID(id)
	return puo
}

// SetNillableTeamID sets the "team" edge to the Team entity by ID if the given value is not nil.
func (puo *PlayerUpdateOne) SetNillableTeamID(id *int) *PlayerUpdateOne {
	if id != nil {
		puo = puo.SetTeamID(*id)
	}
	return puo
}

// SetTeam sets the "team" edge to the Team entity.
func (puo *PlayerUpdateOne) SetTeam(t *Team) *PlayerUpdateOne {
	return puo.SetTeamID(t.ID)
}

// Mutation returns the PlayerMutation object of the builder.
func (puo *PlayerUpdateOne) Mutation() *PlayerMutation {
	return puo.mutation
}

// ClearTeam clears the "team" edge to the Team entity.
func (puo *PlayerUpdateOne) ClearTeam() *PlayerUpdateOne {
	puo.mutation.ClearTeam()
	return puo
}

// Where appends a list predicates to the PlayerUpdate builder.
func (puo *PlayerUpdateOne) Where(ps ...predicate.Player) *PlayerUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PlayerUpdateOne) Select(field string, fields ...string) *PlayerUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Player entity.
func (puo *PlayerUpdateOne) Save(ctx context.Context) (*Player, error) {
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PlayerUpdateOne) SaveX(ctx context.Context) *Player {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PlayerUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PlayerUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PlayerUpdateOne) check() error {
	if v, ok := puo.mutation.Position(); ok {
		if err := player.PositionValidator(v); err != nil {
			return &ValidationError{Name: "position", err: fmt.Errorf(`ent: validator failed for field "Player.position": %w`, err)}
		}
	}
	return nil
}

func (puo *PlayerUpdateOne) sqlSave(ctx context.Context) (_node *Player, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(player.Table, player.Columns, sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Player.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, player.FieldID)
		for _, f := range fields {
			if !player.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != player.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(player.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Position(); ok {
		_spec.SetField(player.FieldPosition, field.TypeEnum, value)
	}
	if value, ok := puo.mutation.Goals(); ok {
		_spec.SetField(player.FieldGoals, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedGoals(); ok {
		_spec.AddField(player.FieldGoals, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Assists(); ok {
		_spec.SetField(player.FieldAssists, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedAssists(); ok {
		_spec.AddField(player.FieldAssists, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Shutouts(); ok {
		_spec.SetField(player.FieldShutouts, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedShutouts(); ok {
		_spec.AddField(player.FieldShutouts, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Wins(); ok {
		_spec.SetField(player.FieldWins, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedWins(); ok {
		_spec.AddField(player.FieldWins, field.TypeInt, value)
	}
	if puo.mutation.TeamCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   player.TeamTable,
			Columns: []string{player.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   player.TeamTable,
			Columns: []string{player.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Player{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{player.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
