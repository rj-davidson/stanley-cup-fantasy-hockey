// Code generated by ent, DO NOT EDIT.

package entry

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Entry {
	return predicate.Entry(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Entry {
	return predicate.Entry(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Entry {
	return predicate.Entry(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Entry {
	return predicate.Entry(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Entry {
	return predicate.Entry(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Entry {
	return predicate.Entry(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Entry {
	return predicate.Entry(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Entry {
	return predicate.Entry(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Entry {
	return predicate.Entry(sql.FieldLTE(FieldID, id))
}

// OwnerName applies equality check predicate on the "owner_name" field. It's identical to OwnerNameEQ.
func OwnerName(v string) predicate.Entry {
	return predicate.Entry(sql.FieldEQ(FieldOwnerName, v))
}

// PointTotal applies equality check predicate on the "point_total" field. It's identical to PointTotalEQ.
func PointTotal(v int) predicate.Entry {
	return predicate.Entry(sql.FieldEQ(FieldPointTotal, v))
}

// OwnerNameEQ applies the EQ predicate on the "owner_name" field.
func OwnerNameEQ(v string) predicate.Entry {
	return predicate.Entry(sql.FieldEQ(FieldOwnerName, v))
}

// OwnerNameNEQ applies the NEQ predicate on the "owner_name" field.
func OwnerNameNEQ(v string) predicate.Entry {
	return predicate.Entry(sql.FieldNEQ(FieldOwnerName, v))
}

// OwnerNameIn applies the In predicate on the "owner_name" field.
func OwnerNameIn(vs ...string) predicate.Entry {
	return predicate.Entry(sql.FieldIn(FieldOwnerName, vs...))
}

// OwnerNameNotIn applies the NotIn predicate on the "owner_name" field.
func OwnerNameNotIn(vs ...string) predicate.Entry {
	return predicate.Entry(sql.FieldNotIn(FieldOwnerName, vs...))
}

// OwnerNameGT applies the GT predicate on the "owner_name" field.
func OwnerNameGT(v string) predicate.Entry {
	return predicate.Entry(sql.FieldGT(FieldOwnerName, v))
}

// OwnerNameGTE applies the GTE predicate on the "owner_name" field.
func OwnerNameGTE(v string) predicate.Entry {
	return predicate.Entry(sql.FieldGTE(FieldOwnerName, v))
}

// OwnerNameLT applies the LT predicate on the "owner_name" field.
func OwnerNameLT(v string) predicate.Entry {
	return predicate.Entry(sql.FieldLT(FieldOwnerName, v))
}

// OwnerNameLTE applies the LTE predicate on the "owner_name" field.
func OwnerNameLTE(v string) predicate.Entry {
	return predicate.Entry(sql.FieldLTE(FieldOwnerName, v))
}

// OwnerNameContains applies the Contains predicate on the "owner_name" field.
func OwnerNameContains(v string) predicate.Entry {
	return predicate.Entry(sql.FieldContains(FieldOwnerName, v))
}

// OwnerNameHasPrefix applies the HasPrefix predicate on the "owner_name" field.
func OwnerNameHasPrefix(v string) predicate.Entry {
	return predicate.Entry(sql.FieldHasPrefix(FieldOwnerName, v))
}

// OwnerNameHasSuffix applies the HasSuffix predicate on the "owner_name" field.
func OwnerNameHasSuffix(v string) predicate.Entry {
	return predicate.Entry(sql.FieldHasSuffix(FieldOwnerName, v))
}

// OwnerNameEqualFold applies the EqualFold predicate on the "owner_name" field.
func OwnerNameEqualFold(v string) predicate.Entry {
	return predicate.Entry(sql.FieldEqualFold(FieldOwnerName, v))
}

// OwnerNameContainsFold applies the ContainsFold predicate on the "owner_name" field.
func OwnerNameContainsFold(v string) predicate.Entry {
	return predicate.Entry(sql.FieldContainsFold(FieldOwnerName, v))
}

// PointTotalEQ applies the EQ predicate on the "point_total" field.
func PointTotalEQ(v int) predicate.Entry {
	return predicate.Entry(sql.FieldEQ(FieldPointTotal, v))
}

// PointTotalNEQ applies the NEQ predicate on the "point_total" field.
func PointTotalNEQ(v int) predicate.Entry {
	return predicate.Entry(sql.FieldNEQ(FieldPointTotal, v))
}

// PointTotalIn applies the In predicate on the "point_total" field.
func PointTotalIn(vs ...int) predicate.Entry {
	return predicate.Entry(sql.FieldIn(FieldPointTotal, vs...))
}

// PointTotalNotIn applies the NotIn predicate on the "point_total" field.
func PointTotalNotIn(vs ...int) predicate.Entry {
	return predicate.Entry(sql.FieldNotIn(FieldPointTotal, vs...))
}

// PointTotalGT applies the GT predicate on the "point_total" field.
func PointTotalGT(v int) predicate.Entry {
	return predicate.Entry(sql.FieldGT(FieldPointTotal, v))
}

// PointTotalGTE applies the GTE predicate on the "point_total" field.
func PointTotalGTE(v int) predicate.Entry {
	return predicate.Entry(sql.FieldGTE(FieldPointTotal, v))
}

// PointTotalLT applies the LT predicate on the "point_total" field.
func PointTotalLT(v int) predicate.Entry {
	return predicate.Entry(sql.FieldLT(FieldPointTotal, v))
}

// PointTotalLTE applies the LTE predicate on the "point_total" field.
func PointTotalLTE(v int) predicate.Entry {
	return predicate.Entry(sql.FieldLTE(FieldPointTotal, v))
}

// HasLeague applies the HasEdge predicate on the "league" edge.
func HasLeague() predicate.Entry {
	return predicate.Entry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, LeagueTable, LeagueColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasLeagueWith applies the HasEdge predicate on the "league" edge with a given conditions (other predicates).
func HasLeagueWith(preds ...predicate.League) predicate.Entry {
	return predicate.Entry(func(s *sql.Selector) {
		step := newLeagueStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasForwards applies the HasEdge predicate on the "forwards" edge.
func HasForwards() predicate.Entry {
	return predicate.Entry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ForwardsTable, ForwardsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasForwardsWith applies the HasEdge predicate on the "forwards" edge with a given conditions (other predicates).
func HasForwardsWith(preds ...predicate.Player) predicate.Entry {
	return predicate.Entry(func(s *sql.Selector) {
		step := newForwardsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDefenders applies the HasEdge predicate on the "defenders" edge.
func HasDefenders() predicate.Entry {
	return predicate.Entry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DefendersTable, DefendersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDefendersWith applies the HasEdge predicate on the "defenders" edge with a given conditions (other predicates).
func HasDefendersWith(preds ...predicate.Player) predicate.Entry {
	return predicate.Entry(func(s *sql.Selector) {
		step := newDefendersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGoalies applies the HasEdge predicate on the "goalies" edge.
func HasGoalies() predicate.Entry {
	return predicate.Entry(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, GoaliesTable, GoaliesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGoaliesWith applies the HasEdge predicate on the "goalies" edge with a given conditions (other predicates).
func HasGoaliesWith(preds ...predicate.Player) predicate.Entry {
	return predicate.Entry(func(s *sql.Selector) {
		step := newGoaliesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Entry) predicate.Entry {
	return predicate.Entry(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Entry) predicate.Entry {
	return predicate.Entry(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Entry) predicate.Entry {
	return predicate.Entry(func(s *sql.Selector) {
		p(s.Not())
	})
}
