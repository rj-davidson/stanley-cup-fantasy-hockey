// Code generated by ent, DO NOT EDIT.

package entry

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the entry type in the database.
	Label = "entry"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOwnerName holds the string denoting the owner_name field in the database.
	FieldOwnerName = "owner_name"
	// FieldPointTotal holds the string denoting the point_total field in the database.
	FieldPointTotal = "point_total"
	// EdgeLeague holds the string denoting the league edge name in mutations.
	EdgeLeague = "league"
	// EdgeForwards holds the string denoting the forwards edge name in mutations.
	EdgeForwards = "forwards"
	// EdgeDefenders holds the string denoting the defenders edge name in mutations.
	EdgeDefenders = "defenders"
	// EdgeGoalies holds the string denoting the goalies edge name in mutations.
	EdgeGoalies = "goalies"
	// Table holds the table name of the entry in the database.
	Table = "entries"
	// LeagueTable is the table that holds the league relation/edge.
	LeagueTable = "entries"
	// LeagueInverseTable is the table name for the League entity.
	// It exists in this package in order to avoid circular dependency with the "league" package.
	LeagueInverseTable = "leagues"
	// LeagueColumn is the table column denoting the league relation/edge.
	LeagueColumn = "league_entries"
	// ForwardsTable is the table that holds the forwards relation/edge.
	ForwardsTable = "players"
	// ForwardsInverseTable is the table name for the Player entity.
	// It exists in this package in order to avoid circular dependency with the "player" package.
	ForwardsInverseTable = "players"
	// ForwardsColumn is the table column denoting the forwards relation/edge.
	ForwardsColumn = "entry_forwards"
	// DefendersTable is the table that holds the defenders relation/edge.
	DefendersTable = "players"
	// DefendersInverseTable is the table name for the Player entity.
	// It exists in this package in order to avoid circular dependency with the "player" package.
	DefendersInverseTable = "players"
	// DefendersColumn is the table column denoting the defenders relation/edge.
	DefendersColumn = "entry_defenders"
	// GoaliesTable is the table that holds the goalies relation/edge.
	GoaliesTable = "players"
	// GoaliesInverseTable is the table name for the Player entity.
	// It exists in this package in order to avoid circular dependency with the "player" package.
	GoaliesInverseTable = "players"
	// GoaliesColumn is the table column denoting the goalies relation/edge.
	GoaliesColumn = "entry_goalies"
)

// Columns holds all SQL columns for entry fields.
var Columns = []string{
	FieldID,
	FieldOwnerName,
	FieldPointTotal,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "entries"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"league_entries",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Entry queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByOwnerName orders the results by the owner_name field.
func ByOwnerName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerName, opts...).ToFunc()
}

// ByPointTotal orders the results by the point_total field.
func ByPointTotal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPointTotal, opts...).ToFunc()
}

// ByLeagueField orders the results by league field.
func ByLeagueField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLeagueStep(), sql.OrderByField(field, opts...))
	}
}

// ByForwardsCount orders the results by forwards count.
func ByForwardsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newForwardsStep(), opts...)
	}
}

// ByForwards orders the results by forwards terms.
func ByForwards(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newForwardsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDefendersCount orders the results by defenders count.
func ByDefendersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDefendersStep(), opts...)
	}
}

// ByDefenders orders the results by defenders terms.
func ByDefenders(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDefendersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGoaliesCount orders the results by goalies count.
func ByGoaliesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGoaliesStep(), opts...)
	}
}

// ByGoalies orders the results by goalies terms.
func ByGoalies(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGoaliesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newLeagueStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LeagueInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, LeagueTable, LeagueColumn),
	)
}
func newForwardsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ForwardsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ForwardsTable, ForwardsColumn),
	)
}
func newDefendersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DefendersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DefendersTable, DefendersColumn),
	)
}
func newGoaliesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GoaliesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, GoaliesTable, GoaliesColumn),
	)
}
