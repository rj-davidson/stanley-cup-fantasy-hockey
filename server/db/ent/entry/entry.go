// Code generated by ent, DO NOT EDIT.

package entry

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the entry type in the database.
	Label = "entry"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOwnerName holds the string denoting the owner_name field in the database.
	FieldOwnerName = "owner_name"
	// EdgeLeague holds the string denoting the league edge name in mutations.
	EdgeLeague = "league"
	// EdgePlayers holds the string denoting the players edge name in mutations.
	EdgePlayers = "players"
	// Table holds the table name of the entry in the database.
	Table = "entries"
	// LeagueTable is the table that holds the league relation/edge.
	LeagueTable = "entries"
	// LeagueInverseTable is the table name for the League entity.
	// It exists in this package in order to avoid circular dependency with the "league" package.
	LeagueInverseTable = "leagues"
	// LeagueColumn is the table column denoting the league relation/edge.
	LeagueColumn = "league_entries"
	// PlayersTable is the table that holds the players relation/edge. The primary key declared below.
	PlayersTable = "entry_players"
	// PlayersInverseTable is the table name for the Player entity.
	// It exists in this package in order to avoid circular dependency with the "player" package.
	PlayersInverseTable = "players"
)

// Columns holds all SQL columns for entry fields.
var Columns = []string{
	FieldID,
	FieldOwnerName,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "entries"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"league_entries",
}

var (
	// PlayersPrimaryKey and PlayersColumn2 are the table columns denoting the
	// primary key for the players relation (M2M).
	PlayersPrimaryKey = []string{"entry_id", "player_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Entry queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByOwnerName orders the results by the owner_name field.
func ByOwnerName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOwnerName, opts...).ToFunc()
}

// ByLeagueField orders the results by league field.
func ByLeagueField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLeagueStep(), sql.OrderByField(field, opts...))
	}
}

// ByPlayersCount orders the results by players count.
func ByPlayersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPlayersStep(), opts...)
	}
}

// ByPlayers orders the results by players terms.
func ByPlayers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlayersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newLeagueStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LeagueInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, LeagueTable, LeagueColumn),
	)
}
func newPlayersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlayersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, PlayersTable, PlayersPrimaryKey...),
	)
}
