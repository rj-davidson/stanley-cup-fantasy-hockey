// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/game"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/goaliestats"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/player"
)

// GoalieStatsCreate is the builder for creating a GoalieStats entity.
type GoalieStatsCreate struct {
	config
	mutation *GoalieStatsMutation
	hooks    []Hook
}

// SetGoals sets the "goals" field.
func (gsc *GoalieStatsCreate) SetGoals(i int) *GoalieStatsCreate {
	gsc.mutation.SetGoals(i)
	return gsc
}

// SetNillableGoals sets the "goals" field if the given value is not nil.
func (gsc *GoalieStatsCreate) SetNillableGoals(i *int) *GoalieStatsCreate {
	if i != nil {
		gsc.SetGoals(*i)
	}
	return gsc
}

// SetAssists sets the "assists" field.
func (gsc *GoalieStatsCreate) SetAssists(i int) *GoalieStatsCreate {
	gsc.mutation.SetAssists(i)
	return gsc
}

// SetNillableAssists sets the "assists" field if the given value is not nil.
func (gsc *GoalieStatsCreate) SetNillableAssists(i *int) *GoalieStatsCreate {
	if i != nil {
		gsc.SetAssists(*i)
	}
	return gsc
}

// SetWin sets the "win" field.
func (gsc *GoalieStatsCreate) SetWin(b bool) *GoalieStatsCreate {
	gsc.mutation.SetWin(b)
	return gsc
}

// SetNillableWin sets the "win" field if the given value is not nil.
func (gsc *GoalieStatsCreate) SetNillableWin(b *bool) *GoalieStatsCreate {
	if b != nil {
		gsc.SetWin(*b)
	}
	return gsc
}

// SetLoss sets the "loss" field.
func (gsc *GoalieStatsCreate) SetLoss(b bool) *GoalieStatsCreate {
	gsc.mutation.SetLoss(b)
	return gsc
}

// SetNillableLoss sets the "loss" field if the given value is not nil.
func (gsc *GoalieStatsCreate) SetNillableLoss(b *bool) *GoalieStatsCreate {
	if b != nil {
		gsc.SetLoss(*b)
	}
	return gsc
}

// SetHome sets the "home" field.
func (gsc *GoalieStatsCreate) SetHome(b bool) *GoalieStatsCreate {
	gsc.mutation.SetHome(b)
	return gsc
}

// SetNillableHome sets the "home" field if the given value is not nil.
func (gsc *GoalieStatsCreate) SetNillableHome(b *bool) *GoalieStatsCreate {
	if b != nil {
		gsc.SetHome(*b)
	}
	return gsc
}

// AddGameIDs adds the "game" edge to the Game entity by IDs.
func (gsc *GoalieStatsCreate) AddGameIDs(ids ...int) *GoalieStatsCreate {
	gsc.mutation.AddGameIDs(ids...)
	return gsc
}

// AddGame adds the "game" edges to the Game entity.
func (gsc *GoalieStatsCreate) AddGame(g ...*Game) *GoalieStatsCreate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return gsc.AddGameIDs(ids...)
}

// AddPlayerIDs adds the "player" edge to the Player entity by IDs.
func (gsc *GoalieStatsCreate) AddPlayerIDs(ids ...int) *GoalieStatsCreate {
	gsc.mutation.AddPlayerIDs(ids...)
	return gsc
}

// AddPlayer adds the "player" edges to the Player entity.
func (gsc *GoalieStatsCreate) AddPlayer(p ...*Player) *GoalieStatsCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gsc.AddPlayerIDs(ids...)
}

// Mutation returns the GoalieStatsMutation object of the builder.
func (gsc *GoalieStatsCreate) Mutation() *GoalieStatsMutation {
	return gsc.mutation
}

// Save creates the GoalieStats in the database.
func (gsc *GoalieStatsCreate) Save(ctx context.Context) (*GoalieStats, error) {
	gsc.defaults()
	return withHooks(ctx, gsc.sqlSave, gsc.mutation, gsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gsc *GoalieStatsCreate) SaveX(ctx context.Context) *GoalieStats {
	v, err := gsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gsc *GoalieStatsCreate) Exec(ctx context.Context) error {
	_, err := gsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gsc *GoalieStatsCreate) ExecX(ctx context.Context) {
	if err := gsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gsc *GoalieStatsCreate) defaults() {
	if _, ok := gsc.mutation.Goals(); !ok {
		v := goaliestats.DefaultGoals
		gsc.mutation.SetGoals(v)
	}
	if _, ok := gsc.mutation.Assists(); !ok {
		v := goaliestats.DefaultAssists
		gsc.mutation.SetAssists(v)
	}
	if _, ok := gsc.mutation.Win(); !ok {
		v := goaliestats.DefaultWin
		gsc.mutation.SetWin(v)
	}
	if _, ok := gsc.mutation.Loss(); !ok {
		v := goaliestats.DefaultLoss
		gsc.mutation.SetLoss(v)
	}
	if _, ok := gsc.mutation.Home(); !ok {
		v := goaliestats.DefaultHome
		gsc.mutation.SetHome(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gsc *GoalieStatsCreate) check() error {
	if _, ok := gsc.mutation.Goals(); !ok {
		return &ValidationError{Name: "goals", err: errors.New(`ent: missing required field "GoalieStats.goals"`)}
	}
	if _, ok := gsc.mutation.Assists(); !ok {
		return &ValidationError{Name: "assists", err: errors.New(`ent: missing required field "GoalieStats.assists"`)}
	}
	if _, ok := gsc.mutation.Win(); !ok {
		return &ValidationError{Name: "win", err: errors.New(`ent: missing required field "GoalieStats.win"`)}
	}
	if _, ok := gsc.mutation.Loss(); !ok {
		return &ValidationError{Name: "loss", err: errors.New(`ent: missing required field "GoalieStats.loss"`)}
	}
	if _, ok := gsc.mutation.Home(); !ok {
		return &ValidationError{Name: "home", err: errors.New(`ent: missing required field "GoalieStats.home"`)}
	}
	return nil
}

func (gsc *GoalieStatsCreate) sqlSave(ctx context.Context) (*GoalieStats, error) {
	if err := gsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	gsc.mutation.id = &_node.ID
	gsc.mutation.done = true
	return _node, nil
}

func (gsc *GoalieStatsCreate) createSpec() (*GoalieStats, *sqlgraph.CreateSpec) {
	var (
		_node = &GoalieStats{config: gsc.config}
		_spec = sqlgraph.NewCreateSpec(goaliestats.Table, sqlgraph.NewFieldSpec(goaliestats.FieldID, field.TypeInt))
	)
	if value, ok := gsc.mutation.Goals(); ok {
		_spec.SetField(goaliestats.FieldGoals, field.TypeInt, value)
		_node.Goals = value
	}
	if value, ok := gsc.mutation.Assists(); ok {
		_spec.SetField(goaliestats.FieldAssists, field.TypeInt, value)
		_node.Assists = value
	}
	if value, ok := gsc.mutation.Win(); ok {
		_spec.SetField(goaliestats.FieldWin, field.TypeBool, value)
		_node.Win = value
	}
	if value, ok := gsc.mutation.Loss(); ok {
		_spec.SetField(goaliestats.FieldLoss, field.TypeBool, value)
		_node.Loss = value
	}
	if value, ok := gsc.mutation.Home(); ok {
		_spec.SetField(goaliestats.FieldHome, field.TypeBool, value)
		_node.Home = value
	}
	if nodes := gsc.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   goaliestats.GameTable,
			Columns: goaliestats.GamePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gsc.mutation.PlayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   goaliestats.PlayerTable,
			Columns: goaliestats.PlayerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GoalieStatsCreateBulk is the builder for creating many GoalieStats entities in bulk.
type GoalieStatsCreateBulk struct {
	config
	builders []*GoalieStatsCreate
}

// Save creates the GoalieStats entities in the database.
func (gscb *GoalieStatsCreateBulk) Save(ctx context.Context) ([]*GoalieStats, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gscb.builders))
	nodes := make([]*GoalieStats, len(gscb.builders))
	mutators := make([]Mutator, len(gscb.builders))
	for i := range gscb.builders {
		func(i int, root context.Context) {
			builder := gscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GoalieStatsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gscb *GoalieStatsCreateBulk) SaveX(ctx context.Context) []*GoalieStats {
	v, err := gscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gscb *GoalieStatsCreateBulk) Exec(ctx context.Context) error {
	_, err := gscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gscb *GoalieStatsCreateBulk) ExecX(ctx context.Context) {
	if err := gscb.Exec(ctx); err != nil {
		panic(err)
	}
}
