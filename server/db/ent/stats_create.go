// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/player"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/stats"
)

// StatsCreate is the builder for creating a Stats entity.
type StatsCreate struct {
	config
	mutation *StatsMutation
	hooks    []Hook
}

// SetGoals sets the "goals" field.
func (sc *StatsCreate) SetGoals(i int) *StatsCreate {
	sc.mutation.SetGoals(i)
	return sc
}

// SetNillableGoals sets the "goals" field if the given value is not nil.
func (sc *StatsCreate) SetNillableGoals(i *int) *StatsCreate {
	if i != nil {
		sc.SetGoals(*i)
	}
	return sc
}

// SetAssists sets the "assists" field.
func (sc *StatsCreate) SetAssists(i int) *StatsCreate {
	sc.mutation.SetAssists(i)
	return sc
}

// SetNillableAssists sets the "assists" field if the given value is not nil.
func (sc *StatsCreate) SetNillableAssists(i *int) *StatsCreate {
	if i != nil {
		sc.SetAssists(*i)
	}
	return sc
}

// SetShutouts sets the "shutouts" field.
func (sc *StatsCreate) SetShutouts(i int) *StatsCreate {
	sc.mutation.SetShutouts(i)
	return sc
}

// SetNillableShutouts sets the "shutouts" field if the given value is not nil.
func (sc *StatsCreate) SetNillableShutouts(i *int) *StatsCreate {
	if i != nil {
		sc.SetShutouts(*i)
	}
	return sc
}

// SetWins sets the "wins" field.
func (sc *StatsCreate) SetWins(i int) *StatsCreate {
	sc.mutation.SetWins(i)
	return sc
}

// SetNillableWins sets the "wins" field if the given value is not nil.
func (sc *StatsCreate) SetNillableWins(i *int) *StatsCreate {
	if i != nil {
		sc.SetWins(*i)
	}
	return sc
}

// SetPlayerID sets the "player" edge to the Player entity by ID.
func (sc *StatsCreate) SetPlayerID(id int) *StatsCreate {
	sc.mutation.SetPlayerID(id)
	return sc
}

// SetNillablePlayerID sets the "player" edge to the Player entity by ID if the given value is not nil.
func (sc *StatsCreate) SetNillablePlayerID(id *int) *StatsCreate {
	if id != nil {
		sc = sc.SetPlayerID(*id)
	}
	return sc
}

// SetPlayer sets the "player" edge to the Player entity.
func (sc *StatsCreate) SetPlayer(p *Player) *StatsCreate {
	return sc.SetPlayerID(p.ID)
}

// Mutation returns the StatsMutation object of the builder.
func (sc *StatsCreate) Mutation() *StatsMutation {
	return sc.mutation
}

// Save creates the Stats in the database.
func (sc *StatsCreate) Save(ctx context.Context) (*Stats, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *StatsCreate) SaveX(ctx context.Context) *Stats {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *StatsCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *StatsCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *StatsCreate) defaults() {
	if _, ok := sc.mutation.Goals(); !ok {
		v := stats.DefaultGoals
		sc.mutation.SetGoals(v)
	}
	if _, ok := sc.mutation.Assists(); !ok {
		v := stats.DefaultAssists
		sc.mutation.SetAssists(v)
	}
	if _, ok := sc.mutation.Shutouts(); !ok {
		v := stats.DefaultShutouts
		sc.mutation.SetShutouts(v)
	}
	if _, ok := sc.mutation.Wins(); !ok {
		v := stats.DefaultWins
		sc.mutation.SetWins(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *StatsCreate) check() error {
	if _, ok := sc.mutation.Goals(); !ok {
		return &ValidationError{Name: "goals", err: errors.New(`ent: missing required field "Stats.goals"`)}
	}
	if _, ok := sc.mutation.Assists(); !ok {
		return &ValidationError{Name: "assists", err: errors.New(`ent: missing required field "Stats.assists"`)}
	}
	if _, ok := sc.mutation.Shutouts(); !ok {
		return &ValidationError{Name: "shutouts", err: errors.New(`ent: missing required field "Stats.shutouts"`)}
	}
	if _, ok := sc.mutation.Wins(); !ok {
		return &ValidationError{Name: "wins", err: errors.New(`ent: missing required field "Stats.wins"`)}
	}
	return nil
}

func (sc *StatsCreate) sqlSave(ctx context.Context) (*Stats, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *StatsCreate) createSpec() (*Stats, *sqlgraph.CreateSpec) {
	var (
		_node = &Stats{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(stats.Table, sqlgraph.NewFieldSpec(stats.FieldID, field.TypeInt))
	)
	if value, ok := sc.mutation.Goals(); ok {
		_spec.SetField(stats.FieldGoals, field.TypeInt, value)
		_node.Goals = value
	}
	if value, ok := sc.mutation.Assists(); ok {
		_spec.SetField(stats.FieldAssists, field.TypeInt, value)
		_node.Assists = value
	}
	if value, ok := sc.mutation.Shutouts(); ok {
		_spec.SetField(stats.FieldShutouts, field.TypeInt, value)
		_node.Shutouts = value
	}
	if value, ok := sc.mutation.Wins(); ok {
		_spec.SetField(stats.FieldWins, field.TypeInt, value)
		_node.Wins = value
	}
	if nodes := sc.mutation.PlayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   stats.PlayerTable,
			Columns: []string{stats.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// StatsCreateBulk is the builder for creating many Stats entities in bulk.
type StatsCreateBulk struct {
	config
	builders []*StatsCreate
}

// Save creates the Stats entities in the database.
func (scb *StatsCreateBulk) Save(ctx context.Context) ([]*Stats, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Stats, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StatsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *StatsCreateBulk) SaveX(ctx context.Context) []*Stats {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *StatsCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *StatsCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
