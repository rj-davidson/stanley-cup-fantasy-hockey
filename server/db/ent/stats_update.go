// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/predicate"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/stats"
)

// StatsUpdate is the builder for updating Stats entities.
type StatsUpdate struct {
	config
	hooks    []Hook
	mutation *StatsMutation
}

// Where appends a list predicates to the StatsUpdate builder.
func (su *StatsUpdate) Where(ps ...predicate.Stats) *StatsUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetGoals sets the "goals" field.
func (su *StatsUpdate) SetGoals(i int) *StatsUpdate {
	su.mutation.ResetGoals()
	su.mutation.SetGoals(i)
	return su
}

// SetNillableGoals sets the "goals" field if the given value is not nil.
func (su *StatsUpdate) SetNillableGoals(i *int) *StatsUpdate {
	if i != nil {
		su.SetGoals(*i)
	}
	return su
}

// AddGoals adds i to the "goals" field.
func (su *StatsUpdate) AddGoals(i int) *StatsUpdate {
	su.mutation.AddGoals(i)
	return su
}

// SetAssists sets the "assists" field.
func (su *StatsUpdate) SetAssists(i int) *StatsUpdate {
	su.mutation.ResetAssists()
	su.mutation.SetAssists(i)
	return su
}

// SetNillableAssists sets the "assists" field if the given value is not nil.
func (su *StatsUpdate) SetNillableAssists(i *int) *StatsUpdate {
	if i != nil {
		su.SetAssists(*i)
	}
	return su
}

// AddAssists adds i to the "assists" field.
func (su *StatsUpdate) AddAssists(i int) *StatsUpdate {
	su.mutation.AddAssists(i)
	return su
}

// SetShutouts sets the "shutouts" field.
func (su *StatsUpdate) SetShutouts(i int) *StatsUpdate {
	su.mutation.ResetShutouts()
	su.mutation.SetShutouts(i)
	return su
}

// SetNillableShutouts sets the "shutouts" field if the given value is not nil.
func (su *StatsUpdate) SetNillableShutouts(i *int) *StatsUpdate {
	if i != nil {
		su.SetShutouts(*i)
	}
	return su
}

// AddShutouts adds i to the "shutouts" field.
func (su *StatsUpdate) AddShutouts(i int) *StatsUpdate {
	su.mutation.AddShutouts(i)
	return su
}

// SetWins sets the "wins" field.
func (su *StatsUpdate) SetWins(i int) *StatsUpdate {
	su.mutation.ResetWins()
	su.mutation.SetWins(i)
	return su
}

// SetNillableWins sets the "wins" field if the given value is not nil.
func (su *StatsUpdate) SetNillableWins(i *int) *StatsUpdate {
	if i != nil {
		su.SetWins(*i)
	}
	return su
}

// AddWins adds i to the "wins" field.
func (su *StatsUpdate) AddWins(i int) *StatsUpdate {
	su.mutation.AddWins(i)
	return su
}

// Mutation returns the StatsMutation object of the builder.
func (su *StatsUpdate) Mutation() *StatsMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StatsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *StatsUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StatsUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StatsUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *StatsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(stats.Table, stats.Columns, sqlgraph.NewFieldSpec(stats.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Goals(); ok {
		_spec.SetField(stats.FieldGoals, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedGoals(); ok {
		_spec.AddField(stats.FieldGoals, field.TypeInt, value)
	}
	if value, ok := su.mutation.Assists(); ok {
		_spec.SetField(stats.FieldAssists, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedAssists(); ok {
		_spec.AddField(stats.FieldAssists, field.TypeInt, value)
	}
	if value, ok := su.mutation.Shutouts(); ok {
		_spec.SetField(stats.FieldShutouts, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedShutouts(); ok {
		_spec.AddField(stats.FieldShutouts, field.TypeInt, value)
	}
	if value, ok := su.mutation.Wins(); ok {
		_spec.SetField(stats.FieldWins, field.TypeInt, value)
	}
	if value, ok := su.mutation.AddedWins(); ok {
		_spec.AddField(stats.FieldWins, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stats.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// StatsUpdateOne is the builder for updating a single Stats entity.
type StatsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StatsMutation
}

// SetGoals sets the "goals" field.
func (suo *StatsUpdateOne) SetGoals(i int) *StatsUpdateOne {
	suo.mutation.ResetGoals()
	suo.mutation.SetGoals(i)
	return suo
}

// SetNillableGoals sets the "goals" field if the given value is not nil.
func (suo *StatsUpdateOne) SetNillableGoals(i *int) *StatsUpdateOne {
	if i != nil {
		suo.SetGoals(*i)
	}
	return suo
}

// AddGoals adds i to the "goals" field.
func (suo *StatsUpdateOne) AddGoals(i int) *StatsUpdateOne {
	suo.mutation.AddGoals(i)
	return suo
}

// SetAssists sets the "assists" field.
func (suo *StatsUpdateOne) SetAssists(i int) *StatsUpdateOne {
	suo.mutation.ResetAssists()
	suo.mutation.SetAssists(i)
	return suo
}

// SetNillableAssists sets the "assists" field if the given value is not nil.
func (suo *StatsUpdateOne) SetNillableAssists(i *int) *StatsUpdateOne {
	if i != nil {
		suo.SetAssists(*i)
	}
	return suo
}

// AddAssists adds i to the "assists" field.
func (suo *StatsUpdateOne) AddAssists(i int) *StatsUpdateOne {
	suo.mutation.AddAssists(i)
	return suo
}

// SetShutouts sets the "shutouts" field.
func (suo *StatsUpdateOne) SetShutouts(i int) *StatsUpdateOne {
	suo.mutation.ResetShutouts()
	suo.mutation.SetShutouts(i)
	return suo
}

// SetNillableShutouts sets the "shutouts" field if the given value is not nil.
func (suo *StatsUpdateOne) SetNillableShutouts(i *int) *StatsUpdateOne {
	if i != nil {
		suo.SetShutouts(*i)
	}
	return suo
}

// AddShutouts adds i to the "shutouts" field.
func (suo *StatsUpdateOne) AddShutouts(i int) *StatsUpdateOne {
	suo.mutation.AddShutouts(i)
	return suo
}

// SetWins sets the "wins" field.
func (suo *StatsUpdateOne) SetWins(i int) *StatsUpdateOne {
	suo.mutation.ResetWins()
	suo.mutation.SetWins(i)
	return suo
}

// SetNillableWins sets the "wins" field if the given value is not nil.
func (suo *StatsUpdateOne) SetNillableWins(i *int) *StatsUpdateOne {
	if i != nil {
		suo.SetWins(*i)
	}
	return suo
}

// AddWins adds i to the "wins" field.
func (suo *StatsUpdateOne) AddWins(i int) *StatsUpdateOne {
	suo.mutation.AddWins(i)
	return suo
}

// Mutation returns the StatsMutation object of the builder.
func (suo *StatsUpdateOne) Mutation() *StatsMutation {
	return suo.mutation
}

// Where appends a list predicates to the StatsUpdate builder.
func (suo *StatsUpdateOne) Where(ps ...predicate.Stats) *StatsUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StatsUpdateOne) Select(field string, fields ...string) *StatsUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Stats entity.
func (suo *StatsUpdateOne) Save(ctx context.Context) (*Stats, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StatsUpdateOne) SaveX(ctx context.Context) *Stats {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StatsUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StatsUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *StatsUpdateOne) sqlSave(ctx context.Context) (_node *Stats, err error) {
	_spec := sqlgraph.NewUpdateSpec(stats.Table, stats.Columns, sqlgraph.NewFieldSpec(stats.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Stats.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, stats.FieldID)
		for _, f := range fields {
			if !stats.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != stats.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Goals(); ok {
		_spec.SetField(stats.FieldGoals, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedGoals(); ok {
		_spec.AddField(stats.FieldGoals, field.TypeInt, value)
	}
	if value, ok := suo.mutation.Assists(); ok {
		_spec.SetField(stats.FieldAssists, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedAssists(); ok {
		_spec.AddField(stats.FieldAssists, field.TypeInt, value)
	}
	if value, ok := suo.mutation.Shutouts(); ok {
		_spec.SetField(stats.FieldShutouts, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedShutouts(); ok {
		_spec.AddField(stats.FieldShutouts, field.TypeInt, value)
	}
	if value, ok := suo.mutation.Wins(); ok {
		_spec.SetField(stats.FieldWins, field.TypeInt, value)
	}
	if value, ok := suo.mutation.AddedWins(); ok {
		_spec.AddField(stats.FieldWins, field.TypeInt, value)
	}
	_node = &Stats{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{stats.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
