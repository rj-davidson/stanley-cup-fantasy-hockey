// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/league"
)

// League is the model entity for the League schema.
type League struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Season holds the value of the "season" field.
	Season int `json:"season,omitempty"`
	// Public holds the value of the "public" field.
	Public bool `json:"public,omitempty"`
	// NumForwards holds the value of the "num_forwards" field.
	NumForwards int `json:"num_forwards,omitempty"`
	// NumDefenders holds the value of the "num_defenders" field.
	NumDefenders int `json:"num_defenders,omitempty"`
	// NumGoalies holds the value of the "num_goalies" field.
	NumGoalies int `json:"num_goalies,omitempty"`
	// PointsForGoal holds the value of the "points_for_goal" field.
	PointsForGoal int `json:"points_for_goal,omitempty"`
	// PointsForAssist holds the value of the "points_for_assist" field.
	PointsForAssist int `json:"points_for_assist,omitempty"`
	// GoaliePointsForShutout holds the value of the "goalie_points_for_shutout" field.
	GoaliePointsForShutout int `json:"goalie_points_for_shutout,omitempty"`
	// GoaliePointsForWin holds the value of the "goalie_points_for_win" field.
	GoaliePointsForWin int `json:"goalie_points_for_win,omitempty"`
	// EditKey holds the value of the "edit_key" field.
	EditKey string `json:"edit_key,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the LeagueQuery when eager-loading is set.
	Edges        LeagueEdges `json:"edges"`
	selectValues sql.SelectValues
}

// LeagueEdges holds the relations/edges for other nodes in the graph.
type LeagueEdges struct {
	// Entries holds the value of the entries edge.
	Entries []*Entry `json:"entries,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EntriesOrErr returns the Entries value or an error if the edge
// was not loaded in eager-loading.
func (e LeagueEdges) EntriesOrErr() ([]*Entry, error) {
	if e.loadedTypes[0] {
		return e.Entries, nil
	}
	return nil, &NotLoadedError{edge: "entries"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*League) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case league.FieldPublic:
			values[i] = new(sql.NullBool)
		case league.FieldID, league.FieldSeason, league.FieldNumForwards, league.FieldNumDefenders, league.FieldNumGoalies, league.FieldPointsForGoal, league.FieldPointsForAssist, league.FieldGoaliePointsForShutout, league.FieldGoaliePointsForWin:
			values[i] = new(sql.NullInt64)
		case league.FieldEditKey, league.FieldCode:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the League fields.
func (l *League) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case league.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			l.ID = int(value.Int64)
		case league.FieldSeason:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field season", values[i])
			} else if value.Valid {
				l.Season = int(value.Int64)
			}
		case league.FieldPublic:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field public", values[i])
			} else if value.Valid {
				l.Public = value.Bool
			}
		case league.FieldNumForwards:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field num_forwards", values[i])
			} else if value.Valid {
				l.NumForwards = int(value.Int64)
			}
		case league.FieldNumDefenders:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field num_defenders", values[i])
			} else if value.Valid {
				l.NumDefenders = int(value.Int64)
			}
		case league.FieldNumGoalies:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field num_goalies", values[i])
			} else if value.Valid {
				l.NumGoalies = int(value.Int64)
			}
		case league.FieldPointsForGoal:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field points_for_goal", values[i])
			} else if value.Valid {
				l.PointsForGoal = int(value.Int64)
			}
		case league.FieldPointsForAssist:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field points_for_assist", values[i])
			} else if value.Valid {
				l.PointsForAssist = int(value.Int64)
			}
		case league.FieldGoaliePointsForShutout:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field goalie_points_for_shutout", values[i])
			} else if value.Valid {
				l.GoaliePointsForShutout = int(value.Int64)
			}
		case league.FieldGoaliePointsForWin:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field goalie_points_for_win", values[i])
			} else if value.Valid {
				l.GoaliePointsForWin = int(value.Int64)
			}
		case league.FieldEditKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field edit_key", values[i])
			} else if value.Valid {
				l.EditKey = value.String
			}
		case league.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				l.Code = value.String
			}
		default:
			l.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the League.
// This includes values selected through modifiers, order, etc.
func (l *League) Value(name string) (ent.Value, error) {
	return l.selectValues.Get(name)
}

// QueryEntries queries the "entries" edge of the League entity.
func (l *League) QueryEntries() *EntryQuery {
	return NewLeagueClient(l.config).QueryEntries(l)
}

// Update returns a builder for updating this League.
// Note that you need to call League.Unwrap() before calling this method if this League
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *League) Update() *LeagueUpdateOne {
	return NewLeagueClient(l.config).UpdateOne(l)
}

// Unwrap unwraps the League entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *League) Unwrap() *League {
	_tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: League is not a transactional entity")
	}
	l.config.driver = _tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *League) String() string {
	var builder strings.Builder
	builder.WriteString("League(")
	builder.WriteString(fmt.Sprintf("id=%v, ", l.ID))
	builder.WriteString("season=")
	builder.WriteString(fmt.Sprintf("%v", l.Season))
	builder.WriteString(", ")
	builder.WriteString("public=")
	builder.WriteString(fmt.Sprintf("%v", l.Public))
	builder.WriteString(", ")
	builder.WriteString("num_forwards=")
	builder.WriteString(fmt.Sprintf("%v", l.NumForwards))
	builder.WriteString(", ")
	builder.WriteString("num_defenders=")
	builder.WriteString(fmt.Sprintf("%v", l.NumDefenders))
	builder.WriteString(", ")
	builder.WriteString("num_goalies=")
	builder.WriteString(fmt.Sprintf("%v", l.NumGoalies))
	builder.WriteString(", ")
	builder.WriteString("points_for_goal=")
	builder.WriteString(fmt.Sprintf("%v", l.PointsForGoal))
	builder.WriteString(", ")
	builder.WriteString("points_for_assist=")
	builder.WriteString(fmt.Sprintf("%v", l.PointsForAssist))
	builder.WriteString(", ")
	builder.WriteString("goalie_points_for_shutout=")
	builder.WriteString(fmt.Sprintf("%v", l.GoaliePointsForShutout))
	builder.WriteString(", ")
	builder.WriteString("goalie_points_for_win=")
	builder.WriteString(fmt.Sprintf("%v", l.GoaliePointsForWin))
	builder.WriteString(", ")
	builder.WriteString("edit_key=")
	builder.WriteString(l.EditKey)
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(l.Code)
	builder.WriteByte(')')
	return builder.String()
}

// Leagues is a parsable slice of League.
type Leagues []*League
