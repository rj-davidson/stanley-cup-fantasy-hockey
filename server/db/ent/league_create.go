// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/entry"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/league"
)

// LeagueCreate is the builder for creating a League entity.
type LeagueCreate struct {
	config
	mutation *LeagueMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (lc *LeagueCreate) SetName(s string) *LeagueCreate {
	lc.mutation.SetName(s)
	return lc
}

// SetSeason sets the "season" field.
func (lc *LeagueCreate) SetSeason(i int) *LeagueCreate {
	lc.mutation.SetSeason(i)
	return lc
}

// SetPublic sets the "public" field.
func (lc *LeagueCreate) SetPublic(b bool) *LeagueCreate {
	lc.mutation.SetPublic(b)
	return lc
}

// SetNumForwards sets the "num_forwards" field.
func (lc *LeagueCreate) SetNumForwards(i int) *LeagueCreate {
	lc.mutation.SetNumForwards(i)
	return lc
}

// SetNumDefenders sets the "num_defenders" field.
func (lc *LeagueCreate) SetNumDefenders(i int) *LeagueCreate {
	lc.mutation.SetNumDefenders(i)
	return lc
}

// SetNumGoalies sets the "num_goalies" field.
func (lc *LeagueCreate) SetNumGoalies(i int) *LeagueCreate {
	lc.mutation.SetNumGoalies(i)
	return lc
}

// AddEntryIDs adds the "entries" edge to the Entry entity by IDs.
func (lc *LeagueCreate) AddEntryIDs(ids ...int) *LeagueCreate {
	lc.mutation.AddEntryIDs(ids...)
	return lc
}

// AddEntries adds the "entries" edges to the Entry entity.
func (lc *LeagueCreate) AddEntries(e ...*Entry) *LeagueCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return lc.AddEntryIDs(ids...)
}

// Mutation returns the LeagueMutation object of the builder.
func (lc *LeagueCreate) Mutation() *LeagueMutation {
	return lc.mutation
}

// Save creates the League in the database.
func (lc *LeagueCreate) Save(ctx context.Context) (*League, error) {
	return withHooks(ctx, lc.sqlSave, lc.mutation, lc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LeagueCreate) SaveX(ctx context.Context) *League {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lc *LeagueCreate) Exec(ctx context.Context) error {
	_, err := lc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lc *LeagueCreate) ExecX(ctx context.Context) {
	if err := lc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lc *LeagueCreate) check() error {
	if _, ok := lc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "League.name"`)}
	}
	if _, ok := lc.mutation.Season(); !ok {
		return &ValidationError{Name: "season", err: errors.New(`ent: missing required field "League.season"`)}
	}
	if _, ok := lc.mutation.Public(); !ok {
		return &ValidationError{Name: "public", err: errors.New(`ent: missing required field "League.public"`)}
	}
	if _, ok := lc.mutation.NumForwards(); !ok {
		return &ValidationError{Name: "num_forwards", err: errors.New(`ent: missing required field "League.num_forwards"`)}
	}
	if _, ok := lc.mutation.NumDefenders(); !ok {
		return &ValidationError{Name: "num_defenders", err: errors.New(`ent: missing required field "League.num_defenders"`)}
	}
	if _, ok := lc.mutation.NumGoalies(); !ok {
		return &ValidationError{Name: "num_goalies", err: errors.New(`ent: missing required field "League.num_goalies"`)}
	}
	return nil
}

func (lc *LeagueCreate) sqlSave(ctx context.Context) (*League, error) {
	if err := lc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	lc.mutation.id = &_node.ID
	lc.mutation.done = true
	return _node, nil
}

func (lc *LeagueCreate) createSpec() (*League, *sqlgraph.CreateSpec) {
	var (
		_node = &League{config: lc.config}
		_spec = sqlgraph.NewCreateSpec(league.Table, sqlgraph.NewFieldSpec(league.FieldID, field.TypeInt))
	)
	if value, ok := lc.mutation.Name(); ok {
		_spec.SetField(league.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := lc.mutation.Season(); ok {
		_spec.SetField(league.FieldSeason, field.TypeInt, value)
		_node.Season = value
	}
	if value, ok := lc.mutation.Public(); ok {
		_spec.SetField(league.FieldPublic, field.TypeBool, value)
		_node.Public = value
	}
	if value, ok := lc.mutation.NumForwards(); ok {
		_spec.SetField(league.FieldNumForwards, field.TypeInt, value)
		_node.NumForwards = value
	}
	if value, ok := lc.mutation.NumDefenders(); ok {
		_spec.SetField(league.FieldNumDefenders, field.TypeInt, value)
		_node.NumDefenders = value
	}
	if value, ok := lc.mutation.NumGoalies(); ok {
		_spec.SetField(league.FieldNumGoalies, field.TypeInt, value)
		_node.NumGoalies = value
	}
	if nodes := lc.mutation.EntriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   league.EntriesTable,
			Columns: []string{league.EntriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LeagueCreateBulk is the builder for creating many League entities in bulk.
type LeagueCreateBulk struct {
	config
	builders []*LeagueCreate
}

// Save creates the League entities in the database.
func (lcb *LeagueCreateBulk) Save(ctx context.Context) ([]*League, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lcb.builders))
	nodes := make([]*League, len(lcb.builders))
	mutators := make([]Mutator, len(lcb.builders))
	for i := range lcb.builders {
		func(i int, root context.Context) {
			builder := lcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LeagueMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcb *LeagueCreateBulk) SaveX(ctx context.Context) []*League {
	v, err := lcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcb *LeagueCreateBulk) Exec(ctx context.Context) error {
	_, err := lcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcb *LeagueCreateBulk) ExecX(ctx context.Context) {
	if err := lcb.Exec(ctx); err != nil {
		panic(err)
	}
}
