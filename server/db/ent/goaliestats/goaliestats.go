// Code generated by ent, DO NOT EDIT.

package goaliestats

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the goaliestats type in the database.
	Label = "goalie_stats"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldGoals holds the string denoting the goals field in the database.
	FieldGoals = "goals"
	// FieldAssists holds the string denoting the assists field in the database.
	FieldAssists = "assists"
	// FieldWin holds the string denoting the win field in the database.
	FieldWin = "win"
	// FieldLoss holds the string denoting the loss field in the database.
	FieldLoss = "loss"
	// FieldHome holds the string denoting the home field in the database.
	FieldHome = "home"
	// EdgeGame holds the string denoting the game edge name in mutations.
	EdgeGame = "game"
	// EdgePlayer holds the string denoting the player edge name in mutations.
	EdgePlayer = "player"
	// Table holds the table name of the goaliestats in the database.
	Table = "goalie_stats"
	// GameTable is the table that holds the game relation/edge. The primary key declared below.
	GameTable = "game_goalieStats"
	// GameInverseTable is the table name for the Game entity.
	// It exists in this package in order to avoid circular dependency with the "game" package.
	GameInverseTable = "games"
	// PlayerTable is the table that holds the player relation/edge. The primary key declared below.
	PlayerTable = "player_goalieStats"
	// PlayerInverseTable is the table name for the Player entity.
	// It exists in this package in order to avoid circular dependency with the "player" package.
	PlayerInverseTable = "players"
)

// Columns holds all SQL columns for goaliestats fields.
var Columns = []string{
	FieldID,
	FieldGoals,
	FieldAssists,
	FieldWin,
	FieldLoss,
	FieldHome,
}

var (
	// GamePrimaryKey and GameColumn2 are the table columns denoting the
	// primary key for the game relation (M2M).
	GamePrimaryKey = []string{"game_id", "goalie_stats_id"}
	// PlayerPrimaryKey and PlayerColumn2 are the table columns denoting the
	// primary key for the player relation (M2M).
	PlayerPrimaryKey = []string{"player_id", "goalie_stats_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultGoals holds the default value on creation for the "goals" field.
	DefaultGoals int
	// DefaultAssists holds the default value on creation for the "assists" field.
	DefaultAssists int
	// DefaultWin holds the default value on creation for the "win" field.
	DefaultWin bool
	// DefaultLoss holds the default value on creation for the "loss" field.
	DefaultLoss bool
	// DefaultHome holds the default value on creation for the "home" field.
	DefaultHome bool
)

// OrderOption defines the ordering options for the GoalieStats queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByGoals orders the results by the goals field.
func ByGoals(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGoals, opts...).ToFunc()
}

// ByAssists orders the results by the assists field.
func ByAssists(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAssists, opts...).ToFunc()
}

// ByWin orders the results by the win field.
func ByWin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWin, opts...).ToFunc()
}

// ByLoss orders the results by the loss field.
func ByLoss(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLoss, opts...).ToFunc()
}

// ByHome orders the results by the home field.
func ByHome(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHome, opts...).ToFunc()
}

// ByGameCount orders the results by game count.
func ByGameCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGameStep(), opts...)
	}
}

// ByGame orders the results by game terms.
func ByGame(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGameStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPlayerCount orders the results by player count.
func ByPlayerCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPlayerStep(), opts...)
	}
}

// ByPlayer orders the results by player terms.
func ByPlayer(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlayerStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newGameStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GameInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, GameTable, GamePrimaryKey...),
	)
}
func newPlayerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlayerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, PlayerTable, PlayerPrimaryKey...),
	)
}
