// Code generated by ent, DO NOT EDIT.

package gamestats

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the gamestats type in the database.
	Label = "game_stats"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldGoals holds the string denoting the goals field in the database.
	FieldGoals = "goals"
	// FieldAssists holds the string denoting the assists field in the database.
	FieldAssists = "assists"
	// FieldWin holds the string denoting the win field in the database.
	FieldWin = "win"
	// FieldShutout holds the string denoting the shutout field in the database.
	FieldShutout = "shutout"
	// FieldHomeGame holds the string denoting the homegame field in the database.
	FieldHomeGame = "home_game"
	// EdgeGame holds the string denoting the game edge name in mutations.
	EdgeGame = "game"
	// EdgePlayer holds the string denoting the player edge name in mutations.
	EdgePlayer = "player"
	// Table holds the table name of the gamestats in the database.
	Table = "game_stats"
	// GameTable is the table that holds the game relation/edge.
	GameTable = "games"
	// GameInverseTable is the table name for the Game entity.
	// It exists in this package in order to avoid circular dependency with the "game" package.
	GameInverseTable = "games"
	// GameColumn is the table column denoting the game relation/edge.
	GameColumn = "game_stats_game"
	// PlayerTable is the table that holds the player relation/edge.
	PlayerTable = "game_stats"
	// PlayerInverseTable is the table name for the Player entity.
	// It exists in this package in order to avoid circular dependency with the "player" package.
	PlayerInverseTable = "players"
	// PlayerColumn is the table column denoting the player relation/edge.
	PlayerColumn = "game_stats_player"
)

// Columns holds all SQL columns for gamestats fields.
var Columns = []string{
	FieldID,
	FieldGoals,
	FieldAssists,
	FieldWin,
	FieldShutout,
	FieldHomeGame,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "game_stats"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"game_stats_player",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultGoals holds the default value on creation for the "goals" field.
	DefaultGoals int
	// DefaultAssists holds the default value on creation for the "assists" field.
	DefaultAssists int
	// DefaultWin holds the default value on creation for the "win" field.
	DefaultWin bool
	// DefaultShutout holds the default value on creation for the "shutout" field.
	DefaultShutout bool
	// DefaultHomeGame holds the default value on creation for the "homeGame" field.
	DefaultHomeGame bool
)

// OrderOption defines the ordering options for the GameStats queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByGoals orders the results by the goals field.
func ByGoals(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGoals, opts...).ToFunc()
}

// ByAssists orders the results by the assists field.
func ByAssists(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAssists, opts...).ToFunc()
}

// ByWin orders the results by the win field.
func ByWin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWin, opts...).ToFunc()
}

// ByShutout orders the results by the shutout field.
func ByShutout(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShutout, opts...).ToFunc()
}

// ByHomeGame orders the results by the homeGame field.
func ByHomeGame(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHomeGame, opts...).ToFunc()
}

// ByGameField orders the results by game field.
func ByGameField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGameStep(), sql.OrderByField(field, opts...))
	}
}

// ByPlayerField orders the results by player field.
func ByPlayerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlayerStep(), sql.OrderByField(field, opts...))
	}
}
func newGameStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GameInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, GameTable, GameColumn),
	)
}
func newPlayerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlayerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, PlayerTable, PlayerColumn),
	)
}
