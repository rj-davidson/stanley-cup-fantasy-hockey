// Code generated by ent, DO NOT EDIT.

package player

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the player type in the database.
	Label = "player"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPosition holds the string denoting the position field in the database.
	FieldPosition = "position"
	// FieldGoals holds the string denoting the goals field in the database.
	FieldGoals = "goals"
	// FieldAssists holds the string denoting the assists field in the database.
	FieldAssists = "assists"
	// FieldShutouts holds the string denoting the shutouts field in the database.
	FieldShutouts = "shutouts"
	// FieldWins holds the string denoting the wins field in the database.
	FieldWins = "wins"
	// EdgeTeam holds the string denoting the team edge name in mutations.
	EdgeTeam = "team"
	// EdgeHomeGamesAsGoalie holds the string denoting the homegamesasgoalie edge name in mutations.
	EdgeHomeGamesAsGoalie = "homeGamesAsGoalie"
	// EdgeAwayGamesAsGoalie holds the string denoting the awaygamesasgoalie edge name in mutations.
	EdgeAwayGamesAsGoalie = "awayGamesAsGoalie"
	// Table holds the table name of the player in the database.
	Table = "players"
	// TeamTable is the table that holds the team relation/edge.
	TeamTable = "players"
	// TeamInverseTable is the table name for the Team entity.
	// It exists in this package in order to avoid circular dependency with the "team" package.
	TeamInverseTable = "teams"
	// TeamColumn is the table column denoting the team relation/edge.
	TeamColumn = "team_players"
	// HomeGamesAsGoalieTable is the table that holds the homeGamesAsGoalie relation/edge.
	HomeGamesAsGoalieTable = "games"
	// HomeGamesAsGoalieInverseTable is the table name for the Game entity.
	// It exists in this package in order to avoid circular dependency with the "game" package.
	HomeGamesAsGoalieInverseTable = "games"
	// HomeGamesAsGoalieColumn is the table column denoting the homeGamesAsGoalie relation/edge.
	HomeGamesAsGoalieColumn = "player_home_games_as_goalie"
	// AwayGamesAsGoalieTable is the table that holds the awayGamesAsGoalie relation/edge.
	AwayGamesAsGoalieTable = "games"
	// AwayGamesAsGoalieInverseTable is the table name for the Game entity.
	// It exists in this package in order to avoid circular dependency with the "game" package.
	AwayGamesAsGoalieInverseTable = "games"
	// AwayGamesAsGoalieColumn is the table column denoting the awayGamesAsGoalie relation/edge.
	AwayGamesAsGoalieColumn = "player_away_games_as_goalie"
)

// Columns holds all SQL columns for player fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldPosition,
	FieldGoals,
	FieldAssists,
	FieldShutouts,
	FieldWins,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "players"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"entry_forwards",
	"entry_defenders",
	"entry_goalies",
	"team_players",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int) error
)

// Position defines the type for the "position" enum field.
type Position string

// Position values.
const (
	PositionForward    Position = "Forward"
	PositionDefenseman Position = "Defenseman"
	PositionGoalie     Position = "Goalie"
)

func (po Position) String() string {
	return string(po)
}

// PositionValidator is a validator for the "position" field enum values. It is called by the builders before save.
func PositionValidator(po Position) error {
	switch po {
	case PositionForward, PositionDefenseman, PositionGoalie:
		return nil
	default:
		return fmt.Errorf("player: invalid enum value for position field: %q", po)
	}
}

// OrderOption defines the ordering options for the Player queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByPosition orders the results by the position field.
func ByPosition(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPosition, opts...).ToFunc()
}

// ByGoals orders the results by the goals field.
func ByGoals(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGoals, opts...).ToFunc()
}

// ByAssists orders the results by the assists field.
func ByAssists(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAssists, opts...).ToFunc()
}

// ByShutouts orders the results by the shutouts field.
func ByShutouts(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShutouts, opts...).ToFunc()
}

// ByWins orders the results by the wins field.
func ByWins(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWins, opts...).ToFunc()
}

// ByTeamField orders the results by team field.
func ByTeamField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTeamStep(), sql.OrderByField(field, opts...))
	}
}

// ByHomeGamesAsGoalieCount orders the results by homeGamesAsGoalie count.
func ByHomeGamesAsGoalieCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHomeGamesAsGoalieStep(), opts...)
	}
}

// ByHomeGamesAsGoalie orders the results by homeGamesAsGoalie terms.
func ByHomeGamesAsGoalie(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHomeGamesAsGoalieStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAwayGamesAsGoalieCount orders the results by awayGamesAsGoalie count.
func ByAwayGamesAsGoalieCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAwayGamesAsGoalieStep(), opts...)
	}
}

// ByAwayGamesAsGoalie orders the results by awayGamesAsGoalie terms.
func ByAwayGamesAsGoalie(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAwayGamesAsGoalieStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTeamStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TeamInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TeamTable, TeamColumn),
	)
}
func newHomeGamesAsGoalieStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HomeGamesAsGoalieInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, HomeGamesAsGoalieTable, HomeGamesAsGoalieColumn),
	)
}
func newAwayGamesAsGoalieStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AwayGamesAsGoalieInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AwayGamesAsGoalieTable, AwayGamesAsGoalieColumn),
	)
}
