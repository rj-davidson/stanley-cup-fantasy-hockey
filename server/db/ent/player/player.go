// Code generated by ent, DO NOT EDIT.

package player

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the player type in the database.
	Label = "player"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPosition holds the string denoting the position field in the database.
	FieldPosition = "position"
	// EdgeTeam holds the string denoting the team edge name in mutations.
	EdgeTeam = "team"
	// EdgeEntries holds the string denoting the entries edge name in mutations.
	EdgeEntries = "entries"
	// EdgeSkaterStats holds the string denoting the skaterstats edge name in mutations.
	EdgeSkaterStats = "skaterStats"
	// EdgeGoalieStats holds the string denoting the goaliestats edge name in mutations.
	EdgeGoalieStats = "goalieStats"
	// Table holds the table name of the player in the database.
	Table = "players"
	// TeamTable is the table that holds the team relation/edge.
	TeamTable = "players"
	// TeamInverseTable is the table name for the Team entity.
	// It exists in this package in order to avoid circular dependency with the "team" package.
	TeamInverseTable = "teams"
	// TeamColumn is the table column denoting the team relation/edge.
	TeamColumn = "team_players"
	// EntriesTable is the table that holds the entries relation/edge. The primary key declared below.
	EntriesTable = "entry_players"
	// EntriesInverseTable is the table name for the Entry entity.
	// It exists in this package in order to avoid circular dependency with the "entry" package.
	EntriesInverseTable = "entries"
	// SkaterStatsTable is the table that holds the skaterStats relation/edge.
	SkaterStatsTable = "skater_stats"
	// SkaterStatsInverseTable is the table name for the SkaterStats entity.
	// It exists in this package in order to avoid circular dependency with the "skaterstats" package.
	SkaterStatsInverseTable = "skater_stats"
	// SkaterStatsColumn is the table column denoting the skaterStats relation/edge.
	SkaterStatsColumn = "player_skater_stats"
	// GoalieStatsTable is the table that holds the goalieStats relation/edge. The primary key declared below.
	GoalieStatsTable = "player_goalieStats"
	// GoalieStatsInverseTable is the table name for the GoalieStats entity.
	// It exists in this package in order to avoid circular dependency with the "goaliestats" package.
	GoalieStatsInverseTable = "goalie_stats"
)

// Columns holds all SQL columns for player fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldPosition,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "players"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"team_players",
}

var (
	// EntriesPrimaryKey and EntriesColumn2 are the table columns denoting the
	// primary key for the entries relation (M2M).
	EntriesPrimaryKey = []string{"entry_id", "player_id"}
	// GoalieStatsPrimaryKey and GoalieStatsColumn2 are the table columns denoting the
	// primary key for the goalieStats relation (M2M).
	GoalieStatsPrimaryKey = []string{"player_id", "goalie_stats_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int) error
)

// Position defines the type for the "position" enum field.
type Position string

// Position values.
const (
	PositionForward    Position = "Forward"
	PositionDefenseman Position = "Defenseman"
	PositionGoalie     Position = "Goalie"
)

func (po Position) String() string {
	return string(po)
}

// PositionValidator is a validator for the "position" field enum values. It is called by the builders before save.
func PositionValidator(po Position) error {
	switch po {
	case PositionForward, PositionDefenseman, PositionGoalie:
		return nil
	default:
		return fmt.Errorf("player: invalid enum value for position field: %q", po)
	}
}

// OrderOption defines the ordering options for the Player queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByPosition orders the results by the position field.
func ByPosition(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPosition, opts...).ToFunc()
}

// ByTeamField orders the results by team field.
func ByTeamField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTeamStep(), sql.OrderByField(field, opts...))
	}
}

// ByEntriesCount orders the results by entries count.
func ByEntriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEntriesStep(), opts...)
	}
}

// ByEntries orders the results by entries terms.
func ByEntries(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEntriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySkaterStatsCount orders the results by skaterStats count.
func BySkaterStatsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSkaterStatsStep(), opts...)
	}
}

// BySkaterStats orders the results by skaterStats terms.
func BySkaterStats(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSkaterStatsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByGoalieStatsCount orders the results by goalieStats count.
func ByGoalieStatsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGoalieStatsStep(), opts...)
	}
}

// ByGoalieStats orders the results by goalieStats terms.
func ByGoalieStats(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGoalieStatsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTeamStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TeamInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TeamTable, TeamColumn),
	)
}
func newEntriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EntriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, EntriesTable, EntriesPrimaryKey...),
	)
}
func newSkaterStatsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SkaterStatsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SkaterStatsTable, SkaterStatsColumn),
	)
}
func newGoalieStatsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GoalieStatsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, GoalieStatsTable, GoalieStatsPrimaryKey...),
	)
}
