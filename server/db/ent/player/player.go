// Code generated by ent, DO NOT EDIT.

package player

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the player type in the database.
	Label = "player"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPosition holds the string denoting the position field in the database.
	FieldPosition = "position"
	// EdgeTeam holds the string denoting the team edge name in mutations.
	EdgeTeam = "team"
	// EdgeEntries holds the string denoting the entries edge name in mutations.
	EdgeEntries = "entries"
	// EdgeStats holds the string denoting the stats edge name in mutations.
	EdgeStats = "stats"
	// EdgeGameStats holds the string denoting the gamestats edge name in mutations.
	EdgeGameStats = "gameStats"
	// Table holds the table name of the player in the database.
	Table = "players"
	// TeamTable is the table that holds the team relation/edge.
	TeamTable = "players"
	// TeamInverseTable is the table name for the Team entity.
	// It exists in this package in order to avoid circular dependency with the "team" package.
	TeamInverseTable = "teams"
	// TeamColumn is the table column denoting the team relation/edge.
	TeamColumn = "team_players"
	// EntriesTable is the table that holds the entries relation/edge. The primary key declared below.
	EntriesTable = "entry_players"
	// EntriesInverseTable is the table name for the Entry entity.
	// It exists in this package in order to avoid circular dependency with the "entry" package.
	EntriesInverseTable = "entries"
	// StatsTable is the table that holds the stats relation/edge.
	StatsTable = "players"
	// StatsInverseTable is the table name for the Stats entity.
	// It exists in this package in order to avoid circular dependency with the "stats" package.
	StatsInverseTable = "stats"
	// StatsColumn is the table column denoting the stats relation/edge.
	StatsColumn = "stats_player"
	// GameStatsTable is the table that holds the gameStats relation/edge.
	GameStatsTable = "game_stats"
	// GameStatsInverseTable is the table name for the GameStats entity.
	// It exists in this package in order to avoid circular dependency with the "gamestats" package.
	GameStatsInverseTable = "game_stats"
	// GameStatsColumn is the table column denoting the gameStats relation/edge.
	GameStatsColumn = "game_stats_player"
)

// Columns holds all SQL columns for player fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldPosition,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "players"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"stats_player",
	"team_players",
}

var (
	// EntriesPrimaryKey and EntriesColumn2 are the table columns denoting the
	// primary key for the entries relation (M2M).
	EntriesPrimaryKey = []string{"entry_id", "player_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int) error
)

// Position defines the type for the "position" enum field.
type Position string

// Position values.
const (
	PositionForward    Position = "Forward"
	PositionDefenseman Position = "Defenseman"
	PositionGoalie     Position = "Goalie"
)

func (po Position) String() string {
	return string(po)
}

// PositionValidator is a validator for the "position" field enum values. It is called by the builders before save.
func PositionValidator(po Position) error {
	switch po {
	case PositionForward, PositionDefenseman, PositionGoalie:
		return nil
	default:
		return fmt.Errorf("player: invalid enum value for position field: %q", po)
	}
}

// OrderOption defines the ordering options for the Player queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByPosition orders the results by the position field.
func ByPosition(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPosition, opts...).ToFunc()
}

// ByTeamField orders the results by team field.
func ByTeamField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTeamStep(), sql.OrderByField(field, opts...))
	}
}

// ByEntriesCount orders the results by entries count.
func ByEntriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEntriesStep(), opts...)
	}
}

// ByEntries orders the results by entries terms.
func ByEntries(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEntriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByStatsField orders the results by stats field.
func ByStatsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStatsStep(), sql.OrderByField(field, opts...))
	}
}

// ByGameStatsCount orders the results by gameStats count.
func ByGameStatsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGameStatsStep(), opts...)
	}
}

// ByGameStats orders the results by gameStats terms.
func ByGameStats(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGameStatsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTeamStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TeamInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TeamTable, TeamColumn),
	)
}
func newEntriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EntriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, EntriesTable, EntriesPrimaryKey...),
	)
}
func newStatsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StatsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, StatsTable, StatsColumn),
	)
}
func newGameStatsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GameStatsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, GameStatsTable, GameStatsColumn),
	)
}
