// Code generated by ent, DO NOT EDIT.

package player

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldName, v))
}

// Goals applies equality check predicate on the "goals" field. It's identical to GoalsEQ.
func Goals(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldGoals, v))
}

// Assists applies equality check predicate on the "assists" field. It's identical to AssistsEQ.
func Assists(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldAssists, v))
}

// Shutouts applies equality check predicate on the "shutouts" field. It's identical to ShutoutsEQ.
func Shutouts(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldShutouts, v))
}

// Wins applies equality check predicate on the "wins" field. It's identical to WinsEQ.
func Wins(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldWins, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Player {
	return predicate.Player(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Player {
	return predicate.Player(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Player {
	return predicate.Player(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Player {
	return predicate.Player(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Player {
	return predicate.Player(sql.FieldContainsFold(FieldName, v))
}

// PositionEQ applies the EQ predicate on the "position" field.
func PositionEQ(v Position) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldPosition, v))
}

// PositionNEQ applies the NEQ predicate on the "position" field.
func PositionNEQ(v Position) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldPosition, v))
}

// PositionIn applies the In predicate on the "position" field.
func PositionIn(vs ...Position) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldPosition, vs...))
}

// PositionNotIn applies the NotIn predicate on the "position" field.
func PositionNotIn(vs ...Position) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldPosition, vs...))
}

// GoalsEQ applies the EQ predicate on the "goals" field.
func GoalsEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldGoals, v))
}

// GoalsNEQ applies the NEQ predicate on the "goals" field.
func GoalsNEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldGoals, v))
}

// GoalsIn applies the In predicate on the "goals" field.
func GoalsIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldGoals, vs...))
}

// GoalsNotIn applies the NotIn predicate on the "goals" field.
func GoalsNotIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldGoals, vs...))
}

// GoalsGT applies the GT predicate on the "goals" field.
func GoalsGT(v int) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldGoals, v))
}

// GoalsGTE applies the GTE predicate on the "goals" field.
func GoalsGTE(v int) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldGoals, v))
}

// GoalsLT applies the LT predicate on the "goals" field.
func GoalsLT(v int) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldGoals, v))
}

// GoalsLTE applies the LTE predicate on the "goals" field.
func GoalsLTE(v int) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldGoals, v))
}

// AssistsEQ applies the EQ predicate on the "assists" field.
func AssistsEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldAssists, v))
}

// AssistsNEQ applies the NEQ predicate on the "assists" field.
func AssistsNEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldAssists, v))
}

// AssistsIn applies the In predicate on the "assists" field.
func AssistsIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldAssists, vs...))
}

// AssistsNotIn applies the NotIn predicate on the "assists" field.
func AssistsNotIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldAssists, vs...))
}

// AssistsGT applies the GT predicate on the "assists" field.
func AssistsGT(v int) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldAssists, v))
}

// AssistsGTE applies the GTE predicate on the "assists" field.
func AssistsGTE(v int) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldAssists, v))
}

// AssistsLT applies the LT predicate on the "assists" field.
func AssistsLT(v int) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldAssists, v))
}

// AssistsLTE applies the LTE predicate on the "assists" field.
func AssistsLTE(v int) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldAssists, v))
}

// ShutoutsEQ applies the EQ predicate on the "shutouts" field.
func ShutoutsEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldShutouts, v))
}

// ShutoutsNEQ applies the NEQ predicate on the "shutouts" field.
func ShutoutsNEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldShutouts, v))
}

// ShutoutsIn applies the In predicate on the "shutouts" field.
func ShutoutsIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldShutouts, vs...))
}

// ShutoutsNotIn applies the NotIn predicate on the "shutouts" field.
func ShutoutsNotIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldShutouts, vs...))
}

// ShutoutsGT applies the GT predicate on the "shutouts" field.
func ShutoutsGT(v int) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldShutouts, v))
}

// ShutoutsGTE applies the GTE predicate on the "shutouts" field.
func ShutoutsGTE(v int) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldShutouts, v))
}

// ShutoutsLT applies the LT predicate on the "shutouts" field.
func ShutoutsLT(v int) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldShutouts, v))
}

// ShutoutsLTE applies the LTE predicate on the "shutouts" field.
func ShutoutsLTE(v int) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldShutouts, v))
}

// WinsEQ applies the EQ predicate on the "wins" field.
func WinsEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldEQ(FieldWins, v))
}

// WinsNEQ applies the NEQ predicate on the "wins" field.
func WinsNEQ(v int) predicate.Player {
	return predicate.Player(sql.FieldNEQ(FieldWins, v))
}

// WinsIn applies the In predicate on the "wins" field.
func WinsIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldIn(FieldWins, vs...))
}

// WinsNotIn applies the NotIn predicate on the "wins" field.
func WinsNotIn(vs ...int) predicate.Player {
	return predicate.Player(sql.FieldNotIn(FieldWins, vs...))
}

// WinsGT applies the GT predicate on the "wins" field.
func WinsGT(v int) predicate.Player {
	return predicate.Player(sql.FieldGT(FieldWins, v))
}

// WinsGTE applies the GTE predicate on the "wins" field.
func WinsGTE(v int) predicate.Player {
	return predicate.Player(sql.FieldGTE(FieldWins, v))
}

// WinsLT applies the LT predicate on the "wins" field.
func WinsLT(v int) predicate.Player {
	return predicate.Player(sql.FieldLT(FieldWins, v))
}

// WinsLTE applies the LTE predicate on the "wins" field.
func WinsLTE(v int) predicate.Player {
	return predicate.Player(sql.FieldLTE(FieldWins, v))
}

// HasTeam applies the HasEdge predicate on the "team" edge.
func HasTeam() predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TeamTable, TeamColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTeamWith applies the HasEdge predicate on the "team" edge with a given conditions (other predicates).
func HasTeamWith(preds ...predicate.Team) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		step := newTeamStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasEntries applies the HasEdge predicate on the "entries" edge.
func HasEntries() predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, EntriesTable, EntriesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEntriesWith applies the HasEdge predicate on the "entries" edge with a given conditions (other predicates).
func HasEntriesWith(preds ...predicate.Entry) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		step := newEntriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHomeGamesAsGoalie applies the HasEdge predicate on the "homeGamesAsGoalie" edge.
func HasHomeGamesAsGoalie() predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, HomeGamesAsGoalieTable, HomeGamesAsGoalieColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHomeGamesAsGoalieWith applies the HasEdge predicate on the "homeGamesAsGoalie" edge with a given conditions (other predicates).
func HasHomeGamesAsGoalieWith(preds ...predicate.Game) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		step := newHomeGamesAsGoalieStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAwayGamesAsGoalie applies the HasEdge predicate on the "awayGamesAsGoalie" edge.
func HasAwayGamesAsGoalie() predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AwayGamesAsGoalieTable, AwayGamesAsGoalieColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAwayGamesAsGoalieWith applies the HasEdge predicate on the "awayGamesAsGoalie" edge with a given conditions (other predicates).
func HasAwayGamesAsGoalieWith(preds ...predicate.Game) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		step := newAwayGamesAsGoalieStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Player) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Player) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Player) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		p(s.Not())
	})
}
