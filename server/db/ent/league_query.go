// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/entry"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/league"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/predicate"
)

// LeagueQuery is the builder for querying League entities.
type LeagueQuery struct {
	config
	ctx         *QueryContext
	order       []league.OrderOption
	inters      []Interceptor
	predicates  []predicate.League
	withEntries *EntryQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the LeagueQuery builder.
func (lq *LeagueQuery) Where(ps ...predicate.League) *LeagueQuery {
	lq.predicates = append(lq.predicates, ps...)
	return lq
}

// Limit the number of records to be returned by this query.
func (lq *LeagueQuery) Limit(limit int) *LeagueQuery {
	lq.ctx.Limit = &limit
	return lq
}

// Offset to start from.
func (lq *LeagueQuery) Offset(offset int) *LeagueQuery {
	lq.ctx.Offset = &offset
	return lq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (lq *LeagueQuery) Unique(unique bool) *LeagueQuery {
	lq.ctx.Unique = &unique
	return lq
}

// Order specifies how the records should be ordered.
func (lq *LeagueQuery) Order(o ...league.OrderOption) *LeagueQuery {
	lq.order = append(lq.order, o...)
	return lq
}

// QueryEntries chains the current query on the "entries" edge.
func (lq *LeagueQuery) QueryEntries() *EntryQuery {
	query := (&EntryClient{config: lq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := lq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := lq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(league.Table, league.FieldID, selector),
			sqlgraph.To(entry.Table, entry.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, league.EntriesTable, league.EntriesColumn),
		)
		fromU = sqlgraph.SetNeighbors(lq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first League entity from the query.
// Returns a *NotFoundError when no League was found.
func (lq *LeagueQuery) First(ctx context.Context) (*League, error) {
	nodes, err := lq.Limit(1).All(setContextOp(ctx, lq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{league.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (lq *LeagueQuery) FirstX(ctx context.Context) *League {
	node, err := lq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first League ID from the query.
// Returns a *NotFoundError when no League ID was found.
func (lq *LeagueQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = lq.Limit(1).IDs(setContextOp(ctx, lq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{league.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (lq *LeagueQuery) FirstIDX(ctx context.Context) int {
	id, err := lq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single League entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one League entity is found.
// Returns a *NotFoundError when no League entities are found.
func (lq *LeagueQuery) Only(ctx context.Context) (*League, error) {
	nodes, err := lq.Limit(2).All(setContextOp(ctx, lq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{league.Label}
	default:
		return nil, &NotSingularError{league.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (lq *LeagueQuery) OnlyX(ctx context.Context) *League {
	node, err := lq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only League ID in the query.
// Returns a *NotSingularError when more than one League ID is found.
// Returns a *NotFoundError when no entities are found.
func (lq *LeagueQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = lq.Limit(2).IDs(setContextOp(ctx, lq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{league.Label}
	default:
		err = &NotSingularError{league.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (lq *LeagueQuery) OnlyIDX(ctx context.Context) int {
	id, err := lq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Leagues.
func (lq *LeagueQuery) All(ctx context.Context) ([]*League, error) {
	ctx = setContextOp(ctx, lq.ctx, "All")
	if err := lq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*League, *LeagueQuery]()
	return withInterceptors[[]*League](ctx, lq, qr, lq.inters)
}

// AllX is like All, but panics if an error occurs.
func (lq *LeagueQuery) AllX(ctx context.Context) []*League {
	nodes, err := lq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of League IDs.
func (lq *LeagueQuery) IDs(ctx context.Context) (ids []int, err error) {
	if lq.ctx.Unique == nil && lq.path != nil {
		lq.Unique(true)
	}
	ctx = setContextOp(ctx, lq.ctx, "IDs")
	if err = lq.Select(league.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (lq *LeagueQuery) IDsX(ctx context.Context) []int {
	ids, err := lq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (lq *LeagueQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, lq.ctx, "Count")
	if err := lq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, lq, querierCount[*LeagueQuery](), lq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (lq *LeagueQuery) CountX(ctx context.Context) int {
	count, err := lq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (lq *LeagueQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, lq.ctx, "Exist")
	switch _, err := lq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (lq *LeagueQuery) ExistX(ctx context.Context) bool {
	exist, err := lq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the LeagueQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (lq *LeagueQuery) Clone() *LeagueQuery {
	if lq == nil {
		return nil
	}
	return &LeagueQuery{
		config:      lq.config,
		ctx:         lq.ctx.Clone(),
		order:       append([]league.OrderOption{}, lq.order...),
		inters:      append([]Interceptor{}, lq.inters...),
		predicates:  append([]predicate.League{}, lq.predicates...),
		withEntries: lq.withEntries.Clone(),
		// clone intermediate query.
		sql:  lq.sql.Clone(),
		path: lq.path,
	}
}

// WithEntries tells the query-builder to eager-load the nodes that are connected to
// the "entries" edge. The optional arguments are used to configure the query builder of the edge.
func (lq *LeagueQuery) WithEntries(opts ...func(*EntryQuery)) *LeagueQuery {
	query := (&EntryClient{config: lq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	lq.withEntries = query
	return lq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Season int `json:"season,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.League.Query().
//		GroupBy(league.FieldSeason).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (lq *LeagueQuery) GroupBy(field string, fields ...string) *LeagueGroupBy {
	lq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &LeagueGroupBy{build: lq}
	grbuild.flds = &lq.ctx.Fields
	grbuild.label = league.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Season int `json:"season,omitempty"`
//	}
//
//	client.League.Query().
//		Select(league.FieldSeason).
//		Scan(ctx, &v)
func (lq *LeagueQuery) Select(fields ...string) *LeagueSelect {
	lq.ctx.Fields = append(lq.ctx.Fields, fields...)
	sbuild := &LeagueSelect{LeagueQuery: lq}
	sbuild.label = league.Label
	sbuild.flds, sbuild.scan = &lq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a LeagueSelect configured with the given aggregations.
func (lq *LeagueQuery) Aggregate(fns ...AggregateFunc) *LeagueSelect {
	return lq.Select().Aggregate(fns...)
}

func (lq *LeagueQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range lq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, lq); err != nil {
				return err
			}
		}
	}
	for _, f := range lq.ctx.Fields {
		if !league.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if lq.path != nil {
		prev, err := lq.path(ctx)
		if err != nil {
			return err
		}
		lq.sql = prev
	}
	return nil
}

func (lq *LeagueQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*League, error) {
	var (
		nodes       = []*League{}
		_spec       = lq.querySpec()
		loadedTypes = [1]bool{
			lq.withEntries != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*League).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &League{config: lq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, lq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := lq.withEntries; query != nil {
		if err := lq.loadEntries(ctx, query, nodes,
			func(n *League) { n.Edges.Entries = []*Entry{} },
			func(n *League, e *Entry) { n.Edges.Entries = append(n.Edges.Entries, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (lq *LeagueQuery) loadEntries(ctx context.Context, query *EntryQuery, nodes []*League, init func(*League), assign func(*League, *Entry)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*League)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Entry(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(league.EntriesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.league_entries
		if fk == nil {
			return fmt.Errorf(`foreign-key "league_entries" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "league_entries" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (lq *LeagueQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := lq.querySpec()
	_spec.Node.Columns = lq.ctx.Fields
	if len(lq.ctx.Fields) > 0 {
		_spec.Unique = lq.ctx.Unique != nil && *lq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, lq.driver, _spec)
}

func (lq *LeagueQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(league.Table, league.Columns, sqlgraph.NewFieldSpec(league.FieldID, field.TypeInt))
	_spec.From = lq.sql
	if unique := lq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if lq.path != nil {
		_spec.Unique = true
	}
	if fields := lq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, league.FieldID)
		for i := range fields {
			if fields[i] != league.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := lq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := lq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := lq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := lq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (lq *LeagueQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(lq.driver.Dialect())
	t1 := builder.Table(league.Table)
	columns := lq.ctx.Fields
	if len(columns) == 0 {
		columns = league.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if lq.sql != nil {
		selector = lq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if lq.ctx.Unique != nil && *lq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range lq.predicates {
		p(selector)
	}
	for _, p := range lq.order {
		p(selector)
	}
	if offset := lq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := lq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// LeagueGroupBy is the group-by builder for League entities.
type LeagueGroupBy struct {
	selector
	build *LeagueQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (lgb *LeagueGroupBy) Aggregate(fns ...AggregateFunc) *LeagueGroupBy {
	lgb.fns = append(lgb.fns, fns...)
	return lgb
}

// Scan applies the selector query and scans the result into the given value.
func (lgb *LeagueGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, lgb.build.ctx, "GroupBy")
	if err := lgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LeagueQuery, *LeagueGroupBy](ctx, lgb.build, lgb, lgb.build.inters, v)
}

func (lgb *LeagueGroupBy) sqlScan(ctx context.Context, root *LeagueQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(lgb.fns))
	for _, fn := range lgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*lgb.flds)+len(lgb.fns))
		for _, f := range *lgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*lgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := lgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// LeagueSelect is the builder for selecting fields of League entities.
type LeagueSelect struct {
	*LeagueQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ls *LeagueSelect) Aggregate(fns ...AggregateFunc) *LeagueSelect {
	ls.fns = append(ls.fns, fns...)
	return ls
}

// Scan applies the selector query and scans the result into the given value.
func (ls *LeagueSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ls.ctx, "Select")
	if err := ls.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*LeagueQuery, *LeagueSelect](ctx, ls.LeagueQuery, ls, ls.inters, v)
}

func (ls *LeagueSelect) sqlScan(ctx context.Context, root *LeagueQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ls.fns))
	for _, fn := range ls.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ls.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ls.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
