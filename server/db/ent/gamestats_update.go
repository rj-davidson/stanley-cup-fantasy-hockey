// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/gamestats"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/predicate"
)

// GameStatsUpdate is the builder for updating GameStats entities.
type GameStatsUpdate struct {
	config
	hooks    []Hook
	mutation *GameStatsMutation
}

// Where appends a list predicates to the GameStatsUpdate builder.
func (gsu *GameStatsUpdate) Where(ps ...predicate.GameStats) *GameStatsUpdate {
	gsu.mutation.Where(ps...)
	return gsu
}

// SetGoals sets the "goals" field.
func (gsu *GameStatsUpdate) SetGoals(i int) *GameStatsUpdate {
	gsu.mutation.ResetGoals()
	gsu.mutation.SetGoals(i)
	return gsu
}

// SetNillableGoals sets the "goals" field if the given value is not nil.
func (gsu *GameStatsUpdate) SetNillableGoals(i *int) *GameStatsUpdate {
	if i != nil {
		gsu.SetGoals(*i)
	}
	return gsu
}

// AddGoals adds i to the "goals" field.
func (gsu *GameStatsUpdate) AddGoals(i int) *GameStatsUpdate {
	gsu.mutation.AddGoals(i)
	return gsu
}

// SetAssists sets the "assists" field.
func (gsu *GameStatsUpdate) SetAssists(i int) *GameStatsUpdate {
	gsu.mutation.ResetAssists()
	gsu.mutation.SetAssists(i)
	return gsu
}

// SetNillableAssists sets the "assists" field if the given value is not nil.
func (gsu *GameStatsUpdate) SetNillableAssists(i *int) *GameStatsUpdate {
	if i != nil {
		gsu.SetAssists(*i)
	}
	return gsu
}

// AddAssists adds i to the "assists" field.
func (gsu *GameStatsUpdate) AddAssists(i int) *GameStatsUpdate {
	gsu.mutation.AddAssists(i)
	return gsu
}

// SetWin sets the "win" field.
func (gsu *GameStatsUpdate) SetWin(b bool) *GameStatsUpdate {
	gsu.mutation.SetWin(b)
	return gsu
}

// SetNillableWin sets the "win" field if the given value is not nil.
func (gsu *GameStatsUpdate) SetNillableWin(b *bool) *GameStatsUpdate {
	if b != nil {
		gsu.SetWin(*b)
	}
	return gsu
}

// SetShutout sets the "shutout" field.
func (gsu *GameStatsUpdate) SetShutout(b bool) *GameStatsUpdate {
	gsu.mutation.SetShutout(b)
	return gsu
}

// SetNillableShutout sets the "shutout" field if the given value is not nil.
func (gsu *GameStatsUpdate) SetNillableShutout(b *bool) *GameStatsUpdate {
	if b != nil {
		gsu.SetShutout(*b)
	}
	return gsu
}

// SetHomeGame sets the "homeGame" field.
func (gsu *GameStatsUpdate) SetHomeGame(b bool) *GameStatsUpdate {
	gsu.mutation.SetHomeGame(b)
	return gsu
}

// SetNillableHomeGame sets the "homeGame" field if the given value is not nil.
func (gsu *GameStatsUpdate) SetNillableHomeGame(b *bool) *GameStatsUpdate {
	if b != nil {
		gsu.SetHomeGame(*b)
	}
	return gsu
}

// Mutation returns the GameStatsMutation object of the builder.
func (gsu *GameStatsUpdate) Mutation() *GameStatsMutation {
	return gsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gsu *GameStatsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, gsu.sqlSave, gsu.mutation, gsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gsu *GameStatsUpdate) SaveX(ctx context.Context) int {
	affected, err := gsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gsu *GameStatsUpdate) Exec(ctx context.Context) error {
	_, err := gsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gsu *GameStatsUpdate) ExecX(ctx context.Context) {
	if err := gsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gsu *GameStatsUpdate) check() error {
	if _, ok := gsu.mutation.GameID(); gsu.mutation.GameCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "GameStats.game"`)
	}
	if _, ok := gsu.mutation.PlayerID(); gsu.mutation.PlayerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "GameStats.player"`)
	}
	return nil
}

func (gsu *GameStatsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(gamestats.Table, gamestats.Columns, sqlgraph.NewFieldSpec(gamestats.FieldID, field.TypeInt))
	if ps := gsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gsu.mutation.Goals(); ok {
		_spec.SetField(gamestats.FieldGoals, field.TypeInt, value)
	}
	if value, ok := gsu.mutation.AddedGoals(); ok {
		_spec.AddField(gamestats.FieldGoals, field.TypeInt, value)
	}
	if value, ok := gsu.mutation.Assists(); ok {
		_spec.SetField(gamestats.FieldAssists, field.TypeInt, value)
	}
	if value, ok := gsu.mutation.AddedAssists(); ok {
		_spec.AddField(gamestats.FieldAssists, field.TypeInt, value)
	}
	if value, ok := gsu.mutation.Win(); ok {
		_spec.SetField(gamestats.FieldWin, field.TypeBool, value)
	}
	if value, ok := gsu.mutation.Shutout(); ok {
		_spec.SetField(gamestats.FieldShutout, field.TypeBool, value)
	}
	if value, ok := gsu.mutation.HomeGame(); ok {
		_spec.SetField(gamestats.FieldHomeGame, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gamestats.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gsu.mutation.done = true
	return n, nil
}

// GameStatsUpdateOne is the builder for updating a single GameStats entity.
type GameStatsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GameStatsMutation
}

// SetGoals sets the "goals" field.
func (gsuo *GameStatsUpdateOne) SetGoals(i int) *GameStatsUpdateOne {
	gsuo.mutation.ResetGoals()
	gsuo.mutation.SetGoals(i)
	return gsuo
}

// SetNillableGoals sets the "goals" field if the given value is not nil.
func (gsuo *GameStatsUpdateOne) SetNillableGoals(i *int) *GameStatsUpdateOne {
	if i != nil {
		gsuo.SetGoals(*i)
	}
	return gsuo
}

// AddGoals adds i to the "goals" field.
func (gsuo *GameStatsUpdateOne) AddGoals(i int) *GameStatsUpdateOne {
	gsuo.mutation.AddGoals(i)
	return gsuo
}

// SetAssists sets the "assists" field.
func (gsuo *GameStatsUpdateOne) SetAssists(i int) *GameStatsUpdateOne {
	gsuo.mutation.ResetAssists()
	gsuo.mutation.SetAssists(i)
	return gsuo
}

// SetNillableAssists sets the "assists" field if the given value is not nil.
func (gsuo *GameStatsUpdateOne) SetNillableAssists(i *int) *GameStatsUpdateOne {
	if i != nil {
		gsuo.SetAssists(*i)
	}
	return gsuo
}

// AddAssists adds i to the "assists" field.
func (gsuo *GameStatsUpdateOne) AddAssists(i int) *GameStatsUpdateOne {
	gsuo.mutation.AddAssists(i)
	return gsuo
}

// SetWin sets the "win" field.
func (gsuo *GameStatsUpdateOne) SetWin(b bool) *GameStatsUpdateOne {
	gsuo.mutation.SetWin(b)
	return gsuo
}

// SetNillableWin sets the "win" field if the given value is not nil.
func (gsuo *GameStatsUpdateOne) SetNillableWin(b *bool) *GameStatsUpdateOne {
	if b != nil {
		gsuo.SetWin(*b)
	}
	return gsuo
}

// SetShutout sets the "shutout" field.
func (gsuo *GameStatsUpdateOne) SetShutout(b bool) *GameStatsUpdateOne {
	gsuo.mutation.SetShutout(b)
	return gsuo
}

// SetNillableShutout sets the "shutout" field if the given value is not nil.
func (gsuo *GameStatsUpdateOne) SetNillableShutout(b *bool) *GameStatsUpdateOne {
	if b != nil {
		gsuo.SetShutout(*b)
	}
	return gsuo
}

// SetHomeGame sets the "homeGame" field.
func (gsuo *GameStatsUpdateOne) SetHomeGame(b bool) *GameStatsUpdateOne {
	gsuo.mutation.SetHomeGame(b)
	return gsuo
}

// SetNillableHomeGame sets the "homeGame" field if the given value is not nil.
func (gsuo *GameStatsUpdateOne) SetNillableHomeGame(b *bool) *GameStatsUpdateOne {
	if b != nil {
		gsuo.SetHomeGame(*b)
	}
	return gsuo
}

// Mutation returns the GameStatsMutation object of the builder.
func (gsuo *GameStatsUpdateOne) Mutation() *GameStatsMutation {
	return gsuo.mutation
}

// Where appends a list predicates to the GameStatsUpdate builder.
func (gsuo *GameStatsUpdateOne) Where(ps ...predicate.GameStats) *GameStatsUpdateOne {
	gsuo.mutation.Where(ps...)
	return gsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gsuo *GameStatsUpdateOne) Select(field string, fields ...string) *GameStatsUpdateOne {
	gsuo.fields = append([]string{field}, fields...)
	return gsuo
}

// Save executes the query and returns the updated GameStats entity.
func (gsuo *GameStatsUpdateOne) Save(ctx context.Context) (*GameStats, error) {
	return withHooks(ctx, gsuo.sqlSave, gsuo.mutation, gsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gsuo *GameStatsUpdateOne) SaveX(ctx context.Context) *GameStats {
	node, err := gsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gsuo *GameStatsUpdateOne) Exec(ctx context.Context) error {
	_, err := gsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gsuo *GameStatsUpdateOne) ExecX(ctx context.Context) {
	if err := gsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gsuo *GameStatsUpdateOne) check() error {
	if _, ok := gsuo.mutation.GameID(); gsuo.mutation.GameCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "GameStats.game"`)
	}
	if _, ok := gsuo.mutation.PlayerID(); gsuo.mutation.PlayerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "GameStats.player"`)
	}
	return nil
}

func (gsuo *GameStatsUpdateOne) sqlSave(ctx context.Context) (_node *GameStats, err error) {
	if err := gsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(gamestats.Table, gamestats.Columns, sqlgraph.NewFieldSpec(gamestats.FieldID, field.TypeInt))
	id, ok := gsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GameStats.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, gamestats.FieldID)
		for _, f := range fields {
			if !gamestats.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != gamestats.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gsuo.mutation.Goals(); ok {
		_spec.SetField(gamestats.FieldGoals, field.TypeInt, value)
	}
	if value, ok := gsuo.mutation.AddedGoals(); ok {
		_spec.AddField(gamestats.FieldGoals, field.TypeInt, value)
	}
	if value, ok := gsuo.mutation.Assists(); ok {
		_spec.SetField(gamestats.FieldAssists, field.TypeInt, value)
	}
	if value, ok := gsuo.mutation.AddedAssists(); ok {
		_spec.AddField(gamestats.FieldAssists, field.TypeInt, value)
	}
	if value, ok := gsuo.mutation.Win(); ok {
		_spec.SetField(gamestats.FieldWin, field.TypeBool, value)
	}
	if value, ok := gsuo.mutation.Shutout(); ok {
		_spec.SetField(gamestats.FieldShutout, field.TypeBool, value)
	}
	if value, ok := gsuo.mutation.HomeGame(); ok {
		_spec.SetField(gamestats.FieldHomeGame, field.TypeBool, value)
	}
	_node = &GameStats{config: gsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gamestats.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	gsuo.mutation.done = true
	return _node, nil
}
