// Code generated by ent, DO NOT EDIT.

package team

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Team {
	return predicate.Team(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Team {
	return predicate.Team(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Team {
	return predicate.Team(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Team {
	return predicate.Team(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Team {
	return predicate.Team(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Team {
	return predicate.Team(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Team {
	return predicate.Team(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldName, v))
}

// LogoFilepath applies equality check predicate on the "logo_filepath" field. It's identical to LogoFilepathEQ.
func LogoFilepath(v string) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldLogoFilepath, v))
}

// Eliminated applies equality check predicate on the "eliminated" field. It's identical to EliminatedEQ.
func Eliminated(v bool) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldEliminated, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Team {
	return predicate.Team(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Team {
	return predicate.Team(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Team {
	return predicate.Team(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Team {
	return predicate.Team(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Team {
	return predicate.Team(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Team {
	return predicate.Team(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Team {
	return predicate.Team(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Team {
	return predicate.Team(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Team {
	return predicate.Team(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Team {
	return predicate.Team(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Team {
	return predicate.Team(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Team {
	return predicate.Team(sql.FieldContainsFold(FieldName, v))
}

// LogoFilepathEQ applies the EQ predicate on the "logo_filepath" field.
func LogoFilepathEQ(v string) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldLogoFilepath, v))
}

// LogoFilepathNEQ applies the NEQ predicate on the "logo_filepath" field.
func LogoFilepathNEQ(v string) predicate.Team {
	return predicate.Team(sql.FieldNEQ(FieldLogoFilepath, v))
}

// LogoFilepathIn applies the In predicate on the "logo_filepath" field.
func LogoFilepathIn(vs ...string) predicate.Team {
	return predicate.Team(sql.FieldIn(FieldLogoFilepath, vs...))
}

// LogoFilepathNotIn applies the NotIn predicate on the "logo_filepath" field.
func LogoFilepathNotIn(vs ...string) predicate.Team {
	return predicate.Team(sql.FieldNotIn(FieldLogoFilepath, vs...))
}

// LogoFilepathGT applies the GT predicate on the "logo_filepath" field.
func LogoFilepathGT(v string) predicate.Team {
	return predicate.Team(sql.FieldGT(FieldLogoFilepath, v))
}

// LogoFilepathGTE applies the GTE predicate on the "logo_filepath" field.
func LogoFilepathGTE(v string) predicate.Team {
	return predicate.Team(sql.FieldGTE(FieldLogoFilepath, v))
}

// LogoFilepathLT applies the LT predicate on the "logo_filepath" field.
func LogoFilepathLT(v string) predicate.Team {
	return predicate.Team(sql.FieldLT(FieldLogoFilepath, v))
}

// LogoFilepathLTE applies the LTE predicate on the "logo_filepath" field.
func LogoFilepathLTE(v string) predicate.Team {
	return predicate.Team(sql.FieldLTE(FieldLogoFilepath, v))
}

// LogoFilepathContains applies the Contains predicate on the "logo_filepath" field.
func LogoFilepathContains(v string) predicate.Team {
	return predicate.Team(sql.FieldContains(FieldLogoFilepath, v))
}

// LogoFilepathHasPrefix applies the HasPrefix predicate on the "logo_filepath" field.
func LogoFilepathHasPrefix(v string) predicate.Team {
	return predicate.Team(sql.FieldHasPrefix(FieldLogoFilepath, v))
}

// LogoFilepathHasSuffix applies the HasSuffix predicate on the "logo_filepath" field.
func LogoFilepathHasSuffix(v string) predicate.Team {
	return predicate.Team(sql.FieldHasSuffix(FieldLogoFilepath, v))
}

// LogoFilepathEqualFold applies the EqualFold predicate on the "logo_filepath" field.
func LogoFilepathEqualFold(v string) predicate.Team {
	return predicate.Team(sql.FieldEqualFold(FieldLogoFilepath, v))
}

// LogoFilepathContainsFold applies the ContainsFold predicate on the "logo_filepath" field.
func LogoFilepathContainsFold(v string) predicate.Team {
	return predicate.Team(sql.FieldContainsFold(FieldLogoFilepath, v))
}

// EliminatedEQ applies the EQ predicate on the "eliminated" field.
func EliminatedEQ(v bool) predicate.Team {
	return predicate.Team(sql.FieldEQ(FieldEliminated, v))
}

// EliminatedNEQ applies the NEQ predicate on the "eliminated" field.
func EliminatedNEQ(v bool) predicate.Team {
	return predicate.Team(sql.FieldNEQ(FieldEliminated, v))
}

// HasPlayers applies the HasEdge predicate on the "players" edge.
func HasPlayers() predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PlayersTable, PlayersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPlayersWith applies the HasEdge predicate on the "players" edge with a given conditions (other predicates).
func HasPlayersWith(preds ...predicate.Player) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		step := newPlayersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Team) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Team) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Team) predicate.Team {
	return predicate.Team(func(s *sql.Selector) {
		p(s.Not())
	})
}
