// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/player"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/team"
)

// Player is the model entity for the Player schema.
type Player struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Position holds the value of the "position" field.
	Position player.Position `json:"position,omitempty"`
	// Goals holds the value of the "goals" field.
	Goals int `json:"goals,omitempty"`
	// Assists holds the value of the "assists" field.
	Assists int `json:"assists,omitempty"`
	// Shutouts holds the value of the "shutouts" field.
	Shutouts int `json:"shutouts,omitempty"`
	// Wins holds the value of the "wins" field.
	Wins int `json:"wins,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PlayerQuery when eager-loading is set.
	Edges           PlayerEdges `json:"edges"`
	entry_forwards  *int
	entry_defenders *int
	entry_goalies   *int
	team_players    *int
	selectValues    sql.SelectValues
}

// PlayerEdges holds the relations/edges for other nodes in the graph.
type PlayerEdges struct {
	// Team holds the value of the team edge.
	Team *Team `json:"team,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TeamOrErr returns the Team value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PlayerEdges) TeamOrErr() (*Team, error) {
	if e.loadedTypes[0] {
		if e.Team == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: team.Label}
		}
		return e.Team, nil
	}
	return nil, &NotLoadedError{edge: "team"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Player) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case player.FieldID, player.FieldGoals, player.FieldAssists, player.FieldShutouts, player.FieldWins:
			values[i] = new(sql.NullInt64)
		case player.FieldName, player.FieldPosition:
			values[i] = new(sql.NullString)
		case player.ForeignKeys[0]: // entry_forwards
			values[i] = new(sql.NullInt64)
		case player.ForeignKeys[1]: // entry_defenders
			values[i] = new(sql.NullInt64)
		case player.ForeignKeys[2]: // entry_goalies
			values[i] = new(sql.NullInt64)
		case player.ForeignKeys[3]: // team_players
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Player fields.
func (pl *Player) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case player.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pl.ID = int(value.Int64)
		case player.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pl.Name = value.String
			}
		case player.FieldPosition:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field position", values[i])
			} else if value.Valid {
				pl.Position = player.Position(value.String)
			}
		case player.FieldGoals:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field goals", values[i])
			} else if value.Valid {
				pl.Goals = int(value.Int64)
			}
		case player.FieldAssists:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field assists", values[i])
			} else if value.Valid {
				pl.Assists = int(value.Int64)
			}
		case player.FieldShutouts:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field shutouts", values[i])
			} else if value.Valid {
				pl.Shutouts = int(value.Int64)
			}
		case player.FieldWins:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field wins", values[i])
			} else if value.Valid {
				pl.Wins = int(value.Int64)
			}
		case player.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field entry_forwards", value)
			} else if value.Valid {
				pl.entry_forwards = new(int)
				*pl.entry_forwards = int(value.Int64)
			}
		case player.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field entry_defenders", value)
			} else if value.Valid {
				pl.entry_defenders = new(int)
				*pl.entry_defenders = int(value.Int64)
			}
		case player.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field entry_goalies", value)
			} else if value.Valid {
				pl.entry_goalies = new(int)
				*pl.entry_goalies = int(value.Int64)
			}
		case player.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field team_players", value)
			} else if value.Valid {
				pl.team_players = new(int)
				*pl.team_players = int(value.Int64)
			}
		default:
			pl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Player.
// This includes values selected through modifiers, order, etc.
func (pl *Player) Value(name string) (ent.Value, error) {
	return pl.selectValues.Get(name)
}

// QueryTeam queries the "team" edge of the Player entity.
func (pl *Player) QueryTeam() *TeamQuery {
	return NewPlayerClient(pl.config).QueryTeam(pl)
}

// Update returns a builder for updating this Player.
// Note that you need to call Player.Unwrap() before calling this method if this Player
// was returned from a transaction, and the transaction was committed or rolled back.
func (pl *Player) Update() *PlayerUpdateOne {
	return NewPlayerClient(pl.config).UpdateOne(pl)
}

// Unwrap unwraps the Player entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pl *Player) Unwrap() *Player {
	_tx, ok := pl.config.driver.(*txDriver)
	if !ok {
		panic("ent: Player is not a transactional entity")
	}
	pl.config.driver = _tx.drv
	return pl
}

// String implements the fmt.Stringer.
func (pl *Player) String() string {
	var builder strings.Builder
	builder.WriteString("Player(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pl.ID))
	builder.WriteString("name=")
	builder.WriteString(pl.Name)
	builder.WriteString(", ")
	builder.WriteString("position=")
	builder.WriteString(fmt.Sprintf("%v", pl.Position))
	builder.WriteString(", ")
	builder.WriteString("goals=")
	builder.WriteString(fmt.Sprintf("%v", pl.Goals))
	builder.WriteString(", ")
	builder.WriteString("assists=")
	builder.WriteString(fmt.Sprintf("%v", pl.Assists))
	builder.WriteString(", ")
	builder.WriteString("shutouts=")
	builder.WriteString(fmt.Sprintf("%v", pl.Shutouts))
	builder.WriteString(", ")
	builder.WriteString("wins=")
	builder.WriteString(fmt.Sprintf("%v", pl.Wins))
	builder.WriteByte(')')
	return builder.String()
}

// Players is a parsable slice of Player.
type Players []*Player
