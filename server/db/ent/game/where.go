// Code generated by ent, DO NOT EDIT.

package game

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Game {
	return predicate.Game(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Game {
	return predicate.Game(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Game {
	return predicate.Game(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Game {
	return predicate.Game(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Game {
	return predicate.Game(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Game {
	return predicate.Game(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Game {
	return predicate.Game(sql.FieldLTE(FieldID, id))
}

// HomeScore applies equality check predicate on the "homeScore" field. It's identical to HomeScoreEQ.
func HomeScore(v int) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldHomeScore, v))
}

// AwayScore applies equality check predicate on the "awayScore" field. It's identical to AwayScoreEQ.
func AwayScore(v int) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldAwayScore, v))
}

// HomeScoreEQ applies the EQ predicate on the "homeScore" field.
func HomeScoreEQ(v int) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldHomeScore, v))
}

// HomeScoreNEQ applies the NEQ predicate on the "homeScore" field.
func HomeScoreNEQ(v int) predicate.Game {
	return predicate.Game(sql.FieldNEQ(FieldHomeScore, v))
}

// HomeScoreIn applies the In predicate on the "homeScore" field.
func HomeScoreIn(vs ...int) predicate.Game {
	return predicate.Game(sql.FieldIn(FieldHomeScore, vs...))
}

// HomeScoreNotIn applies the NotIn predicate on the "homeScore" field.
func HomeScoreNotIn(vs ...int) predicate.Game {
	return predicate.Game(sql.FieldNotIn(FieldHomeScore, vs...))
}

// HomeScoreGT applies the GT predicate on the "homeScore" field.
func HomeScoreGT(v int) predicate.Game {
	return predicate.Game(sql.FieldGT(FieldHomeScore, v))
}

// HomeScoreGTE applies the GTE predicate on the "homeScore" field.
func HomeScoreGTE(v int) predicate.Game {
	return predicate.Game(sql.FieldGTE(FieldHomeScore, v))
}

// HomeScoreLT applies the LT predicate on the "homeScore" field.
func HomeScoreLT(v int) predicate.Game {
	return predicate.Game(sql.FieldLT(FieldHomeScore, v))
}

// HomeScoreLTE applies the LTE predicate on the "homeScore" field.
func HomeScoreLTE(v int) predicate.Game {
	return predicate.Game(sql.FieldLTE(FieldHomeScore, v))
}

// AwayScoreEQ applies the EQ predicate on the "awayScore" field.
func AwayScoreEQ(v int) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldAwayScore, v))
}

// AwayScoreNEQ applies the NEQ predicate on the "awayScore" field.
func AwayScoreNEQ(v int) predicate.Game {
	return predicate.Game(sql.FieldNEQ(FieldAwayScore, v))
}

// AwayScoreIn applies the In predicate on the "awayScore" field.
func AwayScoreIn(vs ...int) predicate.Game {
	return predicate.Game(sql.FieldIn(FieldAwayScore, vs...))
}

// AwayScoreNotIn applies the NotIn predicate on the "awayScore" field.
func AwayScoreNotIn(vs ...int) predicate.Game {
	return predicate.Game(sql.FieldNotIn(FieldAwayScore, vs...))
}

// AwayScoreGT applies the GT predicate on the "awayScore" field.
func AwayScoreGT(v int) predicate.Game {
	return predicate.Game(sql.FieldGT(FieldAwayScore, v))
}

// AwayScoreGTE applies the GTE predicate on the "awayScore" field.
func AwayScoreGTE(v int) predicate.Game {
	return predicate.Game(sql.FieldGTE(FieldAwayScore, v))
}

// AwayScoreLT applies the LT predicate on the "awayScore" field.
func AwayScoreLT(v int) predicate.Game {
	return predicate.Game(sql.FieldLT(FieldAwayScore, v))
}

// AwayScoreLTE applies the LTE predicate on the "awayScore" field.
func AwayScoreLTE(v int) predicate.Game {
	return predicate.Game(sql.FieldLTE(FieldAwayScore, v))
}

// HasAwayTeam applies the HasEdge predicate on the "awayTeam" edge.
func HasAwayTeam() predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AwayTeamTable, AwayTeamColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAwayTeamWith applies the HasEdge predicate on the "awayTeam" edge with a given conditions (other predicates).
func HasAwayTeamWith(preds ...predicate.Team) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		step := newAwayTeamStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHomeTeam applies the HasEdge predicate on the "homeTeam" edge.
func HasHomeTeam() predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HomeTeamTable, HomeTeamColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHomeTeamWith applies the HasEdge predicate on the "homeTeam" edge with a given conditions (other predicates).
func HasHomeTeamWith(preds ...predicate.Team) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		step := newHomeTeamStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAwayGoalie applies the HasEdge predicate on the "awayGoalie" edge.
func HasAwayGoalie() predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AwayGoalieTable, AwayGoalieColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAwayGoalieWith applies the HasEdge predicate on the "awayGoalie" edge with a given conditions (other predicates).
func HasAwayGoalieWith(preds ...predicate.Player) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		step := newAwayGoalieStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasHomeGoalie applies the HasEdge predicate on the "homeGoalie" edge.
func HasHomeGoalie() predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HomeGoalieTable, HomeGoalieColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHomeGoalieWith applies the HasEdge predicate on the "homeGoalie" edge with a given conditions (other predicates).
func HasHomeGoalieWith(preds ...predicate.Player) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		step := newHomeGoalieStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Game) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Game) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Game) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		p(s.Not())
	})
}
