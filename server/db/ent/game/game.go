// Code generated by ent, DO NOT EDIT.

package game

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the game type in the database.
	Label = "game"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHomeScore holds the string denoting the homescore field in the database.
	FieldHomeScore = "home_score"
	// FieldAwayScore holds the string denoting the awayscore field in the database.
	FieldAwayScore = "away_score"
	// EdgeAwayTeam holds the string denoting the awayteam edge name in mutations.
	EdgeAwayTeam = "awayTeam"
	// EdgeHomeTeam holds the string denoting the hometeam edge name in mutations.
	EdgeHomeTeam = "homeTeam"
	// EdgeAwayGoalie holds the string denoting the awaygoalie edge name in mutations.
	EdgeAwayGoalie = "awayGoalie"
	// EdgeHomeGoalie holds the string denoting the homegoalie edge name in mutations.
	EdgeHomeGoalie = "homeGoalie"
	// Table holds the table name of the game in the database.
	Table = "games"
	// AwayTeamTable is the table that holds the awayTeam relation/edge.
	AwayTeamTable = "games"
	// AwayTeamInverseTable is the table name for the TeamID entity.
	// It exists in this package in order to avoid circular dependency with the "team" package.
	AwayTeamInverseTable = "teams"
	// AwayTeamColumn is the table column denoting the awayTeam relation/edge.
	AwayTeamColumn = "team_away_games"
	// HomeTeamTable is the table that holds the homeTeam relation/edge.
	HomeTeamTable = "games"
	// HomeTeamInverseTable is the table name for the TeamID entity.
	// It exists in this package in order to avoid circular dependency with the "team" package.
	HomeTeamInverseTable = "teams"
	// HomeTeamColumn is the table column denoting the homeTeam relation/edge.
	HomeTeamColumn = "team_home_games"
	// AwayGoalieTable is the table that holds the awayGoalie relation/edge.
	AwayGoalieTable = "games"
	// AwayGoalieInverseTable is the table name for the Player entity.
	// It exists in this package in order to avoid circular dependency with the "player" package.
	AwayGoalieInverseTable = "players"
	// AwayGoalieColumn is the table column denoting the awayGoalie relation/edge.
	AwayGoalieColumn = "player_away_games_as_goalie"
	// HomeGoalieTable is the table that holds the homeGoalie relation/edge.
	HomeGoalieTable = "games"
	// HomeGoalieInverseTable is the table name for the Player entity.
	// It exists in this package in order to avoid circular dependency with the "player" package.
	HomeGoalieInverseTable = "players"
	// HomeGoalieColumn is the table column denoting the homeGoalie relation/edge.
	HomeGoalieColumn = "player_home_games_as_goalie"
)

// Columns holds all SQL columns for game fields.
var Columns = []string{
	FieldID,
	FieldHomeScore,
	FieldAwayScore,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "games"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"player_home_games_as_goalie",
	"player_away_games_as_goalie",
	"team_home_games",
	"team_away_games",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int) error
)

// OrderOption defines the ordering options for the Game queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByHomeScore orders the results by the homeScore field.
func ByHomeScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHomeScore, opts...).ToFunc()
}

// ByAwayScore orders the results by the awayScore field.
func ByAwayScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAwayScore, opts...).ToFunc()
}

// ByAwayTeamField orders the results by awayTeam field.
func ByAwayTeamField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAwayTeamStep(), sql.OrderByField(field, opts...))
	}
}

// ByHomeTeamField orders the results by homeTeam field.
func ByHomeTeamField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHomeTeamStep(), sql.OrderByField(field, opts...))
	}
}

// ByAwayGoalieField orders the results by awayGoalie field.
func ByAwayGoalieField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAwayGoalieStep(), sql.OrderByField(field, opts...))
	}
}

// ByHomeGoalieField orders the results by homeGoalie field.
func ByHomeGoalieField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHomeGoalieStep(), sql.OrderByField(field, opts...))
	}
}
func newAwayTeamStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AwayTeamInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AwayTeamTable, AwayTeamColumn),
	)
}
func newHomeTeamStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HomeTeamInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, HomeTeamTable, HomeTeamColumn),
	)
}
func newAwayGoalieStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AwayGoalieInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AwayGoalieTable, AwayGoalieColumn),
	)
}
func newHomeGoalieStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HomeGoalieInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, HomeGoalieTable, HomeGoalieColumn),
	)
}
