// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/game"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/player"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/team"
)

// GameCreate is the builder for creating a Game entity.
type GameCreate struct {
	config
	mutation *GameMutation
	hooks    []Hook
}

// SetHomeScore sets the "homeScore" field.
func (gc *GameCreate) SetHomeScore(i int) *GameCreate {
	gc.mutation.SetHomeScore(i)
	return gc
}

// SetAwayScore sets the "awayScore" field.
func (gc *GameCreate) SetAwayScore(i int) *GameCreate {
	gc.mutation.SetAwayScore(i)
	return gc
}

// SetID sets the "id" field.
func (gc *GameCreate) SetID(i int) *GameCreate {
	gc.mutation.SetID(i)
	return gc
}

// SetAwayTeamID sets the "awayTeam" edge to the Team entity by ID.
func (gc *GameCreate) SetAwayTeamID(id int) *GameCreate {
	gc.mutation.SetAwayTeamID(id)
	return gc
}

// SetAwayTeam sets the "awayTeam" edge to the Team entity.
func (gc *GameCreate) SetAwayTeam(t *Team) *GameCreate {
	return gc.SetAwayTeamID(t.ID)
}

// SetHomeTeamID sets the "homeTeam" edge to the Team entity by ID.
func (gc *GameCreate) SetHomeTeamID(id int) *GameCreate {
	gc.mutation.SetHomeTeamID(id)
	return gc
}

// SetHomeTeam sets the "homeTeam" edge to the Team entity.
func (gc *GameCreate) SetHomeTeam(t *Team) *GameCreate {
	return gc.SetHomeTeamID(t.ID)
}

// SetAwayGoalieID sets the "awayGoalie" edge to the Player entity by ID.
func (gc *GameCreate) SetAwayGoalieID(id int) *GameCreate {
	gc.mutation.SetAwayGoalieID(id)
	return gc
}

// SetAwayGoalie sets the "awayGoalie" edge to the Player entity.
func (gc *GameCreate) SetAwayGoalie(p *Player) *GameCreate {
	return gc.SetAwayGoalieID(p.ID)
}

// SetHomeGoalieID sets the "homeGoalie" edge to the Player entity by ID.
func (gc *GameCreate) SetHomeGoalieID(id int) *GameCreate {
	gc.mutation.SetHomeGoalieID(id)
	return gc
}

// SetHomeGoalie sets the "homeGoalie" edge to the Player entity.
func (gc *GameCreate) SetHomeGoalie(p *Player) *GameCreate {
	return gc.SetHomeGoalieID(p.ID)
}

// Mutation returns the GameMutation object of the builder.
func (gc *GameCreate) Mutation() *GameMutation {
	return gc.mutation
}

// Save creates the Game in the database.
func (gc *GameCreate) Save(ctx context.Context) (*Game, error) {
	return withHooks(ctx, gc.sqlSave, gc.mutation, gc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gc *GameCreate) SaveX(ctx context.Context) *Game {
	v, err := gc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gc *GameCreate) Exec(ctx context.Context) error {
	_, err := gc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gc *GameCreate) ExecX(ctx context.Context) {
	if err := gc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gc *GameCreate) check() error {
	if _, ok := gc.mutation.HomeScore(); !ok {
		return &ValidationError{Name: "homeScore", err: errors.New(`ent: missing required field "Game.homeScore"`)}
	}
	if _, ok := gc.mutation.AwayScore(); !ok {
		return &ValidationError{Name: "awayScore", err: errors.New(`ent: missing required field "Game.awayScore"`)}
	}
	if v, ok := gc.mutation.ID(); ok {
		if err := game.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Game.id": %w`, err)}
		}
	}
	if _, ok := gc.mutation.AwayTeamID(); !ok {
		return &ValidationError{Name: "awayTeam", err: errors.New(`ent: missing required edge "Game.awayTeam"`)}
	}
	if _, ok := gc.mutation.HomeTeamID(); !ok {
		return &ValidationError{Name: "homeTeam", err: errors.New(`ent: missing required edge "Game.homeTeam"`)}
	}
	if _, ok := gc.mutation.AwayGoalieID(); !ok {
		return &ValidationError{Name: "awayGoalie", err: errors.New(`ent: missing required edge "Game.awayGoalie"`)}
	}
	if _, ok := gc.mutation.HomeGoalieID(); !ok {
		return &ValidationError{Name: "homeGoalie", err: errors.New(`ent: missing required edge "Game.homeGoalie"`)}
	}
	return nil
}

func (gc *GameCreate) sqlSave(ctx context.Context) (*Game, error) {
	if err := gc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	gc.mutation.id = &_node.ID
	gc.mutation.done = true
	return _node, nil
}

func (gc *GameCreate) createSpec() (*Game, *sqlgraph.CreateSpec) {
	var (
		_node = &Game{config: gc.config}
		_spec = sqlgraph.NewCreateSpec(game.Table, sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt))
	)
	if id, ok := gc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := gc.mutation.HomeScore(); ok {
		_spec.SetField(game.FieldHomeScore, field.TypeInt, value)
		_node.HomeScore = value
	}
	if value, ok := gc.mutation.AwayScore(); ok {
		_spec.SetField(game.FieldAwayScore, field.TypeInt, value)
		_node.AwayScore = value
	}
	if nodes := gc.mutation.AwayTeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   game.AwayTeamTable,
			Columns: []string{game.AwayTeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.team_away_games = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gc.mutation.HomeTeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   game.HomeTeamTable,
			Columns: []string{game.HomeTeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.team_home_games = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gc.mutation.AwayGoalieIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   game.AwayGoalieTable,
			Columns: []string{game.AwayGoalieColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.player_away_games_as_goalie = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gc.mutation.HomeGoalieIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   game.HomeGoalieTable,
			Columns: []string{game.HomeGoalieColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.player_home_games_as_goalie = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GameCreateBulk is the builder for creating many Game entities in bulk.
type GameCreateBulk struct {
	config
	builders []*GameCreate
}

// Save creates the Game entities in the database.
func (gcb *GameCreateBulk) Save(ctx context.Context) ([]*Game, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gcb.builders))
	nodes := make([]*Game, len(gcb.builders))
	mutators := make([]Mutator, len(gcb.builders))
	for i := range gcb.builders {
		func(i int, root context.Context) {
			builder := gcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GameMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gcb *GameCreateBulk) SaveX(ctx context.Context) []*Game {
	v, err := gcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gcb *GameCreateBulk) Exec(ctx context.Context) error {
	_, err := gcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcb *GameCreateBulk) ExecX(ctx context.Context) {
	if err := gcb.Exec(ctx); err != nil {
		panic(err)
	}
}
