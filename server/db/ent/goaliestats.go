// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/goaliestats"
)

// GoalieStats is the model entity for the GoalieStats schema.
type GoalieStats struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Goals holds the value of the "goals" field.
	Goals int `json:"goals,omitempty"`
	// Assists holds the value of the "assists" field.
	Assists int `json:"assists,omitempty"`
	// Win holds the value of the "win" field.
	Win bool `json:"win,omitempty"`
	// Loss holds the value of the "loss" field.
	Loss bool `json:"loss,omitempty"`
	// Home holds the value of the "home" field.
	Home bool `json:"home,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GoalieStatsQuery when eager-loading is set.
	Edges        GoalieStatsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// GoalieStatsEdges holds the relations/edges for other nodes in the graph.
type GoalieStatsEdges struct {
	// Game holds the value of the game edge.
	Game []*Game `json:"game,omitempty"`
	// Player holds the value of the player edge.
	Player []*Player `json:"player,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// GameOrErr returns the Game value or an error if the edge
// was not loaded in eager-loading.
func (e GoalieStatsEdges) GameOrErr() ([]*Game, error) {
	if e.loadedTypes[0] {
		return e.Game, nil
	}
	return nil, &NotLoadedError{edge: "game"}
}

// PlayerOrErr returns the Player value or an error if the edge
// was not loaded in eager-loading.
func (e GoalieStatsEdges) PlayerOrErr() ([]*Player, error) {
	if e.loadedTypes[1] {
		return e.Player, nil
	}
	return nil, &NotLoadedError{edge: "player"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GoalieStats) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case goaliestats.FieldWin, goaliestats.FieldLoss, goaliestats.FieldHome:
			values[i] = new(sql.NullBool)
		case goaliestats.FieldID, goaliestats.FieldGoals, goaliestats.FieldAssists:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GoalieStats fields.
func (gs *GoalieStats) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case goaliestats.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gs.ID = int(value.Int64)
		case goaliestats.FieldGoals:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field goals", values[i])
			} else if value.Valid {
				gs.Goals = int(value.Int64)
			}
		case goaliestats.FieldAssists:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field assists", values[i])
			} else if value.Valid {
				gs.Assists = int(value.Int64)
			}
		case goaliestats.FieldWin:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field win", values[i])
			} else if value.Valid {
				gs.Win = value.Bool
			}
		case goaliestats.FieldLoss:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field loss", values[i])
			} else if value.Valid {
				gs.Loss = value.Bool
			}
		case goaliestats.FieldHome:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field home", values[i])
			} else if value.Valid {
				gs.Home = value.Bool
			}
		default:
			gs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GoalieStats.
// This includes values selected through modifiers, order, etc.
func (gs *GoalieStats) Value(name string) (ent.Value, error) {
	return gs.selectValues.Get(name)
}

// QueryGame queries the "game" edge of the GoalieStats entity.
func (gs *GoalieStats) QueryGame() *GameQuery {
	return NewGoalieStatsClient(gs.config).QueryGame(gs)
}

// QueryPlayer queries the "player" edge of the GoalieStats entity.
func (gs *GoalieStats) QueryPlayer() *PlayerQuery {
	return NewGoalieStatsClient(gs.config).QueryPlayer(gs)
}

// Update returns a builder for updating this GoalieStats.
// Note that you need to call GoalieStats.Unwrap() before calling this method if this GoalieStats
// was returned from a transaction, and the transaction was committed or rolled back.
func (gs *GoalieStats) Update() *GoalieStatsUpdateOne {
	return NewGoalieStatsClient(gs.config).UpdateOne(gs)
}

// Unwrap unwraps the GoalieStats entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gs *GoalieStats) Unwrap() *GoalieStats {
	_tx, ok := gs.config.driver.(*txDriver)
	if !ok {
		panic("ent: GoalieStats is not a transactional entity")
	}
	gs.config.driver = _tx.drv
	return gs
}

// String implements the fmt.Stringer.
func (gs *GoalieStats) String() string {
	var builder strings.Builder
	builder.WriteString("GoalieStats(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gs.ID))
	builder.WriteString("goals=")
	builder.WriteString(fmt.Sprintf("%v", gs.Goals))
	builder.WriteString(", ")
	builder.WriteString("assists=")
	builder.WriteString(fmt.Sprintf("%v", gs.Assists))
	builder.WriteString(", ")
	builder.WriteString("win=")
	builder.WriteString(fmt.Sprintf("%v", gs.Win))
	builder.WriteString(", ")
	builder.WriteString("loss=")
	builder.WriteString(fmt.Sprintf("%v", gs.Loss))
	builder.WriteString(", ")
	builder.WriteString("home=")
	builder.WriteString(fmt.Sprintf("%v", gs.Home))
	builder.WriteByte(')')
	return builder.String()
}

// GoalieStatsSlice is a parsable slice of GoalieStats.
type GoalieStatsSlice []*GoalieStats
