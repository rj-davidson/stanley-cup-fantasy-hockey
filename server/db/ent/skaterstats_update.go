// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/game"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/player"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/predicate"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/skaterstats"
)

// SkaterStatsUpdate is the builder for updating SkaterStats entities.
type SkaterStatsUpdate struct {
	config
	hooks    []Hook
	mutation *SkaterStatsMutation
}

// Where appends a list predicates to the SkaterStatsUpdate builder.
func (ssu *SkaterStatsUpdate) Where(ps ...predicate.SkaterStats) *SkaterStatsUpdate {
	ssu.mutation.Where(ps...)
	return ssu
}

// SetGoals sets the "goals" field.
func (ssu *SkaterStatsUpdate) SetGoals(i int) *SkaterStatsUpdate {
	ssu.mutation.ResetGoals()
	ssu.mutation.SetGoals(i)
	return ssu
}

// SetNillableGoals sets the "goals" field if the given value is not nil.
func (ssu *SkaterStatsUpdate) SetNillableGoals(i *int) *SkaterStatsUpdate {
	if i != nil {
		ssu.SetGoals(*i)
	}
	return ssu
}

// AddGoals adds i to the "goals" field.
func (ssu *SkaterStatsUpdate) AddGoals(i int) *SkaterStatsUpdate {
	ssu.mutation.AddGoals(i)
	return ssu
}

// SetAssists sets the "assists" field.
func (ssu *SkaterStatsUpdate) SetAssists(i int) *SkaterStatsUpdate {
	ssu.mutation.ResetAssists()
	ssu.mutation.SetAssists(i)
	return ssu
}

// SetNillableAssists sets the "assists" field if the given value is not nil.
func (ssu *SkaterStatsUpdate) SetNillableAssists(i *int) *SkaterStatsUpdate {
	if i != nil {
		ssu.SetAssists(*i)
	}
	return ssu
}

// AddAssists adds i to the "assists" field.
func (ssu *SkaterStatsUpdate) AddAssists(i int) *SkaterStatsUpdate {
	ssu.mutation.AddAssists(i)
	return ssu
}

// SetHome sets the "home" field.
func (ssu *SkaterStatsUpdate) SetHome(b bool) *SkaterStatsUpdate {
	ssu.mutation.SetHome(b)
	return ssu
}

// SetNillableHome sets the "home" field if the given value is not nil.
func (ssu *SkaterStatsUpdate) SetNillableHome(b *bool) *SkaterStatsUpdate {
	if b != nil {
		ssu.SetHome(*b)
	}
	return ssu
}

// SetGameID sets the "game" edge to the Game entity by ID.
func (ssu *SkaterStatsUpdate) SetGameID(id int) *SkaterStatsUpdate {
	ssu.mutation.SetGameID(id)
	return ssu
}

// SetNillableGameID sets the "game" edge to the Game entity by ID if the given value is not nil.
func (ssu *SkaterStatsUpdate) SetNillableGameID(id *int) *SkaterStatsUpdate {
	if id != nil {
		ssu = ssu.SetGameID(*id)
	}
	return ssu
}

// SetGame sets the "game" edge to the Game entity.
func (ssu *SkaterStatsUpdate) SetGame(g *Game) *SkaterStatsUpdate {
	return ssu.SetGameID(g.ID)
}

// SetPlayerID sets the "player" edge to the Player entity by ID.
func (ssu *SkaterStatsUpdate) SetPlayerID(id int) *SkaterStatsUpdate {
	ssu.mutation.SetPlayerID(id)
	return ssu
}

// SetNillablePlayerID sets the "player" edge to the Player entity by ID if the given value is not nil.
func (ssu *SkaterStatsUpdate) SetNillablePlayerID(id *int) *SkaterStatsUpdate {
	if id != nil {
		ssu = ssu.SetPlayerID(*id)
	}
	return ssu
}

// SetPlayer sets the "player" edge to the Player entity.
func (ssu *SkaterStatsUpdate) SetPlayer(p *Player) *SkaterStatsUpdate {
	return ssu.SetPlayerID(p.ID)
}

// Mutation returns the SkaterStatsMutation object of the builder.
func (ssu *SkaterStatsUpdate) Mutation() *SkaterStatsMutation {
	return ssu.mutation
}

// ClearGame clears the "game" edge to the Game entity.
func (ssu *SkaterStatsUpdate) ClearGame() *SkaterStatsUpdate {
	ssu.mutation.ClearGame()
	return ssu
}

// ClearPlayer clears the "player" edge to the Player entity.
func (ssu *SkaterStatsUpdate) ClearPlayer() *SkaterStatsUpdate {
	ssu.mutation.ClearPlayer()
	return ssu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ssu *SkaterStatsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ssu.sqlSave, ssu.mutation, ssu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ssu *SkaterStatsUpdate) SaveX(ctx context.Context) int {
	affected, err := ssu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ssu *SkaterStatsUpdate) Exec(ctx context.Context) error {
	_, err := ssu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssu *SkaterStatsUpdate) ExecX(ctx context.Context) {
	if err := ssu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ssu *SkaterStatsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(skaterstats.Table, skaterstats.Columns, sqlgraph.NewFieldSpec(skaterstats.FieldID, field.TypeInt))
	if ps := ssu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ssu.mutation.Goals(); ok {
		_spec.SetField(skaterstats.FieldGoals, field.TypeInt, value)
	}
	if value, ok := ssu.mutation.AddedGoals(); ok {
		_spec.AddField(skaterstats.FieldGoals, field.TypeInt, value)
	}
	if value, ok := ssu.mutation.Assists(); ok {
		_spec.SetField(skaterstats.FieldAssists, field.TypeInt, value)
	}
	if value, ok := ssu.mutation.AddedAssists(); ok {
		_spec.AddField(skaterstats.FieldAssists, field.TypeInt, value)
	}
	if value, ok := ssu.mutation.Home(); ok {
		_spec.SetField(skaterstats.FieldHome, field.TypeBool, value)
	}
	if ssu.mutation.GameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   skaterstats.GameTable,
			Columns: []string{skaterstats.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   skaterstats.GameTable,
			Columns: []string{skaterstats.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssu.mutation.PlayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   skaterstats.PlayerTable,
			Columns: []string{skaterstats.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssu.mutation.PlayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   skaterstats.PlayerTable,
			Columns: []string{skaterstats.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ssu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{skaterstats.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ssu.mutation.done = true
	return n, nil
}

// SkaterStatsUpdateOne is the builder for updating a single SkaterStats entity.
type SkaterStatsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SkaterStatsMutation
}

// SetGoals sets the "goals" field.
func (ssuo *SkaterStatsUpdateOne) SetGoals(i int) *SkaterStatsUpdateOne {
	ssuo.mutation.ResetGoals()
	ssuo.mutation.SetGoals(i)
	return ssuo
}

// SetNillableGoals sets the "goals" field if the given value is not nil.
func (ssuo *SkaterStatsUpdateOne) SetNillableGoals(i *int) *SkaterStatsUpdateOne {
	if i != nil {
		ssuo.SetGoals(*i)
	}
	return ssuo
}

// AddGoals adds i to the "goals" field.
func (ssuo *SkaterStatsUpdateOne) AddGoals(i int) *SkaterStatsUpdateOne {
	ssuo.mutation.AddGoals(i)
	return ssuo
}

// SetAssists sets the "assists" field.
func (ssuo *SkaterStatsUpdateOne) SetAssists(i int) *SkaterStatsUpdateOne {
	ssuo.mutation.ResetAssists()
	ssuo.mutation.SetAssists(i)
	return ssuo
}

// SetNillableAssists sets the "assists" field if the given value is not nil.
func (ssuo *SkaterStatsUpdateOne) SetNillableAssists(i *int) *SkaterStatsUpdateOne {
	if i != nil {
		ssuo.SetAssists(*i)
	}
	return ssuo
}

// AddAssists adds i to the "assists" field.
func (ssuo *SkaterStatsUpdateOne) AddAssists(i int) *SkaterStatsUpdateOne {
	ssuo.mutation.AddAssists(i)
	return ssuo
}

// SetHome sets the "home" field.
func (ssuo *SkaterStatsUpdateOne) SetHome(b bool) *SkaterStatsUpdateOne {
	ssuo.mutation.SetHome(b)
	return ssuo
}

// SetNillableHome sets the "home" field if the given value is not nil.
func (ssuo *SkaterStatsUpdateOne) SetNillableHome(b *bool) *SkaterStatsUpdateOne {
	if b != nil {
		ssuo.SetHome(*b)
	}
	return ssuo
}

// SetGameID sets the "game" edge to the Game entity by ID.
func (ssuo *SkaterStatsUpdateOne) SetGameID(id int) *SkaterStatsUpdateOne {
	ssuo.mutation.SetGameID(id)
	return ssuo
}

// SetNillableGameID sets the "game" edge to the Game entity by ID if the given value is not nil.
func (ssuo *SkaterStatsUpdateOne) SetNillableGameID(id *int) *SkaterStatsUpdateOne {
	if id != nil {
		ssuo = ssuo.SetGameID(*id)
	}
	return ssuo
}

// SetGame sets the "game" edge to the Game entity.
func (ssuo *SkaterStatsUpdateOne) SetGame(g *Game) *SkaterStatsUpdateOne {
	return ssuo.SetGameID(g.ID)
}

// SetPlayerID sets the "player" edge to the Player entity by ID.
func (ssuo *SkaterStatsUpdateOne) SetPlayerID(id int) *SkaterStatsUpdateOne {
	ssuo.mutation.SetPlayerID(id)
	return ssuo
}

// SetNillablePlayerID sets the "player" edge to the Player entity by ID if the given value is not nil.
func (ssuo *SkaterStatsUpdateOne) SetNillablePlayerID(id *int) *SkaterStatsUpdateOne {
	if id != nil {
		ssuo = ssuo.SetPlayerID(*id)
	}
	return ssuo
}

// SetPlayer sets the "player" edge to the Player entity.
func (ssuo *SkaterStatsUpdateOne) SetPlayer(p *Player) *SkaterStatsUpdateOne {
	return ssuo.SetPlayerID(p.ID)
}

// Mutation returns the SkaterStatsMutation object of the builder.
func (ssuo *SkaterStatsUpdateOne) Mutation() *SkaterStatsMutation {
	return ssuo.mutation
}

// ClearGame clears the "game" edge to the Game entity.
func (ssuo *SkaterStatsUpdateOne) ClearGame() *SkaterStatsUpdateOne {
	ssuo.mutation.ClearGame()
	return ssuo
}

// ClearPlayer clears the "player" edge to the Player entity.
func (ssuo *SkaterStatsUpdateOne) ClearPlayer() *SkaterStatsUpdateOne {
	ssuo.mutation.ClearPlayer()
	return ssuo
}

// Where appends a list predicates to the SkaterStatsUpdate builder.
func (ssuo *SkaterStatsUpdateOne) Where(ps ...predicate.SkaterStats) *SkaterStatsUpdateOne {
	ssuo.mutation.Where(ps...)
	return ssuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ssuo *SkaterStatsUpdateOne) Select(field string, fields ...string) *SkaterStatsUpdateOne {
	ssuo.fields = append([]string{field}, fields...)
	return ssuo
}

// Save executes the query and returns the updated SkaterStats entity.
func (ssuo *SkaterStatsUpdateOne) Save(ctx context.Context) (*SkaterStats, error) {
	return withHooks(ctx, ssuo.sqlSave, ssuo.mutation, ssuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ssuo *SkaterStatsUpdateOne) SaveX(ctx context.Context) *SkaterStats {
	node, err := ssuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ssuo *SkaterStatsUpdateOne) Exec(ctx context.Context) error {
	_, err := ssuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssuo *SkaterStatsUpdateOne) ExecX(ctx context.Context) {
	if err := ssuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ssuo *SkaterStatsUpdateOne) sqlSave(ctx context.Context) (_node *SkaterStats, err error) {
	_spec := sqlgraph.NewUpdateSpec(skaterstats.Table, skaterstats.Columns, sqlgraph.NewFieldSpec(skaterstats.FieldID, field.TypeInt))
	id, ok := ssuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SkaterStats.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ssuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, skaterstats.FieldID)
		for _, f := range fields {
			if !skaterstats.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != skaterstats.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ssuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ssuo.mutation.Goals(); ok {
		_spec.SetField(skaterstats.FieldGoals, field.TypeInt, value)
	}
	if value, ok := ssuo.mutation.AddedGoals(); ok {
		_spec.AddField(skaterstats.FieldGoals, field.TypeInt, value)
	}
	if value, ok := ssuo.mutation.Assists(); ok {
		_spec.SetField(skaterstats.FieldAssists, field.TypeInt, value)
	}
	if value, ok := ssuo.mutation.AddedAssists(); ok {
		_spec.AddField(skaterstats.FieldAssists, field.TypeInt, value)
	}
	if value, ok := ssuo.mutation.Home(); ok {
		_spec.SetField(skaterstats.FieldHome, field.TypeBool, value)
	}
	if ssuo.mutation.GameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   skaterstats.GameTable,
			Columns: []string{skaterstats.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   skaterstats.GameTable,
			Columns: []string{skaterstats.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ssuo.mutation.PlayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   skaterstats.PlayerTable,
			Columns: []string{skaterstats.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ssuo.mutation.PlayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   skaterstats.PlayerTable,
			Columns: []string{skaterstats.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SkaterStats{config: ssuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ssuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{skaterstats.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ssuo.mutation.done = true
	return _node, nil
}
