// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/game"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/goaliestats"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/player"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/predicate"
)

// GoalieStatsQuery is the builder for querying GoalieStats entities.
type GoalieStatsQuery struct {
	config
	ctx        *QueryContext
	order      []goaliestats.OrderOption
	inters     []Interceptor
	predicates []predicate.GoalieStats
	withGame   *GameQuery
	withPlayer *PlayerQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the GoalieStatsQuery builder.
func (gsq *GoalieStatsQuery) Where(ps ...predicate.GoalieStats) *GoalieStatsQuery {
	gsq.predicates = append(gsq.predicates, ps...)
	return gsq
}

// Limit the number of records to be returned by this query.
func (gsq *GoalieStatsQuery) Limit(limit int) *GoalieStatsQuery {
	gsq.ctx.Limit = &limit
	return gsq
}

// Offset to start from.
func (gsq *GoalieStatsQuery) Offset(offset int) *GoalieStatsQuery {
	gsq.ctx.Offset = &offset
	return gsq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (gsq *GoalieStatsQuery) Unique(unique bool) *GoalieStatsQuery {
	gsq.ctx.Unique = &unique
	return gsq
}

// Order specifies how the records should be ordered.
func (gsq *GoalieStatsQuery) Order(o ...goaliestats.OrderOption) *GoalieStatsQuery {
	gsq.order = append(gsq.order, o...)
	return gsq
}

// QueryGame chains the current query on the "game" edge.
func (gsq *GoalieStatsQuery) QueryGame() *GameQuery {
	query := (&GameClient{config: gsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(goaliestats.Table, goaliestats.FieldID, selector),
			sqlgraph.To(game.Table, game.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, goaliestats.GameTable, goaliestats.GamePrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(gsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPlayer chains the current query on the "player" edge.
func (gsq *GoalieStatsQuery) QueryPlayer() *PlayerQuery {
	query := (&PlayerClient{config: gsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(goaliestats.Table, goaliestats.FieldID, selector),
			sqlgraph.To(player.Table, player.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, goaliestats.PlayerTable, goaliestats.PlayerPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(gsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first GoalieStats entity from the query.
// Returns a *NotFoundError when no GoalieStats was found.
func (gsq *GoalieStatsQuery) First(ctx context.Context) (*GoalieStats, error) {
	nodes, err := gsq.Limit(1).All(setContextOp(ctx, gsq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{goaliestats.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (gsq *GoalieStatsQuery) FirstX(ctx context.Context) *GoalieStats {
	node, err := gsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first GoalieStats ID from the query.
// Returns a *NotFoundError when no GoalieStats ID was found.
func (gsq *GoalieStatsQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = gsq.Limit(1).IDs(setContextOp(ctx, gsq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{goaliestats.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (gsq *GoalieStatsQuery) FirstIDX(ctx context.Context) int {
	id, err := gsq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single GoalieStats entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one GoalieStats entity is found.
// Returns a *NotFoundError when no GoalieStats entities are found.
func (gsq *GoalieStatsQuery) Only(ctx context.Context) (*GoalieStats, error) {
	nodes, err := gsq.Limit(2).All(setContextOp(ctx, gsq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{goaliestats.Label}
	default:
		return nil, &NotSingularError{goaliestats.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (gsq *GoalieStatsQuery) OnlyX(ctx context.Context) *GoalieStats {
	node, err := gsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only GoalieStats ID in the query.
// Returns a *NotSingularError when more than one GoalieStats ID is found.
// Returns a *NotFoundError when no entities are found.
func (gsq *GoalieStatsQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = gsq.Limit(2).IDs(setContextOp(ctx, gsq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{goaliestats.Label}
	default:
		err = &NotSingularError{goaliestats.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (gsq *GoalieStatsQuery) OnlyIDX(ctx context.Context) int {
	id, err := gsq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of GoalieStatsSlice.
func (gsq *GoalieStatsQuery) All(ctx context.Context) ([]*GoalieStats, error) {
	ctx = setContextOp(ctx, gsq.ctx, "All")
	if err := gsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*GoalieStats, *GoalieStatsQuery]()
	return withInterceptors[[]*GoalieStats](ctx, gsq, qr, gsq.inters)
}

// AllX is like All, but panics if an error occurs.
func (gsq *GoalieStatsQuery) AllX(ctx context.Context) []*GoalieStats {
	nodes, err := gsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of GoalieStats IDs.
func (gsq *GoalieStatsQuery) IDs(ctx context.Context) (ids []int, err error) {
	if gsq.ctx.Unique == nil && gsq.path != nil {
		gsq.Unique(true)
	}
	ctx = setContextOp(ctx, gsq.ctx, "IDs")
	if err = gsq.Select(goaliestats.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (gsq *GoalieStatsQuery) IDsX(ctx context.Context) []int {
	ids, err := gsq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (gsq *GoalieStatsQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, gsq.ctx, "Count")
	if err := gsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, gsq, querierCount[*GoalieStatsQuery](), gsq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (gsq *GoalieStatsQuery) CountX(ctx context.Context) int {
	count, err := gsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (gsq *GoalieStatsQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, gsq.ctx, "Exist")
	switch _, err := gsq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (gsq *GoalieStatsQuery) ExistX(ctx context.Context) bool {
	exist, err := gsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the GoalieStatsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (gsq *GoalieStatsQuery) Clone() *GoalieStatsQuery {
	if gsq == nil {
		return nil
	}
	return &GoalieStatsQuery{
		config:     gsq.config,
		ctx:        gsq.ctx.Clone(),
		order:      append([]goaliestats.OrderOption{}, gsq.order...),
		inters:     append([]Interceptor{}, gsq.inters...),
		predicates: append([]predicate.GoalieStats{}, gsq.predicates...),
		withGame:   gsq.withGame.Clone(),
		withPlayer: gsq.withPlayer.Clone(),
		// clone intermediate query.
		sql:  gsq.sql.Clone(),
		path: gsq.path,
	}
}

// WithGame tells the query-builder to eager-load the nodes that are connected to
// the "game" edge. The optional arguments are used to configure the query builder of the edge.
func (gsq *GoalieStatsQuery) WithGame(opts ...func(*GameQuery)) *GoalieStatsQuery {
	query := (&GameClient{config: gsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gsq.withGame = query
	return gsq
}

// WithPlayer tells the query-builder to eager-load the nodes that are connected to
// the "player" edge. The optional arguments are used to configure the query builder of the edge.
func (gsq *GoalieStatsQuery) WithPlayer(opts ...func(*PlayerQuery)) *GoalieStatsQuery {
	query := (&PlayerClient{config: gsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gsq.withPlayer = query
	return gsq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Goals int `json:"goals,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.GoalieStats.Query().
//		GroupBy(goaliestats.FieldGoals).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (gsq *GoalieStatsQuery) GroupBy(field string, fields ...string) *GoalieStatsGroupBy {
	gsq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &GoalieStatsGroupBy{build: gsq}
	grbuild.flds = &gsq.ctx.Fields
	grbuild.label = goaliestats.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Goals int `json:"goals,omitempty"`
//	}
//
//	client.GoalieStats.Query().
//		Select(goaliestats.FieldGoals).
//		Scan(ctx, &v)
func (gsq *GoalieStatsQuery) Select(fields ...string) *GoalieStatsSelect {
	gsq.ctx.Fields = append(gsq.ctx.Fields, fields...)
	sbuild := &GoalieStatsSelect{GoalieStatsQuery: gsq}
	sbuild.label = goaliestats.Label
	sbuild.flds, sbuild.scan = &gsq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a GoalieStatsSelect configured with the given aggregations.
func (gsq *GoalieStatsQuery) Aggregate(fns ...AggregateFunc) *GoalieStatsSelect {
	return gsq.Select().Aggregate(fns...)
}

func (gsq *GoalieStatsQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range gsq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, gsq); err != nil {
				return err
			}
		}
	}
	for _, f := range gsq.ctx.Fields {
		if !goaliestats.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if gsq.path != nil {
		prev, err := gsq.path(ctx)
		if err != nil {
			return err
		}
		gsq.sql = prev
	}
	return nil
}

func (gsq *GoalieStatsQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*GoalieStats, error) {
	var (
		nodes       = []*GoalieStats{}
		_spec       = gsq.querySpec()
		loadedTypes = [2]bool{
			gsq.withGame != nil,
			gsq.withPlayer != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*GoalieStats).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &GoalieStats{config: gsq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, gsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := gsq.withGame; query != nil {
		if err := gsq.loadGame(ctx, query, nodes,
			func(n *GoalieStats) { n.Edges.Game = []*Game{} },
			func(n *GoalieStats, e *Game) { n.Edges.Game = append(n.Edges.Game, e) }); err != nil {
			return nil, err
		}
	}
	if query := gsq.withPlayer; query != nil {
		if err := gsq.loadPlayer(ctx, query, nodes,
			func(n *GoalieStats) { n.Edges.Player = []*Player{} },
			func(n *GoalieStats, e *Player) { n.Edges.Player = append(n.Edges.Player, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (gsq *GoalieStatsQuery) loadGame(ctx context.Context, query *GameQuery, nodes []*GoalieStats, init func(*GoalieStats), assign func(*GoalieStats, *Game)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*GoalieStats)
	nids := make(map[int]map[*GoalieStats]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(goaliestats.GameTable)
		s.Join(joinT).On(s.C(game.FieldID), joinT.C(goaliestats.GamePrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(goaliestats.GamePrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(goaliestats.GamePrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*GoalieStats]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Game](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "game" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (gsq *GoalieStatsQuery) loadPlayer(ctx context.Context, query *PlayerQuery, nodes []*GoalieStats, init func(*GoalieStats), assign func(*GoalieStats, *Player)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*GoalieStats)
	nids := make(map[int]map[*GoalieStats]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(goaliestats.PlayerTable)
		s.Join(joinT).On(s.C(player.FieldID), joinT.C(goaliestats.PlayerPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(goaliestats.PlayerPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(goaliestats.PlayerPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*GoalieStats]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Player](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "player" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (gsq *GoalieStatsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := gsq.querySpec()
	_spec.Node.Columns = gsq.ctx.Fields
	if len(gsq.ctx.Fields) > 0 {
		_spec.Unique = gsq.ctx.Unique != nil && *gsq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, gsq.driver, _spec)
}

func (gsq *GoalieStatsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(goaliestats.Table, goaliestats.Columns, sqlgraph.NewFieldSpec(goaliestats.FieldID, field.TypeInt))
	_spec.From = gsq.sql
	if unique := gsq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if gsq.path != nil {
		_spec.Unique = true
	}
	if fields := gsq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, goaliestats.FieldID)
		for i := range fields {
			if fields[i] != goaliestats.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := gsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := gsq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := gsq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := gsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (gsq *GoalieStatsQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(gsq.driver.Dialect())
	t1 := builder.Table(goaliestats.Table)
	columns := gsq.ctx.Fields
	if len(columns) == 0 {
		columns = goaliestats.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if gsq.sql != nil {
		selector = gsq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if gsq.ctx.Unique != nil && *gsq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range gsq.predicates {
		p(selector)
	}
	for _, p := range gsq.order {
		p(selector)
	}
	if offset := gsq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := gsq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// GoalieStatsGroupBy is the group-by builder for GoalieStats entities.
type GoalieStatsGroupBy struct {
	selector
	build *GoalieStatsQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (gsgb *GoalieStatsGroupBy) Aggregate(fns ...AggregateFunc) *GoalieStatsGroupBy {
	gsgb.fns = append(gsgb.fns, fns...)
	return gsgb
}

// Scan applies the selector query and scans the result into the given value.
func (gsgb *GoalieStatsGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, gsgb.build.ctx, "GroupBy")
	if err := gsgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GoalieStatsQuery, *GoalieStatsGroupBy](ctx, gsgb.build, gsgb, gsgb.build.inters, v)
}

func (gsgb *GoalieStatsGroupBy) sqlScan(ctx context.Context, root *GoalieStatsQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(gsgb.fns))
	for _, fn := range gsgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*gsgb.flds)+len(gsgb.fns))
		for _, f := range *gsgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*gsgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gsgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// GoalieStatsSelect is the builder for selecting fields of GoalieStats entities.
type GoalieStatsSelect struct {
	*GoalieStatsQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (gss *GoalieStatsSelect) Aggregate(fns ...AggregateFunc) *GoalieStatsSelect {
	gss.fns = append(gss.fns, fns...)
	return gss
}

// Scan applies the selector query and scans the result into the given value.
func (gss *GoalieStatsSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, gss.ctx, "Select")
	if err := gss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GoalieStatsQuery, *GoalieStatsSelect](ctx, gss.GoalieStatsQuery, gss, gss.inters, v)
}

func (gss *GoalieStatsSelect) sqlScan(ctx context.Context, root *GoalieStatsQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(gss.fns))
	for _, fn := range gss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*gss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
