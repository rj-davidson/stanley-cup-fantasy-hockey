// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/game"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/player"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/skaterstats"
)

// SkaterStats is the model entity for the SkaterStats schema.
type SkaterStats struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Goals holds the value of the "goals" field.
	Goals int `json:"goals,omitempty"`
	// Assists holds the value of the "assists" field.
	Assists int `json:"assists,omitempty"`
	// Home holds the value of the "home" field.
	Home bool `json:"home,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SkaterStatsQuery when eager-loading is set.
	Edges               SkaterStatsEdges `json:"edges"`
	game_skater_stats   *int
	player_skater_stats *int
	selectValues        sql.SelectValues
}

// SkaterStatsEdges holds the relations/edges for other nodes in the graph.
type SkaterStatsEdges struct {
	// Game holds the value of the game edge.
	Game *Game `json:"game,omitempty"`
	// Player holds the value of the player edge.
	Player *Player `json:"player,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// GameOrErr returns the Game value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SkaterStatsEdges) GameOrErr() (*Game, error) {
	if e.loadedTypes[0] {
		if e.Game == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: game.Label}
		}
		return e.Game, nil
	}
	return nil, &NotLoadedError{edge: "game"}
}

// PlayerOrErr returns the Player value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SkaterStatsEdges) PlayerOrErr() (*Player, error) {
	if e.loadedTypes[1] {
		if e.Player == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: player.Label}
		}
		return e.Player, nil
	}
	return nil, &NotLoadedError{edge: "player"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SkaterStats) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case skaterstats.FieldHome:
			values[i] = new(sql.NullBool)
		case skaterstats.FieldID, skaterstats.FieldGoals, skaterstats.FieldAssists:
			values[i] = new(sql.NullInt64)
		case skaterstats.ForeignKeys[0]: // game_skater_stats
			values[i] = new(sql.NullInt64)
		case skaterstats.ForeignKeys[1]: // player_skater_stats
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SkaterStats fields.
func (ss *SkaterStats) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case skaterstats.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ss.ID = int(value.Int64)
		case skaterstats.FieldGoals:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field goals", values[i])
			} else if value.Valid {
				ss.Goals = int(value.Int64)
			}
		case skaterstats.FieldAssists:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field assists", values[i])
			} else if value.Valid {
				ss.Assists = int(value.Int64)
			}
		case skaterstats.FieldHome:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field home", values[i])
			} else if value.Valid {
				ss.Home = value.Bool
			}
		case skaterstats.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field game_skater_stats", value)
			} else if value.Valid {
				ss.game_skater_stats = new(int)
				*ss.game_skater_stats = int(value.Int64)
			}
		case skaterstats.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field player_skater_stats", value)
			} else if value.Valid {
				ss.player_skater_stats = new(int)
				*ss.player_skater_stats = int(value.Int64)
			}
		default:
			ss.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SkaterStats.
// This includes values selected through modifiers, order, etc.
func (ss *SkaterStats) Value(name string) (ent.Value, error) {
	return ss.selectValues.Get(name)
}

// QueryGame queries the "game" edge of the SkaterStats entity.
func (ss *SkaterStats) QueryGame() *GameQuery {
	return NewSkaterStatsClient(ss.config).QueryGame(ss)
}

// QueryPlayer queries the "player" edge of the SkaterStats entity.
func (ss *SkaterStats) QueryPlayer() *PlayerQuery {
	return NewSkaterStatsClient(ss.config).QueryPlayer(ss)
}

// Update returns a builder for updating this SkaterStats.
// Note that you need to call SkaterStats.Unwrap() before calling this method if this SkaterStats
// was returned from a transaction, and the transaction was committed or rolled back.
func (ss *SkaterStats) Update() *SkaterStatsUpdateOne {
	return NewSkaterStatsClient(ss.config).UpdateOne(ss)
}

// Unwrap unwraps the SkaterStats entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ss *SkaterStats) Unwrap() *SkaterStats {
	_tx, ok := ss.config.driver.(*txDriver)
	if !ok {
		panic("ent: SkaterStats is not a transactional entity")
	}
	ss.config.driver = _tx.drv
	return ss
}

// String implements the fmt.Stringer.
func (ss *SkaterStats) String() string {
	var builder strings.Builder
	builder.WriteString("SkaterStats(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ss.ID))
	builder.WriteString("goals=")
	builder.WriteString(fmt.Sprintf("%v", ss.Goals))
	builder.WriteString(", ")
	builder.WriteString("assists=")
	builder.WriteString(fmt.Sprintf("%v", ss.Assists))
	builder.WriteString(", ")
	builder.WriteString("home=")
	builder.WriteString(fmt.Sprintf("%v", ss.Home))
	builder.WriteByte(')')
	return builder.String()
}

// SkaterStatsSlice is a parsable slice of SkaterStats.
type SkaterStatsSlice []*SkaterStats
