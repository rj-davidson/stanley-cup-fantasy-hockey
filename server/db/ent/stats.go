// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/player"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/stats"
)

// Stats is the model entity for the Stats schema.
type Stats struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Goals holds the value of the "goals" field.
	Goals int `json:"goals,omitempty"`
	// Assists holds the value of the "assists" field.
	Assists int `json:"assists,omitempty"`
	// Shutouts holds the value of the "shutouts" field.
	Shutouts int `json:"shutouts,omitempty"`
	// Wins holds the value of the "wins" field.
	Wins int `json:"wins,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StatsQuery when eager-loading is set.
	Edges        StatsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// StatsEdges holds the relations/edges for other nodes in the graph.
type StatsEdges struct {
	// Player holds the value of the player edge.
	Player *Player `json:"player,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PlayerOrErr returns the Player value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StatsEdges) PlayerOrErr() (*Player, error) {
	if e.loadedTypes[0] {
		if e.Player == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: player.Label}
		}
		return e.Player, nil
	}
	return nil, &NotLoadedError{edge: "player"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Stats) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case stats.FieldID, stats.FieldGoals, stats.FieldAssists, stats.FieldShutouts, stats.FieldWins:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Stats fields.
func (s *Stats) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case stats.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case stats.FieldGoals:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field goals", values[i])
			} else if value.Valid {
				s.Goals = int(value.Int64)
			}
		case stats.FieldAssists:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field assists", values[i])
			} else if value.Valid {
				s.Assists = int(value.Int64)
			}
		case stats.FieldShutouts:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field shutouts", values[i])
			} else if value.Valid {
				s.Shutouts = int(value.Int64)
			}
		case stats.FieldWins:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field wins", values[i])
			} else if value.Valid {
				s.Wins = int(value.Int64)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Stats.
// This includes values selected through modifiers, order, etc.
func (s *Stats) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryPlayer queries the "player" edge of the Stats entity.
func (s *Stats) QueryPlayer() *PlayerQuery {
	return NewStatsClient(s.config).QueryPlayer(s)
}

// Update returns a builder for updating this Stats.
// Note that you need to call Stats.Unwrap() before calling this method if this Stats
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Stats) Update() *StatsUpdateOne {
	return NewStatsClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Stats entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Stats) Unwrap() *Stats {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Stats is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Stats) String() string {
	var builder strings.Builder
	builder.WriteString("Stats(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("goals=")
	builder.WriteString(fmt.Sprintf("%v", s.Goals))
	builder.WriteString(", ")
	builder.WriteString("assists=")
	builder.WriteString(fmt.Sprintf("%v", s.Assists))
	builder.WriteString(", ")
	builder.WriteString("shutouts=")
	builder.WriteString(fmt.Sprintf("%v", s.Shutouts))
	builder.WriteString(", ")
	builder.WriteString("wins=")
	builder.WriteString(fmt.Sprintf("%v", s.Wins))
	builder.WriteByte(')')
	return builder.String()
}

// StatsSlice is a parsable slice of Stats.
type StatsSlice []*Stats
