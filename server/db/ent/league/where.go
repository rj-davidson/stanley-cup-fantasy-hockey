// Code generated by ent, DO NOT EDIT.

package league

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.League {
	return predicate.League(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.League {
	return predicate.League(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.League {
	return predicate.League(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.League {
	return predicate.League(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.League {
	return predicate.League(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.League {
	return predicate.League(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.League {
	return predicate.League(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.League {
	return predicate.League(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.League {
	return predicate.League(sql.FieldLTE(FieldID, id))
}

// Season applies equality check predicate on the "season" field. It's identical to SeasonEQ.
func Season(v int) predicate.League {
	return predicate.League(sql.FieldEQ(FieldSeason, v))
}

// Public applies equality check predicate on the "public" field. It's identical to PublicEQ.
func Public(v bool) predicate.League {
	return predicate.League(sql.FieldEQ(FieldPublic, v))
}

// NumForwards applies equality check predicate on the "num_forwards" field. It's identical to NumForwardsEQ.
func NumForwards(v int) predicate.League {
	return predicate.League(sql.FieldEQ(FieldNumForwards, v))
}

// NumDefenders applies equality check predicate on the "num_defenders" field. It's identical to NumDefendersEQ.
func NumDefenders(v int) predicate.League {
	return predicate.League(sql.FieldEQ(FieldNumDefenders, v))
}

// NumGoalies applies equality check predicate on the "num_goalies" field. It's identical to NumGoaliesEQ.
func NumGoalies(v int) predicate.League {
	return predicate.League(sql.FieldEQ(FieldNumGoalies, v))
}

// PointsForGoal applies equality check predicate on the "points_for_goal" field. It's identical to PointsForGoalEQ.
func PointsForGoal(v int) predicate.League {
	return predicate.League(sql.FieldEQ(FieldPointsForGoal, v))
}

// PointsForAssist applies equality check predicate on the "points_for_assist" field. It's identical to PointsForAssistEQ.
func PointsForAssist(v int) predicate.League {
	return predicate.League(sql.FieldEQ(FieldPointsForAssist, v))
}

// GoaliePointsForShutout applies equality check predicate on the "goalie_points_for_shutout" field. It's identical to GoaliePointsForShutoutEQ.
func GoaliePointsForShutout(v int) predicate.League {
	return predicate.League(sql.FieldEQ(FieldGoaliePointsForShutout, v))
}

// GoaliePointsForWin applies equality check predicate on the "goalie_points_for_win" field. It's identical to GoaliePointsForWinEQ.
func GoaliePointsForWin(v int) predicate.League {
	return predicate.League(sql.FieldEQ(FieldGoaliePointsForWin, v))
}

// EditKey applies equality check predicate on the "edit_key" field. It's identical to EditKeyEQ.
func EditKey(v string) predicate.League {
	return predicate.League(sql.FieldEQ(FieldEditKey, v))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.League {
	return predicate.League(sql.FieldEQ(FieldCode, v))
}

// SeasonEQ applies the EQ predicate on the "season" field.
func SeasonEQ(v int) predicate.League {
	return predicate.League(sql.FieldEQ(FieldSeason, v))
}

// SeasonNEQ applies the NEQ predicate on the "season" field.
func SeasonNEQ(v int) predicate.League {
	return predicate.League(sql.FieldNEQ(FieldSeason, v))
}

// SeasonIn applies the In predicate on the "season" field.
func SeasonIn(vs ...int) predicate.League {
	return predicate.League(sql.FieldIn(FieldSeason, vs...))
}

// SeasonNotIn applies the NotIn predicate on the "season" field.
func SeasonNotIn(vs ...int) predicate.League {
	return predicate.League(sql.FieldNotIn(FieldSeason, vs...))
}

// SeasonGT applies the GT predicate on the "season" field.
func SeasonGT(v int) predicate.League {
	return predicate.League(sql.FieldGT(FieldSeason, v))
}

// SeasonGTE applies the GTE predicate on the "season" field.
func SeasonGTE(v int) predicate.League {
	return predicate.League(sql.FieldGTE(FieldSeason, v))
}

// SeasonLT applies the LT predicate on the "season" field.
func SeasonLT(v int) predicate.League {
	return predicate.League(sql.FieldLT(FieldSeason, v))
}

// SeasonLTE applies the LTE predicate on the "season" field.
func SeasonLTE(v int) predicate.League {
	return predicate.League(sql.FieldLTE(FieldSeason, v))
}

// PublicEQ applies the EQ predicate on the "public" field.
func PublicEQ(v bool) predicate.League {
	return predicate.League(sql.FieldEQ(FieldPublic, v))
}

// PublicNEQ applies the NEQ predicate on the "public" field.
func PublicNEQ(v bool) predicate.League {
	return predicate.League(sql.FieldNEQ(FieldPublic, v))
}

// NumForwardsEQ applies the EQ predicate on the "num_forwards" field.
func NumForwardsEQ(v int) predicate.League {
	return predicate.League(sql.FieldEQ(FieldNumForwards, v))
}

// NumForwardsNEQ applies the NEQ predicate on the "num_forwards" field.
func NumForwardsNEQ(v int) predicate.League {
	return predicate.League(sql.FieldNEQ(FieldNumForwards, v))
}

// NumForwardsIn applies the In predicate on the "num_forwards" field.
func NumForwardsIn(vs ...int) predicate.League {
	return predicate.League(sql.FieldIn(FieldNumForwards, vs...))
}

// NumForwardsNotIn applies the NotIn predicate on the "num_forwards" field.
func NumForwardsNotIn(vs ...int) predicate.League {
	return predicate.League(sql.FieldNotIn(FieldNumForwards, vs...))
}

// NumForwardsGT applies the GT predicate on the "num_forwards" field.
func NumForwardsGT(v int) predicate.League {
	return predicate.League(sql.FieldGT(FieldNumForwards, v))
}

// NumForwardsGTE applies the GTE predicate on the "num_forwards" field.
func NumForwardsGTE(v int) predicate.League {
	return predicate.League(sql.FieldGTE(FieldNumForwards, v))
}

// NumForwardsLT applies the LT predicate on the "num_forwards" field.
func NumForwardsLT(v int) predicate.League {
	return predicate.League(sql.FieldLT(FieldNumForwards, v))
}

// NumForwardsLTE applies the LTE predicate on the "num_forwards" field.
func NumForwardsLTE(v int) predicate.League {
	return predicate.League(sql.FieldLTE(FieldNumForwards, v))
}

// NumDefendersEQ applies the EQ predicate on the "num_defenders" field.
func NumDefendersEQ(v int) predicate.League {
	return predicate.League(sql.FieldEQ(FieldNumDefenders, v))
}

// NumDefendersNEQ applies the NEQ predicate on the "num_defenders" field.
func NumDefendersNEQ(v int) predicate.League {
	return predicate.League(sql.FieldNEQ(FieldNumDefenders, v))
}

// NumDefendersIn applies the In predicate on the "num_defenders" field.
func NumDefendersIn(vs ...int) predicate.League {
	return predicate.League(sql.FieldIn(FieldNumDefenders, vs...))
}

// NumDefendersNotIn applies the NotIn predicate on the "num_defenders" field.
func NumDefendersNotIn(vs ...int) predicate.League {
	return predicate.League(sql.FieldNotIn(FieldNumDefenders, vs...))
}

// NumDefendersGT applies the GT predicate on the "num_defenders" field.
func NumDefendersGT(v int) predicate.League {
	return predicate.League(sql.FieldGT(FieldNumDefenders, v))
}

// NumDefendersGTE applies the GTE predicate on the "num_defenders" field.
func NumDefendersGTE(v int) predicate.League {
	return predicate.League(sql.FieldGTE(FieldNumDefenders, v))
}

// NumDefendersLT applies the LT predicate on the "num_defenders" field.
func NumDefendersLT(v int) predicate.League {
	return predicate.League(sql.FieldLT(FieldNumDefenders, v))
}

// NumDefendersLTE applies the LTE predicate on the "num_defenders" field.
func NumDefendersLTE(v int) predicate.League {
	return predicate.League(sql.FieldLTE(FieldNumDefenders, v))
}

// NumGoaliesEQ applies the EQ predicate on the "num_goalies" field.
func NumGoaliesEQ(v int) predicate.League {
	return predicate.League(sql.FieldEQ(FieldNumGoalies, v))
}

// NumGoaliesNEQ applies the NEQ predicate on the "num_goalies" field.
func NumGoaliesNEQ(v int) predicate.League {
	return predicate.League(sql.FieldNEQ(FieldNumGoalies, v))
}

// NumGoaliesIn applies the In predicate on the "num_goalies" field.
func NumGoaliesIn(vs ...int) predicate.League {
	return predicate.League(sql.FieldIn(FieldNumGoalies, vs...))
}

// NumGoaliesNotIn applies the NotIn predicate on the "num_goalies" field.
func NumGoaliesNotIn(vs ...int) predicate.League {
	return predicate.League(sql.FieldNotIn(FieldNumGoalies, vs...))
}

// NumGoaliesGT applies the GT predicate on the "num_goalies" field.
func NumGoaliesGT(v int) predicate.League {
	return predicate.League(sql.FieldGT(FieldNumGoalies, v))
}

// NumGoaliesGTE applies the GTE predicate on the "num_goalies" field.
func NumGoaliesGTE(v int) predicate.League {
	return predicate.League(sql.FieldGTE(FieldNumGoalies, v))
}

// NumGoaliesLT applies the LT predicate on the "num_goalies" field.
func NumGoaliesLT(v int) predicate.League {
	return predicate.League(sql.FieldLT(FieldNumGoalies, v))
}

// NumGoaliesLTE applies the LTE predicate on the "num_goalies" field.
func NumGoaliesLTE(v int) predicate.League {
	return predicate.League(sql.FieldLTE(FieldNumGoalies, v))
}

// PointsForGoalEQ applies the EQ predicate on the "points_for_goal" field.
func PointsForGoalEQ(v int) predicate.League {
	return predicate.League(sql.FieldEQ(FieldPointsForGoal, v))
}

// PointsForGoalNEQ applies the NEQ predicate on the "points_for_goal" field.
func PointsForGoalNEQ(v int) predicate.League {
	return predicate.League(sql.FieldNEQ(FieldPointsForGoal, v))
}

// PointsForGoalIn applies the In predicate on the "points_for_goal" field.
func PointsForGoalIn(vs ...int) predicate.League {
	return predicate.League(sql.FieldIn(FieldPointsForGoal, vs...))
}

// PointsForGoalNotIn applies the NotIn predicate on the "points_for_goal" field.
func PointsForGoalNotIn(vs ...int) predicate.League {
	return predicate.League(sql.FieldNotIn(FieldPointsForGoal, vs...))
}

// PointsForGoalGT applies the GT predicate on the "points_for_goal" field.
func PointsForGoalGT(v int) predicate.League {
	return predicate.League(sql.FieldGT(FieldPointsForGoal, v))
}

// PointsForGoalGTE applies the GTE predicate on the "points_for_goal" field.
func PointsForGoalGTE(v int) predicate.League {
	return predicate.League(sql.FieldGTE(FieldPointsForGoal, v))
}

// PointsForGoalLT applies the LT predicate on the "points_for_goal" field.
func PointsForGoalLT(v int) predicate.League {
	return predicate.League(sql.FieldLT(FieldPointsForGoal, v))
}

// PointsForGoalLTE applies the LTE predicate on the "points_for_goal" field.
func PointsForGoalLTE(v int) predicate.League {
	return predicate.League(sql.FieldLTE(FieldPointsForGoal, v))
}

// PointsForAssistEQ applies the EQ predicate on the "points_for_assist" field.
func PointsForAssistEQ(v int) predicate.League {
	return predicate.League(sql.FieldEQ(FieldPointsForAssist, v))
}

// PointsForAssistNEQ applies the NEQ predicate on the "points_for_assist" field.
func PointsForAssistNEQ(v int) predicate.League {
	return predicate.League(sql.FieldNEQ(FieldPointsForAssist, v))
}

// PointsForAssistIn applies the In predicate on the "points_for_assist" field.
func PointsForAssistIn(vs ...int) predicate.League {
	return predicate.League(sql.FieldIn(FieldPointsForAssist, vs...))
}

// PointsForAssistNotIn applies the NotIn predicate on the "points_for_assist" field.
func PointsForAssistNotIn(vs ...int) predicate.League {
	return predicate.League(sql.FieldNotIn(FieldPointsForAssist, vs...))
}

// PointsForAssistGT applies the GT predicate on the "points_for_assist" field.
func PointsForAssistGT(v int) predicate.League {
	return predicate.League(sql.FieldGT(FieldPointsForAssist, v))
}

// PointsForAssistGTE applies the GTE predicate on the "points_for_assist" field.
func PointsForAssistGTE(v int) predicate.League {
	return predicate.League(sql.FieldGTE(FieldPointsForAssist, v))
}

// PointsForAssistLT applies the LT predicate on the "points_for_assist" field.
func PointsForAssistLT(v int) predicate.League {
	return predicate.League(sql.FieldLT(FieldPointsForAssist, v))
}

// PointsForAssistLTE applies the LTE predicate on the "points_for_assist" field.
func PointsForAssistLTE(v int) predicate.League {
	return predicate.League(sql.FieldLTE(FieldPointsForAssist, v))
}

// GoaliePointsForShutoutEQ applies the EQ predicate on the "goalie_points_for_shutout" field.
func GoaliePointsForShutoutEQ(v int) predicate.League {
	return predicate.League(sql.FieldEQ(FieldGoaliePointsForShutout, v))
}

// GoaliePointsForShutoutNEQ applies the NEQ predicate on the "goalie_points_for_shutout" field.
func GoaliePointsForShutoutNEQ(v int) predicate.League {
	return predicate.League(sql.FieldNEQ(FieldGoaliePointsForShutout, v))
}

// GoaliePointsForShutoutIn applies the In predicate on the "goalie_points_for_shutout" field.
func GoaliePointsForShutoutIn(vs ...int) predicate.League {
	return predicate.League(sql.FieldIn(FieldGoaliePointsForShutout, vs...))
}

// GoaliePointsForShutoutNotIn applies the NotIn predicate on the "goalie_points_for_shutout" field.
func GoaliePointsForShutoutNotIn(vs ...int) predicate.League {
	return predicate.League(sql.FieldNotIn(FieldGoaliePointsForShutout, vs...))
}

// GoaliePointsForShutoutGT applies the GT predicate on the "goalie_points_for_shutout" field.
func GoaliePointsForShutoutGT(v int) predicate.League {
	return predicate.League(sql.FieldGT(FieldGoaliePointsForShutout, v))
}

// GoaliePointsForShutoutGTE applies the GTE predicate on the "goalie_points_for_shutout" field.
func GoaliePointsForShutoutGTE(v int) predicate.League {
	return predicate.League(sql.FieldGTE(FieldGoaliePointsForShutout, v))
}

// GoaliePointsForShutoutLT applies the LT predicate on the "goalie_points_for_shutout" field.
func GoaliePointsForShutoutLT(v int) predicate.League {
	return predicate.League(sql.FieldLT(FieldGoaliePointsForShutout, v))
}

// GoaliePointsForShutoutLTE applies the LTE predicate on the "goalie_points_for_shutout" field.
func GoaliePointsForShutoutLTE(v int) predicate.League {
	return predicate.League(sql.FieldLTE(FieldGoaliePointsForShutout, v))
}

// GoaliePointsForWinEQ applies the EQ predicate on the "goalie_points_for_win" field.
func GoaliePointsForWinEQ(v int) predicate.League {
	return predicate.League(sql.FieldEQ(FieldGoaliePointsForWin, v))
}

// GoaliePointsForWinNEQ applies the NEQ predicate on the "goalie_points_for_win" field.
func GoaliePointsForWinNEQ(v int) predicate.League {
	return predicate.League(sql.FieldNEQ(FieldGoaliePointsForWin, v))
}

// GoaliePointsForWinIn applies the In predicate on the "goalie_points_for_win" field.
func GoaliePointsForWinIn(vs ...int) predicate.League {
	return predicate.League(sql.FieldIn(FieldGoaliePointsForWin, vs...))
}

// GoaliePointsForWinNotIn applies the NotIn predicate on the "goalie_points_for_win" field.
func GoaliePointsForWinNotIn(vs ...int) predicate.League {
	return predicate.League(sql.FieldNotIn(FieldGoaliePointsForWin, vs...))
}

// GoaliePointsForWinGT applies the GT predicate on the "goalie_points_for_win" field.
func GoaliePointsForWinGT(v int) predicate.League {
	return predicate.League(sql.FieldGT(FieldGoaliePointsForWin, v))
}

// GoaliePointsForWinGTE applies the GTE predicate on the "goalie_points_for_win" field.
func GoaliePointsForWinGTE(v int) predicate.League {
	return predicate.League(sql.FieldGTE(FieldGoaliePointsForWin, v))
}

// GoaliePointsForWinLT applies the LT predicate on the "goalie_points_for_win" field.
func GoaliePointsForWinLT(v int) predicate.League {
	return predicate.League(sql.FieldLT(FieldGoaliePointsForWin, v))
}

// GoaliePointsForWinLTE applies the LTE predicate on the "goalie_points_for_win" field.
func GoaliePointsForWinLTE(v int) predicate.League {
	return predicate.League(sql.FieldLTE(FieldGoaliePointsForWin, v))
}

// EditKeyEQ applies the EQ predicate on the "edit_key" field.
func EditKeyEQ(v string) predicate.League {
	return predicate.League(sql.FieldEQ(FieldEditKey, v))
}

// EditKeyNEQ applies the NEQ predicate on the "edit_key" field.
func EditKeyNEQ(v string) predicate.League {
	return predicate.League(sql.FieldNEQ(FieldEditKey, v))
}

// EditKeyIn applies the In predicate on the "edit_key" field.
func EditKeyIn(vs ...string) predicate.League {
	return predicate.League(sql.FieldIn(FieldEditKey, vs...))
}

// EditKeyNotIn applies the NotIn predicate on the "edit_key" field.
func EditKeyNotIn(vs ...string) predicate.League {
	return predicate.League(sql.FieldNotIn(FieldEditKey, vs...))
}

// EditKeyGT applies the GT predicate on the "edit_key" field.
func EditKeyGT(v string) predicate.League {
	return predicate.League(sql.FieldGT(FieldEditKey, v))
}

// EditKeyGTE applies the GTE predicate on the "edit_key" field.
func EditKeyGTE(v string) predicate.League {
	return predicate.League(sql.FieldGTE(FieldEditKey, v))
}

// EditKeyLT applies the LT predicate on the "edit_key" field.
func EditKeyLT(v string) predicate.League {
	return predicate.League(sql.FieldLT(FieldEditKey, v))
}

// EditKeyLTE applies the LTE predicate on the "edit_key" field.
func EditKeyLTE(v string) predicate.League {
	return predicate.League(sql.FieldLTE(FieldEditKey, v))
}

// EditKeyContains applies the Contains predicate on the "edit_key" field.
func EditKeyContains(v string) predicate.League {
	return predicate.League(sql.FieldContains(FieldEditKey, v))
}

// EditKeyHasPrefix applies the HasPrefix predicate on the "edit_key" field.
func EditKeyHasPrefix(v string) predicate.League {
	return predicate.League(sql.FieldHasPrefix(FieldEditKey, v))
}

// EditKeyHasSuffix applies the HasSuffix predicate on the "edit_key" field.
func EditKeyHasSuffix(v string) predicate.League {
	return predicate.League(sql.FieldHasSuffix(FieldEditKey, v))
}

// EditKeyEqualFold applies the EqualFold predicate on the "edit_key" field.
func EditKeyEqualFold(v string) predicate.League {
	return predicate.League(sql.FieldEqualFold(FieldEditKey, v))
}

// EditKeyContainsFold applies the ContainsFold predicate on the "edit_key" field.
func EditKeyContainsFold(v string) predicate.League {
	return predicate.League(sql.FieldContainsFold(FieldEditKey, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.League {
	return predicate.League(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.League {
	return predicate.League(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.League {
	return predicate.League(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.League {
	return predicate.League(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.League {
	return predicate.League(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.League {
	return predicate.League(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.League {
	return predicate.League(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.League {
	return predicate.League(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.League {
	return predicate.League(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.League {
	return predicate.League(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.League {
	return predicate.League(sql.FieldHasSuffix(FieldCode, v))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.League {
	return predicate.League(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.League {
	return predicate.League(sql.FieldContainsFold(FieldCode, v))
}

// HasEntries applies the HasEdge predicate on the "entries" edge.
func HasEntries() predicate.League {
	return predicate.League(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, EntriesTable, EntriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEntriesWith applies the HasEdge predicate on the "entries" edge with a given conditions (other predicates).
func HasEntriesWith(preds ...predicate.Entry) predicate.League {
	return predicate.League(func(s *sql.Selector) {
		step := newEntriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.League) predicate.League {
	return predicate.League(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.League) predicate.League {
	return predicate.League(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.League) predicate.League {
	return predicate.League(func(s *sql.Selector) {
		p(s.Not())
	})
}
