// Code generated by ent, DO NOT EDIT.

package league

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the league type in the database.
	Label = "league"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSeason holds the string denoting the season field in the database.
	FieldSeason = "season"
	// FieldPublic holds the string denoting the public field in the database.
	FieldPublic = "public"
	// FieldNumForwards holds the string denoting the num_forwards field in the database.
	FieldNumForwards = "num_forwards"
	// FieldNumDefenders holds the string denoting the num_defenders field in the database.
	FieldNumDefenders = "num_defenders"
	// FieldNumGoalies holds the string denoting the num_goalies field in the database.
	FieldNumGoalies = "num_goalies"
	// FieldEditKey holds the string denoting the edit_key field in the database.
	FieldEditKey = "edit_key"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// EdgeEntries holds the string denoting the entries edge name in mutations.
	EdgeEntries = "entries"
	// Table holds the table name of the league in the database.
	Table = "leagues"
	// EntriesTable is the table that holds the entries relation/edge.
	EntriesTable = "entries"
	// EntriesInverseTable is the table name for the Entry entity.
	// It exists in this package in order to avoid circular dependency with the "entry" package.
	EntriesInverseTable = "entries"
	// EntriesColumn is the table column denoting the entries relation/edge.
	EntriesColumn = "league_entries"
)

// Columns holds all SQL columns for league fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldSeason,
	FieldPublic,
	FieldNumForwards,
	FieldNumDefenders,
	FieldNumGoalies,
	FieldEditKey,
	FieldCode,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the League queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// BySeason orders the results by the season field.
func BySeason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSeason, opts...).ToFunc()
}

// ByPublic orders the results by the public field.
func ByPublic(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPublic, opts...).ToFunc()
}

// ByNumForwards orders the results by the num_forwards field.
func ByNumForwards(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNumForwards, opts...).ToFunc()
}

// ByNumDefenders orders the results by the num_defenders field.
func ByNumDefenders(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNumDefenders, opts...).ToFunc()
}

// ByNumGoalies orders the results by the num_goalies field.
func ByNumGoalies(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNumGoalies, opts...).ToFunc()
}

// ByEditKey orders the results by the edit_key field.
func ByEditKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEditKey, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByEntriesCount orders the results by entries count.
func ByEntriesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEntriesStep(), opts...)
	}
}

// ByEntries orders the results by entries terms.
func ByEntries(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEntriesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

func newEntriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EntriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EntriesTable, EntriesColumn),
	)
}
