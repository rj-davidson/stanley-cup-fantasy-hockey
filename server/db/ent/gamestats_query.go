// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/game"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/gamestats"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/player"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/predicate"
)

// GameStatsQuery is the builder for querying GameStats entities.
type GameStatsQuery struct {
	config
	ctx        *QueryContext
	order      []gamestats.OrderOption
	inters     []Interceptor
	predicates []predicate.GameStats
	withGame   *GameQuery
	withPlayer *PlayerQuery
	withFKs    bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the GameStatsQuery builder.
func (gsq *GameStatsQuery) Where(ps ...predicate.GameStats) *GameStatsQuery {
	gsq.predicates = append(gsq.predicates, ps...)
	return gsq
}

// Limit the number of records to be returned by this query.
func (gsq *GameStatsQuery) Limit(limit int) *GameStatsQuery {
	gsq.ctx.Limit = &limit
	return gsq
}

// Offset to start from.
func (gsq *GameStatsQuery) Offset(offset int) *GameStatsQuery {
	gsq.ctx.Offset = &offset
	return gsq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (gsq *GameStatsQuery) Unique(unique bool) *GameStatsQuery {
	gsq.ctx.Unique = &unique
	return gsq
}

// Order specifies how the records should be ordered.
func (gsq *GameStatsQuery) Order(o ...gamestats.OrderOption) *GameStatsQuery {
	gsq.order = append(gsq.order, o...)
	return gsq
}

// QueryGame chains the current query on the "game" edge.
func (gsq *GameStatsQuery) QueryGame() *GameQuery {
	query := (&GameClient{config: gsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(gamestats.Table, gamestats.FieldID, selector),
			sqlgraph.To(game.Table, game.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, gamestats.GameTable, gamestats.GameColumn),
		)
		fromU = sqlgraph.SetNeighbors(gsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPlayer chains the current query on the "player" edge.
func (gsq *GameStatsQuery) QueryPlayer() *PlayerQuery {
	query := (&PlayerClient{config: gsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(gamestats.Table, gamestats.FieldID, selector),
			sqlgraph.To(player.Table, player.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, gamestats.PlayerTable, gamestats.PlayerColumn),
		)
		fromU = sqlgraph.SetNeighbors(gsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first GameStats entity from the query.
// Returns a *NotFoundError when no GameStats was found.
func (gsq *GameStatsQuery) First(ctx context.Context) (*GameStats, error) {
	nodes, err := gsq.Limit(1).All(setContextOp(ctx, gsq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{gamestats.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (gsq *GameStatsQuery) FirstX(ctx context.Context) *GameStats {
	node, err := gsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first GameStats ID from the query.
// Returns a *NotFoundError when no GameStats ID was found.
func (gsq *GameStatsQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = gsq.Limit(1).IDs(setContextOp(ctx, gsq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{gamestats.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (gsq *GameStatsQuery) FirstIDX(ctx context.Context) int {
	id, err := gsq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single GameStats entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one GameStats entity is found.
// Returns a *NotFoundError when no GameStats entities are found.
func (gsq *GameStatsQuery) Only(ctx context.Context) (*GameStats, error) {
	nodes, err := gsq.Limit(2).All(setContextOp(ctx, gsq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{gamestats.Label}
	default:
		return nil, &NotSingularError{gamestats.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (gsq *GameStatsQuery) OnlyX(ctx context.Context) *GameStats {
	node, err := gsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only GameStats ID in the query.
// Returns a *NotSingularError when more than one GameStats ID is found.
// Returns a *NotFoundError when no entities are found.
func (gsq *GameStatsQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = gsq.Limit(2).IDs(setContextOp(ctx, gsq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{gamestats.Label}
	default:
		err = &NotSingularError{gamestats.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (gsq *GameStatsQuery) OnlyIDX(ctx context.Context) int {
	id, err := gsq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of GameStatsSlice.
func (gsq *GameStatsQuery) All(ctx context.Context) ([]*GameStats, error) {
	ctx = setContextOp(ctx, gsq.ctx, "All")
	if err := gsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*GameStats, *GameStatsQuery]()
	return withInterceptors[[]*GameStats](ctx, gsq, qr, gsq.inters)
}

// AllX is like All, but panics if an error occurs.
func (gsq *GameStatsQuery) AllX(ctx context.Context) []*GameStats {
	nodes, err := gsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of GameStats IDs.
func (gsq *GameStatsQuery) IDs(ctx context.Context) (ids []int, err error) {
	if gsq.ctx.Unique == nil && gsq.path != nil {
		gsq.Unique(true)
	}
	ctx = setContextOp(ctx, gsq.ctx, "IDs")
	if err = gsq.Select(gamestats.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (gsq *GameStatsQuery) IDsX(ctx context.Context) []int {
	ids, err := gsq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (gsq *GameStatsQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, gsq.ctx, "Count")
	if err := gsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, gsq, querierCount[*GameStatsQuery](), gsq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (gsq *GameStatsQuery) CountX(ctx context.Context) int {
	count, err := gsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (gsq *GameStatsQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, gsq.ctx, "Exist")
	switch _, err := gsq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (gsq *GameStatsQuery) ExistX(ctx context.Context) bool {
	exist, err := gsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the GameStatsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (gsq *GameStatsQuery) Clone() *GameStatsQuery {
	if gsq == nil {
		return nil
	}
	return &GameStatsQuery{
		config:     gsq.config,
		ctx:        gsq.ctx.Clone(),
		order:      append([]gamestats.OrderOption{}, gsq.order...),
		inters:     append([]Interceptor{}, gsq.inters...),
		predicates: append([]predicate.GameStats{}, gsq.predicates...),
		withGame:   gsq.withGame.Clone(),
		withPlayer: gsq.withPlayer.Clone(),
		// clone intermediate query.
		sql:  gsq.sql.Clone(),
		path: gsq.path,
	}
}

// WithGame tells the query-builder to eager-load the nodes that are connected to
// the "game" edge. The optional arguments are used to configure the query builder of the edge.
func (gsq *GameStatsQuery) WithGame(opts ...func(*GameQuery)) *GameStatsQuery {
	query := (&GameClient{config: gsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gsq.withGame = query
	return gsq
}

// WithPlayer tells the query-builder to eager-load the nodes that are connected to
// the "player" edge. The optional arguments are used to configure the query builder of the edge.
func (gsq *GameStatsQuery) WithPlayer(opts ...func(*PlayerQuery)) *GameStatsQuery {
	query := (&PlayerClient{config: gsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gsq.withPlayer = query
	return gsq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Goals int `json:"goals,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.GameStats.Query().
//		GroupBy(gamestats.FieldGoals).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (gsq *GameStatsQuery) GroupBy(field string, fields ...string) *GameStatsGroupBy {
	gsq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &GameStatsGroupBy{build: gsq}
	grbuild.flds = &gsq.ctx.Fields
	grbuild.label = gamestats.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Goals int `json:"goals,omitempty"`
//	}
//
//	client.GameStats.Query().
//		Select(gamestats.FieldGoals).
//		Scan(ctx, &v)
func (gsq *GameStatsQuery) Select(fields ...string) *GameStatsSelect {
	gsq.ctx.Fields = append(gsq.ctx.Fields, fields...)
	sbuild := &GameStatsSelect{GameStatsQuery: gsq}
	sbuild.label = gamestats.Label
	sbuild.flds, sbuild.scan = &gsq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a GameStatsSelect configured with the given aggregations.
func (gsq *GameStatsQuery) Aggregate(fns ...AggregateFunc) *GameStatsSelect {
	return gsq.Select().Aggregate(fns...)
}

func (gsq *GameStatsQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range gsq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, gsq); err != nil {
				return err
			}
		}
	}
	for _, f := range gsq.ctx.Fields {
		if !gamestats.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if gsq.path != nil {
		prev, err := gsq.path(ctx)
		if err != nil {
			return err
		}
		gsq.sql = prev
	}
	return nil
}

func (gsq *GameStatsQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*GameStats, error) {
	var (
		nodes       = []*GameStats{}
		withFKs     = gsq.withFKs
		_spec       = gsq.querySpec()
		loadedTypes = [2]bool{
			gsq.withGame != nil,
			gsq.withPlayer != nil,
		}
	)
	if gsq.withPlayer != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, gamestats.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*GameStats).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &GameStats{config: gsq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, gsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := gsq.withGame; query != nil {
		if err := gsq.loadGame(ctx, query, nodes, nil,
			func(n *GameStats, e *Game) { n.Edges.Game = e }); err != nil {
			return nil, err
		}
	}
	if query := gsq.withPlayer; query != nil {
		if err := gsq.loadPlayer(ctx, query, nodes, nil,
			func(n *GameStats, e *Player) { n.Edges.Player = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (gsq *GameStatsQuery) loadGame(ctx context.Context, query *GameQuery, nodes []*GameStats, init func(*GameStats), assign func(*GameStats, *Game)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*GameStats)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	query.withFKs = true
	query.Where(predicate.Game(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(gamestats.GameColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.game_stats_game
		if fk == nil {
			return fmt.Errorf(`foreign-key "game_stats_game" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "game_stats_game" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (gsq *GameStatsQuery) loadPlayer(ctx context.Context, query *PlayerQuery, nodes []*GameStats, init func(*GameStats), assign func(*GameStats, *Player)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*GameStats)
	for i := range nodes {
		if nodes[i].game_stats_player == nil {
			continue
		}
		fk := *nodes[i].game_stats_player
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(player.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "game_stats_player" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (gsq *GameStatsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := gsq.querySpec()
	_spec.Node.Columns = gsq.ctx.Fields
	if len(gsq.ctx.Fields) > 0 {
		_spec.Unique = gsq.ctx.Unique != nil && *gsq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, gsq.driver, _spec)
}

func (gsq *GameStatsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(gamestats.Table, gamestats.Columns, sqlgraph.NewFieldSpec(gamestats.FieldID, field.TypeInt))
	_spec.From = gsq.sql
	if unique := gsq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if gsq.path != nil {
		_spec.Unique = true
	}
	if fields := gsq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, gamestats.FieldID)
		for i := range fields {
			if fields[i] != gamestats.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := gsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := gsq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := gsq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := gsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (gsq *GameStatsQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(gsq.driver.Dialect())
	t1 := builder.Table(gamestats.Table)
	columns := gsq.ctx.Fields
	if len(columns) == 0 {
		columns = gamestats.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if gsq.sql != nil {
		selector = gsq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if gsq.ctx.Unique != nil && *gsq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range gsq.predicates {
		p(selector)
	}
	for _, p := range gsq.order {
		p(selector)
	}
	if offset := gsq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := gsq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// GameStatsGroupBy is the group-by builder for GameStats entities.
type GameStatsGroupBy struct {
	selector
	build *GameStatsQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (gsgb *GameStatsGroupBy) Aggregate(fns ...AggregateFunc) *GameStatsGroupBy {
	gsgb.fns = append(gsgb.fns, fns...)
	return gsgb
}

// Scan applies the selector query and scans the result into the given value.
func (gsgb *GameStatsGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, gsgb.build.ctx, "GroupBy")
	if err := gsgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GameStatsQuery, *GameStatsGroupBy](ctx, gsgb.build, gsgb, gsgb.build.inters, v)
}

func (gsgb *GameStatsGroupBy) sqlScan(ctx context.Context, root *GameStatsQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(gsgb.fns))
	for _, fn := range gsgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*gsgb.flds)+len(gsgb.fns))
		for _, f := range *gsgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*gsgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gsgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// GameStatsSelect is the builder for selecting fields of GameStats entities.
type GameStatsSelect struct {
	*GameStatsQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (gss *GameStatsSelect) Aggregate(fns ...AggregateFunc) *GameStatsSelect {
	gss.fns = append(gss.fns, fns...)
	return gss
}

// Scan applies the selector query and scans the result into the given value.
func (gss *GameStatsSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, gss.ctx, "Select")
	if err := gss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GameStatsQuery, *GameStatsSelect](ctx, gss.GameStatsQuery, gss, gss.inters, v)
}

func (gss *GameStatsSelect) sqlScan(ctx context.Context, root *GameStatsQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(gss.fns))
	for _, fn := range gss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*gss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
