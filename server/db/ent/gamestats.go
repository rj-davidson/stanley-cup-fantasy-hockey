// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/game"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/gamestats"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/player"
)

// GameStats is the model entity for the GameStats schema.
type GameStats struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Goals holds the value of the "goals" field.
	Goals int `json:"goals,omitempty"`
	// Assists holds the value of the "assists" field.
	Assists int `json:"assists,omitempty"`
	// Win holds the value of the "win" field.
	Win bool `json:"win,omitempty"`
	// Shutout holds the value of the "shutout" field.
	Shutout bool `json:"shutout,omitempty"`
	// HomeGame holds the value of the "homeGame" field.
	HomeGame bool `json:"homeGame,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GameStatsQuery when eager-loading is set.
	Edges             GameStatsEdges `json:"edges"`
	game_stats_player *int
	selectValues      sql.SelectValues
}

// GameStatsEdges holds the relations/edges for other nodes in the graph.
type GameStatsEdges struct {
	// Game holds the value of the game edge.
	Game *Game `json:"game,omitempty"`
	// Player holds the value of the player edge.
	Player *Player `json:"player,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// GameOrErr returns the Game value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GameStatsEdges) GameOrErr() (*Game, error) {
	if e.loadedTypes[0] {
		if e.Game == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: game.Label}
		}
		return e.Game, nil
	}
	return nil, &NotLoadedError{edge: "game"}
}

// PlayerOrErr returns the Player value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GameStatsEdges) PlayerOrErr() (*Player, error) {
	if e.loadedTypes[1] {
		if e.Player == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: player.Label}
		}
		return e.Player, nil
	}
	return nil, &NotLoadedError{edge: "player"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GameStats) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case gamestats.FieldWin, gamestats.FieldShutout, gamestats.FieldHomeGame:
			values[i] = new(sql.NullBool)
		case gamestats.FieldID, gamestats.FieldGoals, gamestats.FieldAssists:
			values[i] = new(sql.NullInt64)
		case gamestats.ForeignKeys[0]: // game_stats_player
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GameStats fields.
func (gs *GameStats) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case gamestats.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			gs.ID = int(value.Int64)
		case gamestats.FieldGoals:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field goals", values[i])
			} else if value.Valid {
				gs.Goals = int(value.Int64)
			}
		case gamestats.FieldAssists:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field assists", values[i])
			} else if value.Valid {
				gs.Assists = int(value.Int64)
			}
		case gamestats.FieldWin:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field win", values[i])
			} else if value.Valid {
				gs.Win = value.Bool
			}
		case gamestats.FieldShutout:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field shutout", values[i])
			} else if value.Valid {
				gs.Shutout = value.Bool
			}
		case gamestats.FieldHomeGame:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field homeGame", values[i])
			} else if value.Valid {
				gs.HomeGame = value.Bool
			}
		case gamestats.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field game_stats_player", value)
			} else if value.Valid {
				gs.game_stats_player = new(int)
				*gs.game_stats_player = int(value.Int64)
			}
		default:
			gs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GameStats.
// This includes values selected through modifiers, order, etc.
func (gs *GameStats) Value(name string) (ent.Value, error) {
	return gs.selectValues.Get(name)
}

// QueryGame queries the "game" edge of the GameStats entity.
func (gs *GameStats) QueryGame() *GameQuery {
	return NewGameStatsClient(gs.config).QueryGame(gs)
}

// QueryPlayer queries the "player" edge of the GameStats entity.
func (gs *GameStats) QueryPlayer() *PlayerQuery {
	return NewGameStatsClient(gs.config).QueryPlayer(gs)
}

// Update returns a builder for updating this GameStats.
// Note that you need to call GameStats.Unwrap() before calling this method if this GameStats
// was returned from a transaction, and the transaction was committed or rolled back.
func (gs *GameStats) Update() *GameStatsUpdateOne {
	return NewGameStatsClient(gs.config).UpdateOne(gs)
}

// Unwrap unwraps the GameStats entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gs *GameStats) Unwrap() *GameStats {
	_tx, ok := gs.config.driver.(*txDriver)
	if !ok {
		panic("ent: GameStats is not a transactional entity")
	}
	gs.config.driver = _tx.drv
	return gs
}

// String implements the fmt.Stringer.
func (gs *GameStats) String() string {
	var builder strings.Builder
	builder.WriteString("GameStats(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gs.ID))
	builder.WriteString("goals=")
	builder.WriteString(fmt.Sprintf("%v", gs.Goals))
	builder.WriteString(", ")
	builder.WriteString("assists=")
	builder.WriteString(fmt.Sprintf("%v", gs.Assists))
	builder.WriteString(", ")
	builder.WriteString("win=")
	builder.WriteString(fmt.Sprintf("%v", gs.Win))
	builder.WriteString(", ")
	builder.WriteString("shutout=")
	builder.WriteString(fmt.Sprintf("%v", gs.Shutout))
	builder.WriteString(", ")
	builder.WriteString("homeGame=")
	builder.WriteString(fmt.Sprintf("%v", gs.HomeGame))
	builder.WriteByte(')')
	return builder.String()
}

// GameStatsSlice is a parsable slice of GameStats.
type GameStatsSlice []*GameStats
