// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/game"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/gamestats"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/player"
)

// GameStatsCreate is the builder for creating a GameStats entity.
type GameStatsCreate struct {
	config
	mutation *GameStatsMutation
	hooks    []Hook
}

// SetGoals sets the "goals" field.
func (gsc *GameStatsCreate) SetGoals(i int) *GameStatsCreate {
	gsc.mutation.SetGoals(i)
	return gsc
}

// SetNillableGoals sets the "goals" field if the given value is not nil.
func (gsc *GameStatsCreate) SetNillableGoals(i *int) *GameStatsCreate {
	if i != nil {
		gsc.SetGoals(*i)
	}
	return gsc
}

// SetAssists sets the "assists" field.
func (gsc *GameStatsCreate) SetAssists(i int) *GameStatsCreate {
	gsc.mutation.SetAssists(i)
	return gsc
}

// SetNillableAssists sets the "assists" field if the given value is not nil.
func (gsc *GameStatsCreate) SetNillableAssists(i *int) *GameStatsCreate {
	if i != nil {
		gsc.SetAssists(*i)
	}
	return gsc
}

// SetWin sets the "win" field.
func (gsc *GameStatsCreate) SetWin(b bool) *GameStatsCreate {
	gsc.mutation.SetWin(b)
	return gsc
}

// SetNillableWin sets the "win" field if the given value is not nil.
func (gsc *GameStatsCreate) SetNillableWin(b *bool) *GameStatsCreate {
	if b != nil {
		gsc.SetWin(*b)
	}
	return gsc
}

// SetShutout sets the "shutout" field.
func (gsc *GameStatsCreate) SetShutout(b bool) *GameStatsCreate {
	gsc.mutation.SetShutout(b)
	return gsc
}

// SetNillableShutout sets the "shutout" field if the given value is not nil.
func (gsc *GameStatsCreate) SetNillableShutout(b *bool) *GameStatsCreate {
	if b != nil {
		gsc.SetShutout(*b)
	}
	return gsc
}

// SetHomeGame sets the "homeGame" field.
func (gsc *GameStatsCreate) SetHomeGame(b bool) *GameStatsCreate {
	gsc.mutation.SetHomeGame(b)
	return gsc
}

// SetNillableHomeGame sets the "homeGame" field if the given value is not nil.
func (gsc *GameStatsCreate) SetNillableHomeGame(b *bool) *GameStatsCreate {
	if b != nil {
		gsc.SetHomeGame(*b)
	}
	return gsc
}

// SetGameID sets the "game" edge to the Game entity by ID.
func (gsc *GameStatsCreate) SetGameID(id int) *GameStatsCreate {
	gsc.mutation.SetGameID(id)
	return gsc
}

// SetGame sets the "game" edge to the Game entity.
func (gsc *GameStatsCreate) SetGame(g *Game) *GameStatsCreate {
	return gsc.SetGameID(g.ID)
}

// SetPlayerID sets the "player" edge to the Player entity by ID.
func (gsc *GameStatsCreate) SetPlayerID(id int) *GameStatsCreate {
	gsc.mutation.SetPlayerID(id)
	return gsc
}

// SetPlayer sets the "player" edge to the Player entity.
func (gsc *GameStatsCreate) SetPlayer(p *Player) *GameStatsCreate {
	return gsc.SetPlayerID(p.ID)
}

// Mutation returns the GameStatsMutation object of the builder.
func (gsc *GameStatsCreate) Mutation() *GameStatsMutation {
	return gsc.mutation
}

// Save creates the GameStats in the database.
func (gsc *GameStatsCreate) Save(ctx context.Context) (*GameStats, error) {
	gsc.defaults()
	return withHooks(ctx, gsc.sqlSave, gsc.mutation, gsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gsc *GameStatsCreate) SaveX(ctx context.Context) *GameStats {
	v, err := gsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gsc *GameStatsCreate) Exec(ctx context.Context) error {
	_, err := gsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gsc *GameStatsCreate) ExecX(ctx context.Context) {
	if err := gsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gsc *GameStatsCreate) defaults() {
	if _, ok := gsc.mutation.Goals(); !ok {
		v := gamestats.DefaultGoals
		gsc.mutation.SetGoals(v)
	}
	if _, ok := gsc.mutation.Assists(); !ok {
		v := gamestats.DefaultAssists
		gsc.mutation.SetAssists(v)
	}
	if _, ok := gsc.mutation.Win(); !ok {
		v := gamestats.DefaultWin
		gsc.mutation.SetWin(v)
	}
	if _, ok := gsc.mutation.Shutout(); !ok {
		v := gamestats.DefaultShutout
		gsc.mutation.SetShutout(v)
	}
	if _, ok := gsc.mutation.HomeGame(); !ok {
		v := gamestats.DefaultHomeGame
		gsc.mutation.SetHomeGame(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gsc *GameStatsCreate) check() error {
	if _, ok := gsc.mutation.Goals(); !ok {
		return &ValidationError{Name: "goals", err: errors.New(`ent: missing required field "GameStats.goals"`)}
	}
	if _, ok := gsc.mutation.Assists(); !ok {
		return &ValidationError{Name: "assists", err: errors.New(`ent: missing required field "GameStats.assists"`)}
	}
	if _, ok := gsc.mutation.Win(); !ok {
		return &ValidationError{Name: "win", err: errors.New(`ent: missing required field "GameStats.win"`)}
	}
	if _, ok := gsc.mutation.Shutout(); !ok {
		return &ValidationError{Name: "shutout", err: errors.New(`ent: missing required field "GameStats.shutout"`)}
	}
	if _, ok := gsc.mutation.HomeGame(); !ok {
		return &ValidationError{Name: "homeGame", err: errors.New(`ent: missing required field "GameStats.homeGame"`)}
	}
	if _, ok := gsc.mutation.GameID(); !ok {
		return &ValidationError{Name: "game", err: errors.New(`ent: missing required edge "GameStats.game"`)}
	}
	if _, ok := gsc.mutation.PlayerID(); !ok {
		return &ValidationError{Name: "player", err: errors.New(`ent: missing required edge "GameStats.player"`)}
	}
	return nil
}

func (gsc *GameStatsCreate) sqlSave(ctx context.Context) (*GameStats, error) {
	if err := gsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	gsc.mutation.id = &_node.ID
	gsc.mutation.done = true
	return _node, nil
}

func (gsc *GameStatsCreate) createSpec() (*GameStats, *sqlgraph.CreateSpec) {
	var (
		_node = &GameStats{config: gsc.config}
		_spec = sqlgraph.NewCreateSpec(gamestats.Table, sqlgraph.NewFieldSpec(gamestats.FieldID, field.TypeInt))
	)
	if value, ok := gsc.mutation.Goals(); ok {
		_spec.SetField(gamestats.FieldGoals, field.TypeInt, value)
		_node.Goals = value
	}
	if value, ok := gsc.mutation.Assists(); ok {
		_spec.SetField(gamestats.FieldAssists, field.TypeInt, value)
		_node.Assists = value
	}
	if value, ok := gsc.mutation.Win(); ok {
		_spec.SetField(gamestats.FieldWin, field.TypeBool, value)
		_node.Win = value
	}
	if value, ok := gsc.mutation.Shutout(); ok {
		_spec.SetField(gamestats.FieldShutout, field.TypeBool, value)
		_node.Shutout = value
	}
	if value, ok := gsc.mutation.HomeGame(); ok {
		_spec.SetField(gamestats.FieldHomeGame, field.TypeBool, value)
		_node.HomeGame = value
	}
	if nodes := gsc.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   gamestats.GameTable,
			Columns: []string{gamestats.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gsc.mutation.PlayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   gamestats.PlayerTable,
			Columns: []string{gamestats.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.game_stats_player = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GameStatsCreateBulk is the builder for creating many GameStats entities in bulk.
type GameStatsCreateBulk struct {
	config
	builders []*GameStatsCreate
}

// Save creates the GameStats entities in the database.
func (gscb *GameStatsCreateBulk) Save(ctx context.Context) ([]*GameStats, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gscb.builders))
	nodes := make([]*GameStats, len(gscb.builders))
	mutators := make([]Mutator, len(gscb.builders))
	for i := range gscb.builders {
		func(i int, root context.Context) {
			builder := gscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GameStatsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gscb *GameStatsCreateBulk) SaveX(ctx context.Context) []*GameStats {
	v, err := gscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gscb *GameStatsCreateBulk) Exec(ctx context.Context) error {
	_, err := gscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gscb *GameStatsCreateBulk) ExecX(ctx context.Context) {
	if err := gscb.Exec(ctx); err != nil {
		panic(err)
	}
}
