// Code generated by ent, DO NOT EDIT.

package stats

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the stats type in the database.
	Label = "stats"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldGoals holds the string denoting the goals field in the database.
	FieldGoals = "goals"
	// FieldAssists holds the string denoting the assists field in the database.
	FieldAssists = "assists"
	// FieldShutouts holds the string denoting the shutouts field in the database.
	FieldShutouts = "shutouts"
	// FieldWins holds the string denoting the wins field in the database.
	FieldWins = "wins"
	// EdgePlayer holds the string denoting the player edge name in mutations.
	EdgePlayer = "player"
	// Table holds the table name of the stats in the database.
	Table = "stats"
	// PlayerTable is the table that holds the player relation/edge.
	PlayerTable = "players"
	// PlayerInverseTable is the table name for the Player entity.
	// It exists in this package in order to avoid circular dependency with the "player" package.
	PlayerInverseTable = "players"
	// PlayerColumn is the table column denoting the player relation/edge.
	PlayerColumn = "stats_player"
)

// Columns holds all SQL columns for stats fields.
var Columns = []string{
	FieldID,
	FieldGoals,
	FieldAssists,
	FieldShutouts,
	FieldWins,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultGoals holds the default value on creation for the "goals" field.
	DefaultGoals int
	// DefaultAssists holds the default value on creation for the "assists" field.
	DefaultAssists int
	// DefaultShutouts holds the default value on creation for the "shutouts" field.
	DefaultShutouts int
	// DefaultWins holds the default value on creation for the "wins" field.
	DefaultWins int
)

// OrderOption defines the ordering options for the Stats queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByGoals orders the results by the goals field.
func ByGoals(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGoals, opts...).ToFunc()
}

// ByAssists orders the results by the assists field.
func ByAssists(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAssists, opts...).ToFunc()
}

// ByShutouts orders the results by the shutouts field.
func ByShutouts(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldShutouts, opts...).ToFunc()
}

// ByWins orders the results by the wins field.
func ByWins(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWins, opts...).ToFunc()
}

// ByPlayerField orders the results by player field.
func ByPlayerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPlayerStep(), sql.OrderByField(field, opts...))
	}
}
func newPlayerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PlayerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, PlayerTable, PlayerColumn),
	)
}
