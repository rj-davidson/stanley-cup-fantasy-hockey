// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/entry"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/game"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/player"
	"github.com/rj-davidson/stanley-cup-fantasy-hockey/db/ent/team"
)

// PlayerCreate is the builder for creating a Player entity.
type PlayerCreate struct {
	config
	mutation *PlayerMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (pc *PlayerCreate) SetName(s string) *PlayerCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetPosition sets the "position" field.
func (pc *PlayerCreate) SetPosition(pl player.Position) *PlayerCreate {
	pc.mutation.SetPosition(pl)
	return pc
}

// SetGoals sets the "goals" field.
func (pc *PlayerCreate) SetGoals(i int) *PlayerCreate {
	pc.mutation.SetGoals(i)
	return pc
}

// SetAssists sets the "assists" field.
func (pc *PlayerCreate) SetAssists(i int) *PlayerCreate {
	pc.mutation.SetAssists(i)
	return pc
}

// SetShutouts sets the "shutouts" field.
func (pc *PlayerCreate) SetShutouts(i int) *PlayerCreate {
	pc.mutation.SetShutouts(i)
	return pc
}

// SetWins sets the "wins" field.
func (pc *PlayerCreate) SetWins(i int) *PlayerCreate {
	pc.mutation.SetWins(i)
	return pc
}

// SetID sets the "id" field.
func (pc *PlayerCreate) SetID(i int) *PlayerCreate {
	pc.mutation.SetID(i)
	return pc
}

// SetTeamID sets the "team" edge to the Team entity by ID.
func (pc *PlayerCreate) SetTeamID(id int) *PlayerCreate {
	pc.mutation.SetTeamID(id)
	return pc
}

// SetNillableTeamID sets the "team" edge to the Team entity by ID if the given value is not nil.
func (pc *PlayerCreate) SetNillableTeamID(id *int) *PlayerCreate {
	if id != nil {
		pc = pc.SetTeamID(*id)
	}
	return pc
}

// SetTeam sets the "team" edge to the Team entity.
func (pc *PlayerCreate) SetTeam(t *Team) *PlayerCreate {
	return pc.SetTeamID(t.ID)
}

// AddEntryIDs adds the "entries" edge to the Entry entity by IDs.
func (pc *PlayerCreate) AddEntryIDs(ids ...int) *PlayerCreate {
	pc.mutation.AddEntryIDs(ids...)
	return pc
}

// AddEntries adds the "entries" edges to the Entry entity.
func (pc *PlayerCreate) AddEntries(e ...*Entry) *PlayerCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return pc.AddEntryIDs(ids...)
}

// AddHomeGamesAsGoalieIDs adds the "homeGamesAsGoalie" edge to the Game entity by IDs.
func (pc *PlayerCreate) AddHomeGamesAsGoalieIDs(ids ...int) *PlayerCreate {
	pc.mutation.AddHomeGamesAsGoalieIDs(ids...)
	return pc
}

// AddHomeGamesAsGoalie adds the "homeGamesAsGoalie" edges to the Game entity.
func (pc *PlayerCreate) AddHomeGamesAsGoalie(g ...*Game) *PlayerCreate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return pc.AddHomeGamesAsGoalieIDs(ids...)
}

// AddAwayGamesAsGoalieIDs adds the "awayGamesAsGoalie" edge to the Game entity by IDs.
func (pc *PlayerCreate) AddAwayGamesAsGoalieIDs(ids ...int) *PlayerCreate {
	pc.mutation.AddAwayGamesAsGoalieIDs(ids...)
	return pc
}

// AddAwayGamesAsGoalie adds the "awayGamesAsGoalie" edges to the Game entity.
func (pc *PlayerCreate) AddAwayGamesAsGoalie(g ...*Game) *PlayerCreate {
	ids := make([]int, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return pc.AddAwayGamesAsGoalieIDs(ids...)
}

// Mutation returns the PlayerMutation object of the builder.
func (pc *PlayerCreate) Mutation() *PlayerMutation {
	return pc.mutation
}

// Save creates the Player in the database.
func (pc *PlayerCreate) Save(ctx context.Context) (*Player, error) {
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PlayerCreate) SaveX(ctx context.Context) *Player {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PlayerCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PlayerCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PlayerCreate) check() error {
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Player.name"`)}
	}
	if _, ok := pc.mutation.Position(); !ok {
		return &ValidationError{Name: "position", err: errors.New(`ent: missing required field "Player.position"`)}
	}
	if v, ok := pc.mutation.Position(); ok {
		if err := player.PositionValidator(v); err != nil {
			return &ValidationError{Name: "position", err: fmt.Errorf(`ent: validator failed for field "Player.position": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Goals(); !ok {
		return &ValidationError{Name: "goals", err: errors.New(`ent: missing required field "Player.goals"`)}
	}
	if _, ok := pc.mutation.Assists(); !ok {
		return &ValidationError{Name: "assists", err: errors.New(`ent: missing required field "Player.assists"`)}
	}
	if _, ok := pc.mutation.Shutouts(); !ok {
		return &ValidationError{Name: "shutouts", err: errors.New(`ent: missing required field "Player.shutouts"`)}
	}
	if _, ok := pc.mutation.Wins(); !ok {
		return &ValidationError{Name: "wins", err: errors.New(`ent: missing required field "Player.wins"`)}
	}
	if v, ok := pc.mutation.ID(); ok {
		if err := player.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Player.id": %w`, err)}
		}
	}
	return nil
}

func (pc *PlayerCreate) sqlSave(ctx context.Context) (*Player, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PlayerCreate) createSpec() (*Player, *sqlgraph.CreateSpec) {
	var (
		_node = &Player{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(player.Table, sqlgraph.NewFieldSpec(player.FieldID, field.TypeInt))
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(player.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.Position(); ok {
		_spec.SetField(player.FieldPosition, field.TypeEnum, value)
		_node.Position = value
	}
	if value, ok := pc.mutation.Goals(); ok {
		_spec.SetField(player.FieldGoals, field.TypeInt, value)
		_node.Goals = value
	}
	if value, ok := pc.mutation.Assists(); ok {
		_spec.SetField(player.FieldAssists, field.TypeInt, value)
		_node.Assists = value
	}
	if value, ok := pc.mutation.Shutouts(); ok {
		_spec.SetField(player.FieldShutouts, field.TypeInt, value)
		_node.Shutouts = value
	}
	if value, ok := pc.mutation.Wins(); ok {
		_spec.SetField(player.FieldWins, field.TypeInt, value)
		_node.Wins = value
	}
	if nodes := pc.mutation.TeamIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   player.TeamTable,
			Columns: []string{player.TeamColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(team.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.team_players = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.EntriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   player.EntriesTable,
			Columns: player.EntriesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(entry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.HomeGamesAsGoalieIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.HomeGamesAsGoalieTable,
			Columns: []string{player.HomeGamesAsGoalieColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.AwayGamesAsGoalieIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   player.AwayGamesAsGoalieTable,
			Columns: []string{player.AwayGamesAsGoalieColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PlayerCreateBulk is the builder for creating many Player entities in bulk.
type PlayerCreateBulk struct {
	config
	builders []*PlayerCreate
}

// Save creates the Player entities in the database.
func (pcb *PlayerCreateBulk) Save(ctx context.Context) ([]*Player, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Player, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlayerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PlayerCreateBulk) SaveX(ctx context.Context) []*Player {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PlayerCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PlayerCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
